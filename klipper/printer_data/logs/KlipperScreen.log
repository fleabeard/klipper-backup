--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-52-gead94b7
2023-10-20 08:34:11,068 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-20 08:34:11,071 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-20 08:34:11,071 [printer.py:reinit()] - # Extruders: 1
2023-10-20 08:34:11,071 [printer.py:reinit()] - # Temperature devices: 1
2023-10-20 08:34:11,071 [printer.py:reinit()] - # Fans: 3
2023-10-20 08:34:11,071 [printer.py:reinit()] - # Output pins: 0
2023-10-20 08:34:11,071 [printer.py:reinit()] - # Leds: 0
2023-10-20 08:34:11,082 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-20 08:34:11,084 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-20 08:34:11,350 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-20 08:34:11,360 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:34:11,361 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:34:11,361 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-20 08:34:11,361 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-20 08:34:11,362 [screen.py:init_printer()] - Printer initialized
2023-10-20 08:34:11,362 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-20 08:34:11,362 [printer.py:change_state()] - Adding callback for state: ready
2023-10-20 08:34:11,365 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-20 08:34:11,435 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-20 08:34:11,441 [main_menu.py:add_device()] - Adding device: extruder
2023-10-20 08:34:11,447 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-20 08:34:11,474 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 08:34:11,475 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-20 08:34:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:34:13,060 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-20 08:34:13,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-20 08:34:13,095 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-20 08:34:13,300 [screen.py:_load_panel()] - Loading panel: extrude
2023-10-20 08:34:13,399 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-20 08:34:13,402 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-20 08:34:13,403 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-20 08:34:16,332 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-20 08:34:16,361 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-20 08:34:16,368 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-20 08:34:17,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:34:17,031 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-20 08:34:17,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-20 08:34:17,042 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-20 08:34:18,837 [screen.py:_load_panel()] - Loading panel: temperature
2023-10-20 08:34:18,854 [temperature.py:add_device()] - Adding device: extruder
2023-10-20 08:34:18,866 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-20 08:34:18,879 [temperature.py:select_heater()] - Selecting extruder
2023-10-20 08:34:18,883 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-20 08:34:18,918 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-20 08:34:19,966 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-20 08:34:21,677 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-20 08:34:21,677 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-20 08:34:21,678 [temperature.py:set_temperature()] - name match extruder
2023-10-20 08:34:21,678 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-20 08:34:22,737 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 08:34:22,756 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-20 08:34:22,758 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-20 08:35:59,182 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-20 08:36:01,160 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-20 08:36:12,442 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-20 08:37:27,546 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2023-10-20 08:37:36,190 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-20 08:37:36,191 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2023-10-20 08:37:44,971 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-20 08:41:31,126 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Edge_Bracket.png. Retrying in 6 seconds
2023-10-20 08:41:31,129 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Edge_Bracket-32x32.png. Retrying in 6 seconds
2023-10-20 08:41:31,178 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-20 08:41:31,179 [printer.py:change_state()] - Adding callback for state: printing
2023-10-20 08:41:31,188 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-20 08:41:31,316 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-20 08:41:31,321 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-20 08:41:31,332 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Edge_Bracket.gcode Size: 1347332
2023-10-20 08:41:31,341 [job_status.py:show_file_thumbnail()] - CE3E3V2_Edge_Bracket.gcode
2023-10-20 08:55:05,396 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-20 08:55:05,397 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-20 08:55:05,402 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-10-20 08:55:05,435 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 08:55:05,478 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 09:00:58,114 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-20 09:00:58,179 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-20 09:00:58,179 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-20 09:00:58,179 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-20 09:00:58,181 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:00:58,245 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 09:01:01,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 09:01:01,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 09:01:01,032 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 09:01:01,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 09:01:01,041 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 09:01:01,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-20 09:01:01,069 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-20 09:01:01,072 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-20 09:01:01,075 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-20 09:01:01,075 [printer.py:reinit()] - # Extruders: 1
2023-10-20 09:01:01,075 [printer.py:reinit()] - # Temperature devices: 1
2023-10-20 09:01:01,075 [printer.py:reinit()] - # Fans: 3
2023-10-20 09:01:01,075 [printer.py:reinit()] - # Output pins: 0
2023-10-20 09:01:01,075 [printer.py:reinit()] - # Leds: 0
2023-10-20 09:01:01,090 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-20 09:01:01,092 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-20 09:01:01,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-20 09:01:01,368 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 09:01:01,373 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-20 09:01:01,382 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-20 09:01:01,384 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-20 09:01:01,384 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-20 09:01:01,384 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-20 09:01:01,385 [screen.py:init_printer()] - Printer initialized
2023-10-20 09:01:01,386 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-20 09:01:01,386 [printer.py:change_state()] - Adding callback for state: startup
2023-10-20 09:01:02,316 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-20 09:01:02,316 [printer.py:change_state()] - Adding callback for state: ready
2023-10-20 09:01:02,319 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:01:02,384 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-20 09:01:02,390 [main_menu.py:add_device()] - Adding device: extruder
2023-10-20 09:01:02,395 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-20 09:01:02,423 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 09:01:34,484 [screen.py:_load_panel()] - Loading panel: move
2023-10-20 09:01:34,585 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-20 09:01:35,344 [screen.py:_load_panel()] - Loading panel: menu
2023-10-20 09:01:35,435 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-20 09:01:35,446 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-20 09:01:35,448 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-20 09:01:36,577 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-20 09:02:28,594 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 09:02:28,629 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-20 09:02:30,322 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 09:02:30,341 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 09:02:31,234 [screen.py:_load_panel()] - Loading panel: print
2023-10-20 09:02:31,240 [print.py:__init__()] - 24h time is True
2023-10-20 09:02:31,264 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-20 09:02:31,264 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-20 09:02:33,147 [KlippyGtk.py:Dialog()] - Showing dialog Print CE3E3V2_Edge_Bracket.gcode (width=800, height=480)
2023-10-20 09:02:35,100 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-20 09:02:35,100 [print.py:confirm_print_response()] - Starting print: CE3E3V2_Edge_Bracket.gcode
2023-10-20 09:02:35,100 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-20 09:02:35,338 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-20 09:02:35,339 [printer.py:change_state()] - Adding callback for state: printing
2023-10-20 09:02:35,353 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:02:35,491 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-20 09:02:35,496 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-20 09:02:35,504 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Edge_Bracket.gcode Size: 1347332
2023-10-20 09:02:35,512 [job_status.py:show_file_thumbnail()] - CE3E3V2_Edge_Bracket.gcode
2023-10-20 09:16:41,996 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-20 09:16:41,997 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-20 09:16:42,044 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:16:42,098 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 09:16:54,817 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-10-20 09:16:54,818 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2023-10-20 09:16:54,820 [screen.py:_load_panel()] - Loading panel: menu
2023-10-20 09:16:54,826 [menu.py:evaluate_enable()] - moonraker connected True
2023-10-20 09:16:54,864 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2023-10-20 09:16:54,869 [menu.py:arrangeMenuItems()] - X > power
2023-10-20 09:16:54,871 [menu.py:evaluate_enable()] - moonraker connected True
2023-10-20 09:16:56,149 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 09:16:56,154 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 09:16:56,918 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-20 09:16:56,983 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-20 09:16:56,983 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-20 09:16:56,985 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-20 09:16:56,987 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:16:57,044 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 09:17:00,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 09:17:00,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 09:17:00,031 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 09:17:00,039 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 09:17:00,040 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 09:17:00,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-20 09:17:00,067 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-20 09:17:00,069 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-20 09:17:00,072 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-20 09:17:00,073 [printer.py:reinit()] - # Extruders: 1
2023-10-20 09:17:00,073 [printer.py:reinit()] - # Temperature devices: 1
2023-10-20 09:17:00,073 [printer.py:reinit()] - # Fans: 3
2023-10-20 09:17:00,073 [printer.py:reinit()] - # Output pins: 0
2023-10-20 09:17:00,073 [printer.py:reinit()] - # Leds: 0
2023-10-20 09:17:00,085 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-20 09:17:00,086 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-20 09:17:00,352 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-20 09:17:00,370 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 09:17:00,375 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-20 09:17:00,385 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-20 09:17:00,386 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-20 09:17:00,386 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-20 09:17:00,386 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-20 09:17:00,386 [screen.py:init_printer()] - Printer initialized
2023-10-20 09:17:00,387 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-20 09:17:00,387 [printer.py:change_state()] - Adding callback for state: startup
2023-10-20 09:17:01,063 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-20 09:17:01,063 [printer.py:change_state()] - Adding callback for state: ready
2023-10-20 09:17:01,066 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:17:01,131 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-20 09:17:01,137 [main_menu.py:add_device()] - Adding device: extruder
2023-10-20 09:17:01,143 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-20 09:17:01,173 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 09:17:12,249 [screen.py:_go_to_submenu()] - #### Go to submenu more
2023-10-20 09:17:12,249 [screen.py:_go_to_submenu()] - #### Menu __main
2023-10-20 09:17:12,255 [screen.py:_load_panel()] - Loading panel: menu
2023-10-20 09:17:12,456 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-20 09:17:12,468 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-20 09:17:12,473 [menu.py:arrangeMenuItems()] - X > more led
2023-10-20 09:17:12,479 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-20 09:17:12,482 [menu.py:arrangeMenuItems()] - X > more power
2023-10-20 09:17:12,496 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-20 09:17:15,209 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 09:17:15,227 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 09:17:17,618 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:17:17,687 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-20 09:17:20,420 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-20 09:17:20,422 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-20 09:17:20,428 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 25.000 [0.000]
2023-10-20 09:17:25,024 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 09:17:25,119 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-20 09:17:25,131 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-20 09:17:25,133 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-20 09:17:26,495 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-20 09:27:46,294 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-20 09:29:52,394 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 09:29:52,428 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-20 09:29:54,982 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-20 09:29:54,984 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-20 09:29:56,157 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-20 09:29:56,159 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-20 09:29:59,902 [move.py:change_distance()] - ### Distance 50
2023-10-20 09:30:01,774 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2023-10-20 09:30:01,777 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-20 09:40:16,094 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-20 10:15:50,009 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Edge_Bracket.png']
2023-10-20 10:15:50,009 [print.py:_callback()] - deletedfiles: []
2023-10-20 10:15:50,009 [print.py:_callback()] - updatefiles: []
2023-10-20 10:15:50,016 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-20 10:15:50,016 [printer.py:change_state()] - Adding callback for state: printing
2023-10-20 10:15:50,027 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 10:15:50,141 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-20 10:15:50,147 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-20 10:15:50,155 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Edge_Bracket.gcode Size: 1347332
2023-10-20 10:15:50,164 [job_status.py:show_file_thumbnail()] - CE3E3V2_Edge_Bracket.gcode
2023-10-20 10:15:50,168 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Edge_Bracket.png. Retrying in 6 seconds
2023-10-20 10:15:50,169 [files.py:add_file()] - File already exists: CE3E3V2_Edge_Bracket.gcode
2023-10-20 10:15:50,207 [print.py:_callback()] - newfiles: []
2023-10-20 10:15:50,207 [print.py:_callback()] - deletedfiles: []
2023-10-20 10:15:50,208 [print.py:_callback()] - updatefiles: ['CE3E3V2_Edge_Bracket.gcode']
2023-10-20 10:15:50,208 [print.py:update_file()] - Updating file CE3E3V2_Edge_Bracket.gcode
2023-10-20 10:15:50,208 [print.py:_callback()] - newfiles: []
2023-10-20 10:15:50,209 [print.py:_callback()] - deletedfiles: []
2023-10-20 10:15:50,209 [print.py:_callback()] - updatefiles: ['CE3E3V2_Edge_Bracket.gcode']
2023-10-20 10:15:50,209 [print.py:update_file()] - Updating file CE3E3V2_Edge_Bracket.gcode
2023-10-20 10:30:02,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-20 10:55:27,372 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-20 10:55:27,400 [screen.py:wake_screen()] - Screen wake up
2023-10-20 10:55:27,804 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-20 10:55:29,875 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-20 10:55:29,876 [printer.py:change_state()] - Adding callback for state: ready
2023-10-20 10:56:55,638 [job_status.py:close_panel()] - Closing job_status panel
2023-10-20 10:56:55,643 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 10:56:55,734 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-20 10:56:55,741 [main_menu.py:add_device()] - Adding device: extruder
2023-10-20 10:56:55,747 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-20 10:56:55,778 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 10:56:56,658 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 10:56:56,723 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-20 10:56:56,725 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-20 10:56:56,727 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-20 10:56:58,113 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-20 10:56:58,128 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-20 10:56:58,174 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-20 10:57:00,078 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 10:57:00,092 [temperature.py:add_device()] - Adding device: extruder
2023-10-20 10:57:00,099 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-20 10:57:00,108 [temperature.py:select_heater()] - Selecting extruder
2023-10-20 10:57:00,109 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-20 10:57:00,137 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-20 10:57:00,887 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-20 10:57:01,574 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-20 10:57:01,574 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-20 10:57:01,574 [temperature.py:set_temperature()] - name match extruder
2023-10-20 10:57:01,575 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-20 10:57:02,298 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 10:57:02,337 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-20 10:57:02,341 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-20 10:58:59,494 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-20 11:09:16,049 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-20 11:32:49,522 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-20 11:32:50,365 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2023-10-20 11:42:51,119 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-20 12:32:51,012 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-20 17:36:00,816 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-20 17:36:00,843 [screen.py:wake_screen()] - Screen wake up
2023-10-20 17:36:18,953 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 17:36:18,973 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-20 17:36:18,975 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-20 17:36:20,966 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 17:36:20,997 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 18:36:21,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-20 20:08:10,417 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-20 20:08:10,444 [screen.py:wake_screen()] - Screen wake up
2023-10-20 20:08:12,352 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-10-20 20:08:16,091 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-20 20:08:16,091 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-20 20:08:16,091 [temperature.py:set_temperature()] - name match extruder
2023-10-20 20:08:16,092 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-20 20:09:33,813 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 20:09:33,831 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 20:09:36,166 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-20 20:09:36,169 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-20 20:09:43,015 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2023-10-20 20:10:14,366 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-20 20:10:14,368 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2023-10-20 20:10:22,730 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-20 20:10:22,763 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-20 20:10:48,751 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.png']
2023-10-20 20:10:48,751 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:10:48,751 [print.py:_callback()] - updatefiles: []
2023-10-20 20:10:48,755 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5-32x32.png']
2023-10-20 20:10:48,755 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:10:48,755 [print.py:_callback()] - updatefiles: []
2023-10-20 20:10:48,759 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.png. Retrying in 6 seconds
2023-10-20 20:10:48,761 [print.py:_callback()] - newfiles: ['CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.gcode']
2023-10-20 20:10:48,782 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:10:48,782 [print.py:_callback()] - updatefiles: []
2023-10-20 20:10:48,783 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5-32x32.png. Retrying in 6 seconds
2023-10-20 20:10:48,784 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-20 20:10:48,785 [printer.py:change_state()] - Adding callback for state: printing
2023-10-20 20:10:48,795 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 20:10:48,917 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-20 20:10:48,923 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-20 20:10:48,931 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.gcode Size: 9135985
2023-10-20 20:10:48,940 [job_status.py:show_file_thumbnail()] - CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.gcode
2023-10-20 20:10:48,944 [print.py:_callback()] - newfiles: []
2023-10-20 20:10:48,944 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:10:48,944 [print.py:_callback()] - updatefiles: ['CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.gcode']
2023-10-20 20:10:48,944 [print.py:update_file()] - Updating file CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.gcode
2023-10-20 20:20:25,766 [print.py:_callback()] - newfiles: ['CE3E3V2_Door_Stop_Only.gcode']
2023-10-20 20:20:25,783 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:20:25,783 [print.py:_callback()] - updatefiles: []
2023-10-20 20:20:25,783 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Door_Stop_Only.png']
2023-10-20 20:20:25,783 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:20:25,784 [print.py:_callback()] - updatefiles: []
2023-10-20 20:20:25,784 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Door_Stop_Only-32x32.png']
2023-10-20 20:20:25,784 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:20:25,784 [print.py:_callback()] - updatefiles: []
2023-10-20 20:20:25,784 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Door_Stop_Only.png. Retrying in 6 seconds
2023-10-20 20:20:25,785 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Door_Stop_Only-32x32.png. Retrying in 6 seconds
2023-10-20 20:20:25,789 [print.py:_callback()] - newfiles: []
2023-10-20 20:20:25,789 [print.py:_callback()] - deletedfiles: []
2023-10-20 20:20:25,789 [print.py:_callback()] - updatefiles: ['CE3E3V2_Door_Stop_Only.gcode']
2023-10-20 20:20:25,790 [print.py:update_file()] - Updating file CE3E3V2_Door_Stop_Only.gcode
2023-10-20 20:20:40,563 [print.py:_callback()] - newfiles: []
2023-10-20 20:20:40,563 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Door_Stop_Only.gcode']
2023-10-20 20:20:40,565 [print.py:_callback()] - updatefiles: []
2023-10-20 20:20:40,815 [print.py:_callback()] - newfiles: []
2023-10-20 20:20:40,815 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Door_Stop_Only-32x32.png']
2023-10-20 20:20:40,815 [print.py:_callback()] - updatefiles: []
2023-10-20 20:20:40,816 [print.py:_callback()] - newfiles: []
2023-10-20 20:20:40,816 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Door_Stop_Only.png']
2023-10-20 20:20:40,816 [print.py:_callback()] - updatefiles: []
2023-10-20 21:10:23,012 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-20 22:37:03,599 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-20 22:37:03,630 [screen.py:wake_screen()] - Screen wake up
2023-10-20 22:37:04,041 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-20 22:37:06,097 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-20 22:37:06,098 [printer.py:change_state()] - Adding callback for state: ready
2023-10-20 22:47:06,079 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-20 23:37:05,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-21 06:52:58,947 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-21 06:52:58,971 [screen.py:wake_screen()] - Screen wake up
2023-10-21 06:53:01,062 [job_status.py:close_panel()] - Closing job_status panel
2023-10-21 06:53:01,068 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 06:53:01,176 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-21 06:53:01,183 [main_menu.py:add_device()] - Adding device: extruder
2023-10-21 06:53:01,189 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-21 06:53:01,221 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-21 06:53:04,357 [main_menu.py:toggle_visibility()] - Graph show False: extruder
2023-10-21 06:53:08,127 [main_menu.py:toggle_visibility()] - Graph show False: heater_bed
2023-10-21 06:53:09,151 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 06:53:09,175 [temperature.py:add_device()] - Adding device: extruder
2023-10-21 06:53:09,186 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-21 06:53:09,197 [temperature.py:select_heater()] - Selecting extruder
2023-10-21 06:53:09,198 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-21 06:53:09,225 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-10-21 06:53:12,130 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-21 06:53:13,445 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-21 06:53:13,446 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-21 06:53:13,446 [temperature.py:set_temperature()] - name match extruder
2023-10-21 06:53:13,446 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-21 06:55:30,015 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-21 06:55:30,050 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-21 06:55:32,342 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 06:55:32,399 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-21 06:55:32,401 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-21 06:55:32,402 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-21 06:55:35,061 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-21 06:57:59,579 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2023-10-21 06:58:46,141 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Door_Stop_Only.png']
2023-10-21 06:58:46,141 [print.py:_callback()] - deletedfiles: []
2023-10-21 06:58:46,141 [print.py:_callback()] - updatefiles: []
2023-10-21 06:58:46,144 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Door_Stop_Only-32x32.png']
2023-10-21 06:58:46,144 [print.py:_callback()] - deletedfiles: []
2023-10-21 06:58:46,144 [print.py:_callback()] - updatefiles: []
2023-10-21 06:58:46,149 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Door_Stop_Only.png. Retrying in 6 seconds
2023-10-21 06:58:46,151 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Door_Stop_Only-32x32.png. Retrying in 6 seconds
2023-10-21 06:58:46,153 [print.py:_callback()] - newfiles: ['CE3E3V2_Door_Stop_Only.gcode']
2023-10-21 06:58:46,169 [print.py:_callback()] - deletedfiles: []
2023-10-21 06:58:46,169 [print.py:_callback()] - updatefiles: []
2023-10-21 06:58:46,172 [print.py:_callback()] - newfiles: []
2023-10-21 06:58:46,172 [print.py:_callback()] - deletedfiles: []
2023-10-21 06:58:46,172 [print.py:_callback()] - updatefiles: ['CE3E3V2_Door_Stop_Only.gcode']
2023-10-21 06:58:46,172 [print.py:update_file()] - Updating file CE3E3V2_Door_Stop_Only.gcode
2023-10-21 06:58:46,222 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 06:58:46,222 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 06:58:46,234 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 06:58:46,350 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 06:58:46,355 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 06:58:46,363 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Door_Stop_Only.gcode Size: 4508236
2023-10-21 06:58:46,371 [job_status.py:show_file_thumbnail()] - CE3E3V2_Door_Stop_Only.gcode
2023-10-21 07:12:41,897 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-21 07:12:42,834 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-21 07:12:42,835 [job_status.py:cancel_confirm()] - Canceling print
2023-10-21 07:12:42,835 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-21 07:12:42,838 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-21 07:12:43,322 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-21 07:12:48,077 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 07:12:48,078 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 07:12:58,174 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-21 07:12:58,176 [job_status.py:restart()] - Starting print: CE3E3V2_Door_Stop_Only.gcode
2023-10-21 07:12:58,361 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 07:12:58,361 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 07:12:58,373 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-21 07:12:58,428 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 07:12:58,564 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 07:12:58,570 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 07:12:58,578 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Door_Stop_Only.gcode Size: 4508236
2023-10-21 07:12:58,586 [job_status.py:show_file_thumbnail()] - CE3E3V2_Door_Stop_Only.gcode
2023-10-21 07:28:22,132 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-10-21 07:28:22,228 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-21 07:28:24,098 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2023-10-21 07:28:25,446 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2023-10-21 07:28:26,125 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-21 07:28:26,147 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 07:28:26,157 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Door_Stop_Only.gcode Size: 4508236
2023-10-21 07:28:26,165 [job_status.py:show_file_thumbnail()] - CE3E3V2_Door_Stop_Only.gcode
2023-10-21 08:24:41,204 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-21 08:24:43,705 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 08:24:43,706 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 08:28:27,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-21 08:34:43,473 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-21 08:34:43,500 [screen.py:wake_screen()] - Screen wake up
2023-10-21 08:34:43,914 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-21 09:34:44,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-21 14:32:02,580 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-21 14:32:02,607 [screen.py:wake_screen()] - Screen wake up
2023-10-21 14:32:03,937 [job_status.py:close_panel()] - Closing job_status panel
2023-10-21 14:32:03,940 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 14:32:04,003 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-21 14:32:04,009 [main_menu.py:add_device()] - Adding device: extruder
2023-10-21 14:32:04,015 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-21 14:32:04,043 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-21 14:32:05,894 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 14:32:05,909 [temperature.py:add_device()] - Adding device: extruder
2023-10-21 14:32:05,916 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-21 14:32:05,924 [temperature.py:select_heater()] - Selecting extruder
2023-10-21 14:32:05,926 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-21 14:32:05,954 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-10-21 14:32:06,834 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-21 14:32:07,594 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-21 14:32:07,594 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-21 14:32:07,594 [temperature.py:set_temperature()] - name match extruder
2023-10-21 14:32:07,594 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-21 14:32:08,405 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-21 14:32:08,438 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-21 14:33:59,844 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 14:33:59,921 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-21 14:33:59,922 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-21 14:33:59,923 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-21 14:34:01,393 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-21 14:34:05,894 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-21 14:36:04,422 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2023-10-21 14:37:34,110 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-21 14:37:34,111 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2023-10-21 14:37:38,577 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-21 14:37:38,580 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2023-10-21 14:38:19,956 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png']
2023-10-21 14:38:19,956 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:38:19,956 [print.py:_callback()] - updatefiles: []
2023-10-21 14:38:19,959 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm-32x32.png']
2023-10-21 14:38:19,959 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:38:19,959 [print.py:_callback()] - updatefiles: []
2023-10-21 14:38:19,962 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png. Retrying in 6 seconds
2023-10-21 14:38:19,964 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_1mm-32x32.png. Retrying in 6 seconds
2023-10-21 14:38:19,966 [print.py:_callback()] - newfiles: ['CE3E3V2_Fan_Mount_for_H2_1mm.gcode']
2023-10-21 14:38:19,980 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:38:19,980 [print.py:_callback()] - updatefiles: []
2023-10-21 14:38:19,982 [print.py:_callback()] - newfiles: []
2023-10-21 14:38:19,982 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:38:19,983 [print.py:_callback()] - updatefiles: ['CE3E3V2_Fan_Mount_for_H2_1mm.gcode']
2023-10-21 14:38:19,983 [print.py:update_file()] - Updating file CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:38:20,065 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 14:38:20,065 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 14:38:20,075 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 14:38:20,207 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 14:38:20,212 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 14:38:20,220 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Fan_Mount_for_H2_1mm.gcode Size: 2069239
2023-10-21 14:38:20,229 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:42:10,457 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-21 14:42:14,954 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 14:42:14,954 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 14:42:44,548 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'standby'
2023-10-21 14:42:51,315 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 14:42:51,316 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 14:42:51,331 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 14:42:51,342 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Fan_Mount_for_H2_1mm.gcode Size: 2069239
2023-10-21 14:42:51,358 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:42:51,415 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 14:42:51,534 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 14:42:51,539 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 14:42:51,548 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Fan_Mount_for_H2_1mm.gcode Size: 2069239
2023-10-21 14:42:51,557 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:48:16,015 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-21 14:48:20,267 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 14:48:20,267 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 14:48:53,103 [files.py:add_file()] - File already exists: .thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png
2023-10-21 14:48:53,105 [print.py:_callback()] - newfiles: []
2023-10-21 14:48:53,105 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:48:53,106 [print.py:_callback()] - updatefiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png']
2023-10-21 14:48:53,106 [print.py:update_file()] - Cannot update file, file not in labels: .thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png
2023-10-21 14:48:53,110 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png. Retrying in 6 seconds
2023-10-21 14:48:53,112 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_1mm-32x32.png. Retrying in 6 seconds
2023-10-21 14:48:53,115 [files.py:add_file()] - File already exists: CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:48:53,116 [print.py:_callback()] - newfiles: []
2023-10-21 14:48:53,116 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:48:53,117 [print.py:_callback()] - updatefiles: ['CE3E3V2_Fan_Mount_for_H2_1mm.gcode']
2023-10-21 14:48:53,117 [print.py:update_file()] - Updating file CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:48:53,125 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 14:48:53,125 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 14:48:53,131 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-21 14:48:53,162 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 14:48:53,278 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 14:48:53,283 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 14:48:53,292 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Fan_Mount_for_H2_1mm.gcode Size: 2069023
2023-10-21 14:48:53,299 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 14:48:53,303 [print.py:_callback()] - newfiles: []
2023-10-21 14:48:53,304 [print.py:_callback()] - deletedfiles: []
2023-10-21 14:48:53,304 [print.py:_callback()] - updatefiles: ['CE3E3V2_Fan_Mount_for_H2_1mm.gcode']
2023-10-21 14:48:53,304 [print.py:update_file()] - Updating file CE3E3V2_Fan_Mount_for_H2_1mm.gcode
2023-10-21 15:31:26,497 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-21 15:31:28,992 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 15:31:28,992 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 15:37:09,077 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_2mm.png']
2023-10-21 15:37:09,077 [print.py:_callback()] - deletedfiles: []
2023-10-21 15:37:09,077 [print.py:_callback()] - updatefiles: []
2023-10-21 15:37:09,080 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_2mm-32x32.png']
2023-10-21 15:37:09,080 [print.py:_callback()] - deletedfiles: []
2023-10-21 15:37:09,080 [print.py:_callback()] - updatefiles: []
2023-10-21 15:37:09,084 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_2mm.png. Retrying in 6 seconds
2023-10-21 15:37:09,091 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 15:37:09,091 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 15:37:09,099 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-21 15:37:09,104 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2023-10-21 15:37:09,104 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_2mm.gcode
2023-10-21 15:37:09,104 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-21 15:37:09,131 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 15:37:09,249 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 15:37:09,254 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 15:37:09,262 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2023-10-21 15:37:09,262 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_2mm.gcode
2023-10-21 15:37:09,262 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-21 15:37:09,264 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_2mm-32x32.png. Retrying in 6 seconds
2023-10-21 15:37:09,296 [print.py:_callback()] - newfiles: ['CE3E3V2_Fan_Mount_for_H2_2mm.gcode']
2023-10-21 15:37:09,309 [print.py:_callback()] - deletedfiles: []
2023-10-21 15:37:09,310 [print.py:_callback()] - updatefiles: []
2023-10-21 15:37:09,312 [print.py:_callback()] - newfiles: []
2023-10-21 15:37:09,313 [print.py:_callback()] - deletedfiles: []
2023-10-21 15:37:09,313 [print.py:_callback()] - updatefiles: ['CE3E3V2_Fan_Mount_for_H2_2mm.gcode']
2023-10-21 15:37:09,313 [print.py:update_file()] - Updating file CE3E3V2_Fan_Mount_for_H2_2mm.gcode
2023-10-21 15:37:09,314 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Fan_Mount_for_H2_2mm.gcode Size: 1226325
2023-10-21 15:37:09,322 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_2mm.gcode
2023-10-21 15:37:39,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-21 15:43:38,855 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-21 15:43:38,879 [screen.py:wake_screen()] - Screen wake up
2023-10-21 16:00:29,946 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-21 16:00:32,441 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 16:00:32,442 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 16:10:32,217 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-21 16:12:13,818 [job_status.py:close_panel()] - Closing job_status panel
2023-10-21 16:12:13,823 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 16:12:13,922 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-21 16:12:13,931 [main_menu.py:add_device()] - Adding device: extruder
2023-10-21 16:12:13,939 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-21 16:12:13,975 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-21 16:12:15,190 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 16:12:15,260 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-21 16:12:20,442 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2023-10-21 16:12:20,446 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-21 16:12:20,464 [screen.py:show_popup_message()] - error: Must home axis first: 129.895 124.043 65.000 [26637.483]
2023-10-21 16:12:24,136 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 16:12:24,228 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-21 16:12:24,239 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-21 16:12:24,241 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-21 16:12:24,789 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-21 16:12:49,586 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-21 16:12:49,627 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-21 16:12:51,125 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2023-10-21 16:12:51,130 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-21 16:12:59,919 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2023-10-21 16:12:59,923 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-21 16:13:32,583 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2023-10-21 16:13:32,586 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-21 16:23:43,517 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-21 17:03:10,548 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-21 17:03:11,465 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-21 17:03:11,466 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2023-10-21 17:13:12,438 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-21 18:03:12,016 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-21 19:56:58,483 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm.png']
2023-10-21 19:56:58,483 [print.py:_callback()] - deletedfiles: []
2023-10-21 19:56:58,484 [print.py:_callback()] - updatefiles: []
2023-10-21 19:56:58,486 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm-32x32.png']
2023-10-21 19:56:58,486 [print.py:_callback()] - deletedfiles: []
2023-10-21 19:56:58,487 [print.py:_callback()] - updatefiles: []
2023-10-21 19:56:58,490 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm.png. Retrying in 6 seconds
2023-10-21 19:56:58,494 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm-32x32.png. Retrying in 6 seconds
2023-10-21 19:56:58,496 [print.py:_callback()] - newfiles: ['CE3E3V2_Fan_Mount_for_H2_remixed_3mm.gcode']
2023-10-21 19:56:58,510 [print.py:_callback()] - deletedfiles: []
2023-10-21 19:56:58,510 [print.py:_callback()] - updatefiles: []
2023-10-21 19:56:58,513 [print.py:_callback()] - newfiles: []
2023-10-21 19:56:58,513 [print.py:_callback()] - deletedfiles: []
2023-10-21 19:56:58,513 [print.py:_callback()] - updatefiles: ['CE3E3V2_Fan_Mount_for_H2_remixed_3mm.gcode']
2023-10-21 19:56:58,513 [print.py:update_file()] - Updating file CE3E3V2_Fan_Mount_for_H2_remixed_3mm.gcode
2023-10-21 19:56:58,548 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-21 19:56:58,548 [printer.py:change_state()] - Adding callback for state: printing
2023-10-21 19:56:58,549 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-21 19:56:58,561 [screen.py:wake_screen()] - Screen wake up
2023-10-21 19:56:58,958 [screen.py:show_panel()] - Reinitializing panel
2023-10-21 19:56:59,072 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-21 19:56:59,077 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-21 19:56:59,085 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Fan_Mount_for_H2_remixed_3mm.gcode Size: 1220167
2023-10-21 19:56:59,092 [job_status.py:show_file_thumbnail()] - CE3E3V2_Fan_Mount_for_H2_remixed_3mm.gcode
2023-10-21 20:22:14,818 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-21 20:22:17,316 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-21 20:22:17,317 [printer.py:change_state()] - Adding callback for state: ready
2023-10-21 20:32:17,171 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-21 20:56:59,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 07:06:47,579 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_xboxONEmount.png']
2023-10-22 07:06:47,579 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:06:47,579 [print.py:_callback()] - updatefiles: []
2023-10-22 07:06:47,579 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_xboxONEmount-32x32.png']
2023-10-22 07:06:47,580 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:06:47,580 [print.py:_callback()] - updatefiles: []
2023-10-22 07:06:47,584 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_xboxONEmount.png. Retrying in 6 seconds
2023-10-22 07:06:47,585 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_xboxONEmount-32x32.png. Retrying in 6 seconds
2023-10-22 07:06:47,587 [print.py:_callback()] - newfiles: ['CE3E3V2_xboxONEmount.gcode']
2023-10-22 07:06:47,603 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:06:47,603 [print.py:_callback()] - updatefiles: []
2023-10-22 07:06:47,606 [print.py:_callback()] - newfiles: []
2023-10-22 07:06:47,606 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:06:47,606 [print.py:_callback()] - updatefiles: ['CE3E3V2_xboxONEmount.gcode']
2023-10-22 07:06:47,607 [print.py:update_file()] - Updating file CE3E3V2_xboxONEmount.gcode
2023-10-22 07:06:47,661 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-22 07:06:47,662 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 07:06:47,666 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-22 07:06:47,667 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_xboxONEmount.gcode Size: 4693153
2023-10-22 07:06:47,677 [job_status.py:show_file_thumbnail()] - CE3E3V2_xboxONEmount.gcode
2023-10-22 07:06:47,680 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 07:06:47,693 [screen.py:wake_screen()] - Screen wake up
2023-10-22 07:06:48,090 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 07:06:48,203 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 07:06:48,208 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 07:06:48,216 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_xboxONEmount.gcode Size: 4693153
2023-10-22 07:06:48,225 [job_status.py:show_file_thumbnail()] - CE3E3V2_xboxONEmount.gcode
2023-10-22 07:12:20,342 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-22 07:12:24,841 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-22 07:12:24,842 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 07:13:02,349 [print.py:_callback()] - newfiles: []
2023-10-22 07:13:02,349 [print.py:_callback()] - deletedfiles: ['CE3E3V2_xboxONEmount.gcode']
2023-10-22 07:13:02,352 [print.py:_callback()] - updatefiles: []
2023-10-22 07:13:02,602 [print.py:_callback()] - newfiles: []
2023-10-22 07:13:02,603 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_xboxONEmount-32x32.png']
2023-10-22 07:13:02,603 [print.py:_callback()] - updatefiles: []
2023-10-22 07:13:02,606 [print.py:_callback()] - newfiles: []
2023-10-22 07:13:02,607 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_xboxONEmount.png']
2023-10-22 07:13:02,607 [print.py:_callback()] - updatefiles: []
2023-10-22 07:13:14,540 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.png']
2023-10-22 07:13:14,540 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:13:14,541 [print.py:_callback()] - updatefiles: []
2023-10-22 07:13:14,541 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar-32x32.png']
2023-10-22 07:13:14,541 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:13:14,541 [print.py:_callback()] - updatefiles: []
2023-10-22 07:13:14,544 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.png. Retrying in 6 seconds
2023-10-22 07:13:14,547 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar-32x32.png. Retrying in 6 seconds
2023-10-22 07:13:14,549 [print.py:_callback()] - newfiles: ['CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode']
2023-10-22 07:13:14,563 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:13:14,564 [print.py:_callback()] - updatefiles: []
2023-10-22 07:13:14,566 [print.py:_callback()] - newfiles: []
2023-10-22 07:13:14,567 [print.py:_callback()] - deletedfiles: []
2023-10-22 07:13:14,567 [print.py:_callback()] - updatefiles: ['CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode']
2023-10-22 07:13:14,567 [print.py:update_file()] - Updating file CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 07:13:14,729 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-22 07:13:14,729 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 07:13:14,738 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-22 07:13:14,742 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 07:13:14,751 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 07:13:14,786 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 07:13:14,899 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 07:13:14,904 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 07:13:14,913 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 07:13:14,921 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 08:05:55,848 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-10-22 08:05:55,848 [printer.py:change_state()] - Adding callback for state: paused
2023-10-22 08:05:55,861 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-10-22 08:05:55,915 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:05:56,056 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 08:05:56,062 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-10-22 08:05:56,070 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 08:05:56,079 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 08:05:56,084 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:05:56,143 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-10-22 08:05:56,146 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-22 08:05:56,148 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-22 08:06:01,609 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2023-10-22 08:06:01,610 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 08:06:49,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 08:11:04,176 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 08:11:04,202 [screen.py:wake_screen()] - Screen wake up
2023-10-22 08:11:08,673 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-22 08:11:08,698 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 08:11:08,705 [job_status.py:set_state()] - Changing job_status state from 'paused' to 'cancelled'
2023-10-22 08:11:08,708 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 08:11:08,717 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 08:11:10,930 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-22 08:11:10,934 [job_status.py:restart()] - Starting print: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 08:11:11,040 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-22 08:11:11,041 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 08:11:11,048 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-22 08:11:11,091 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:11:11,226 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 08:11:11,231 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 08:11:11,243 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 08:11:11,253 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 08:16:13,463 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-22 08:16:14,387 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-22 08:16:14,388 [job_status.py:cancel_confirm()] - Canceling print
2023-10-22 08:16:14,388 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-22 08:16:14,391 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-22 08:16:15,074 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-22 08:16:19,579 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-22 08:16:19,579 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 08:16:49,416 [job_status.py:close_panel()] - Closing job_status panel
2023-10-22 08:16:49,421 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:16:49,529 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-22 08:16:49,536 [main_menu.py:add_device()] - Adding device: extruder
2023-10-22 08:16:49,541 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-22 08:16:49,572 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-22 08:16:51,615 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:16:51,688 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-22 08:16:52,504 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:16:52,600 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-22 08:16:52,611 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-22 08:16:52,613 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-22 08:16:53,131 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-22 08:16:59,066 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-22 08:16:59,100 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-22 08:17:00,817 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-22 08:17:00,836 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-22 08:17:02,169 [screen.py:_go_to_submenu()] - #### Go to submenu more
2023-10-22 08:17:02,169 [screen.py:_go_to_submenu()] - #### Menu __main
2023-10-22 08:17:02,175 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:17:02,407 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-22 08:17:02,419 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-22 08:17:02,425 [menu.py:arrangeMenuItems()] - X > more led
2023-10-22 08:17:02,432 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-22 08:17:02,435 [menu.py:arrangeMenuItems()] - X > more power
2023-10-22 08:17:02,452 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-22 08:17:03,367 [screen.py:_load_panel()] - Loading panel: bed_mesh
2023-10-22 08:17:03,386 [bed_mesh.py:add_profile()] - Adding Profile: default
2023-10-22 08:17:03,410 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_mesh
2023-10-22 08:17:03,411 [bed_mesh.py:activate_mesh()] - Clearing active profile
2023-10-22 08:17:03,411 [bed_mesh.py:activate_mesh()] - Clearing active profile
2023-10-22 08:17:18,219 [screen.py:show_popup_message()] - echo: Calibrating
2023-10-22 08:17:18,226 [screen.py:_send_action()] - printer.gcode.script: {'script': 'BED_MESH_CALIBRATE'}
2023-10-22 08:17:18,230 [printer.py:get_probe()] - Probe type: bltouch
2023-10-22 08:20:19,731 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xe9d44208 (GtkDialog at 0x1df0538)>
2023-10-22 08:20:19,760 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-22 08:20:19,777 [bed_mesh.py:activate_mesh()] - Active None changing to default
2023-10-22 08:20:22,285 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-22 08:20:22,285 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2023-10-22 08:20:23,402 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-22 08:20:23,402 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-22 08:20:23,402 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-22 08:20:23,404 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:20:23,450 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-22 08:20:27,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-22 08:20:27,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-22 08:20:27,032 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-22 08:20:27,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-22 08:20:27,041 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-22 08:20:27,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-22 08:20:27,069 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-22 08:20:27,072 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.037500, 0.036250, -0.046250, -0.042500\n0.056250, 0.033750, -0.035000, -0.043750\n0.098750, 0.043750, -0.040000, -0.075000\n0.117500, 0.080000, 0.006250, -0.022500', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0375, 0.03625, -0.04625, -0.0425], [0.05625, 0.03375, -0.035, -0.04375], [0.09875, 0.04375, -0.04, -0.075], [0.1175, 0.08, 0.00625, -0.0225]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-22 08:20:27,075 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-22 08:20:27,075 [printer.py:reinit()] - # Extruders: 1
2023-10-22 08:20:27,075 [printer.py:reinit()] - # Temperature devices: 1
2023-10-22 08:20:27,075 [printer.py:reinit()] - # Fans: 3
2023-10-22 08:20:27,076 [printer.py:reinit()] - # Output pins: 0
2023-10-22 08:20:27,076 [printer.py:reinit()] - # Leds: 0
2023-10-22 08:20:27,090 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-22 08:20:27,092 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-22 08:20:27,353 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-22 08:20:27,371 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-22 08:20:27,375 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-22 08:20:27,391 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-22 08:20:27,394 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-22 08:20:27,394 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-22 08:20:27,394 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-22 08:20:27,397 [screen.py:init_printer()] - Printer initialized
2023-10-22 08:20:27,397 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-22 08:20:27,398 [printer.py:change_state()] - Adding callback for state: startup
2023-10-22 08:20:27,450 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,451 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Edge_Bracket.png', '.thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.png', '.thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5-32x32.png', '.thumbs/CE3E3V2_Door_Stop_Only.png', '.thumbs/CE3E3V2_Door_Stop_Only-32x32.png', '.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png', '.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm-32x32.png', '.thumbs/CE3E3V2_Fan_Mount_for_H2_2mm.png', '.thumbs/CE3E3V2_Fan_Mount_for_H2_2mm-32x32.png', '.thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm.png', '.thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm-32x32.png', '.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.png', '.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar-32x32.png']
2023-10-22 08:20:27,451 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,452 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,452 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Edge_Bracket.png']
2023-10-22 08:20:27,453 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,453 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,453 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5.png']
2023-10-22 08:20:27,454 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,454 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,454 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_ender_3_neo_biqu_h2_mounting_plate_v5-32x32.png']
2023-10-22 08:20:27,455 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,455 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,455 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Door_Stop_Only.png']
2023-10-22 08:20:27,455 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,456 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,456 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Door_Stop_Only-32x32.png']
2023-10-22 08:20:27,456 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,457 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,457 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm.png']
2023-10-22 08:20:27,457 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,458 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,458 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_1mm-32x32.png']
2023-10-22 08:20:27,458 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,459 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,459 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_2mm.png']
2023-10-22 08:20:27,459 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,460 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,460 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_2mm-32x32.png']
2023-10-22 08:20:27,460 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,461 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,461 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm.png']
2023-10-22 08:20:27,461 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,461 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,462 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Fan_Mount_for_H2_remixed_3mm-32x32.png']
2023-10-22 08:20:27,462 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,463 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,463 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.png']
2023-10-22 08:20:27,463 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,463 [print.py:_callback()] - newfiles: []
2023-10-22 08:20:27,464 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar-32x32.png']
2023-10-22 08:20:27,464 [print.py:_callback()] - updatefiles: []
2023-10-22 08:20:27,564 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-22 08:20:27,564 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 08:20:27,566 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:20:27,634 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-22 08:20:27,640 [main_menu.py:add_device()] - Adding device: extruder
2023-10-22 08:20:27,646 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-22 08:20:27,674 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-22 08:20:38,353 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-22 08:20:38,353 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 08:20:38,373 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 08:20:38,508 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 08:20:38,512 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 08:20:38,521 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 08:20:38,529 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 09:20:23,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 09:21:38,355 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 09:21:38,388 [screen.py:wake_screen()] - Screen wake up
2023-10-22 09:21:40,182 [KlippyWebsocket.py:print_pause()] - Sending printer.print.pause
2023-10-22 09:21:40,630 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2023-10-22 09:21:40,630 [printer.py:change_state()] - Adding callback for state: paused
2023-10-22 09:21:40,635 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2023-10-22 09:21:40,672 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 09:21:40,787 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 09:21:40,792 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2023-10-22 09:21:40,800 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 09:21:40,808 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 09:21:40,813 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 09:21:40,867 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2023-10-22 09:21:40,869 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-22 09:21:40,870 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-22 09:21:46,294 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-22 09:22:31,302 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2023-10-22 09:22:58,726 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-22 09:22:58,771 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 09:22:58,783 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 09:22:58,795 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 09:23:00,297 [KlippyWebsocket.py:print_resume()] - Sending printer.print.resume
2023-10-22 09:23:00,366 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2023-10-22 09:23:00,366 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 09:23:00,371 [job_status.py:set_state()] - Changing job_status state from 'paused' to 'printing'
2023-10-22 09:23:00,400 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 09:23:00,515 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 09:23:00,520 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 09:23:00,529 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode Size: 8969149
2023-10-22 09:23:00,537 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_charging_hangar.gcode
2023-10-22 10:23:01,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 11:42:48,900 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 11:42:48,932 [screen.py:wake_screen()] - Screen wake up
2023-10-22 11:42:49,340 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-22 11:42:51,401 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-22 11:42:51,401 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 11:52:51,156 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-22 11:59:59,614 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.png']
2023-10-22 11:59:59,614 [print.py:_callback()] - deletedfiles: []
2023-10-22 11:59:59,615 [print.py:_callback()] - updatefiles: []
2023-10-22 11:59:59,615 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base-32x32.png']
2023-10-22 11:59:59,615 [print.py:_callback()] - deletedfiles: []
2023-10-22 11:59:59,615 [print.py:_callback()] - updatefiles: []
2023-10-22 11:59:59,616 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.png. Retrying in 6 seconds
2023-10-22 11:59:59,620 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base-32x32.png. Retrying in 6 seconds
2023-10-22 11:59:59,621 [print.py:_callback()] - newfiles: ['CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode']
2023-10-22 11:59:59,638 [print.py:_callback()] - deletedfiles: []
2023-10-22 11:59:59,638 [print.py:_callback()] - updatefiles: []
2023-10-22 11:59:59,641 [print.py:_callback()] - newfiles: []
2023-10-22 11:59:59,641 [print.py:_callback()] - deletedfiles: []
2023-10-22 11:59:59,641 [print.py:_callback()] - updatefiles: ['CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode']
2023-10-22 11:59:59,641 [print.py:update_file()] - Updating file CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode
2023-10-22 11:59:59,751 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-22 11:59:59,751 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 11:59:59,757 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-22 11:59:59,761 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode Size: 3161688
2023-10-22 11:59:59,770 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode
2023-10-22 11:59:59,798 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 11:59:59,919 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 11:59:59,924 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 11:59:59,933 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode Size: 3161688
2023-10-22 11:59:59,941 [job_status.py:show_file_thumbnail()] - CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.gcode
2023-10-22 12:42:50,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 13:15:07,510 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 13:15:07,545 [screen.py:wake_screen()] - Screen wake up
2023-10-22 13:15:07,946 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-22 13:15:10,009 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-22 13:15:10,010 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 13:25:09,865 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-22 13:28:46,832 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Carriage mount Ender V2 mk2.png']
2023-10-22 13:28:46,833 [print.py:_callback()] - deletedfiles: []
2023-10-22 13:28:46,833 [print.py:_callback()] - updatefiles: []
2023-10-22 13:28:46,836 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Carriage mount Ender V2 mk2-32x32.png']
2023-10-22 13:28:46,837 [print.py:_callback()] - deletedfiles: []
2023-10-22 13:28:46,837 [print.py:_callback()] - updatefiles: []
2023-10-22 13:28:46,840 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Carriage mount Ender V2 mk2.png. Retrying in 6 seconds
2023-10-22 13:28:46,844 [print.py:_callback()] - newfiles: ['CE3E3V2_Carriage mount Ender V2 mk2.gcode']
2023-10-22 13:28:46,863 [print.py:_callback()] - deletedfiles: []
2023-10-22 13:28:46,863 [print.py:_callback()] - updatefiles: []
2023-10-22 13:28:46,863 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Carriage mount Ender V2 mk2-32x32.png. Retrying in 6 seconds
2023-10-22 13:28:46,866 [print.py:_callback()] - newfiles: []
2023-10-22 13:28:46,867 [print.py:_callback()] - deletedfiles: []
2023-10-22 13:28:46,867 [print.py:_callback()] - updatefiles: ['CE3E3V2_Carriage mount Ender V2 mk2.gcode']
2023-10-22 13:28:46,867 [print.py:update_file()] - Updating file CE3E3V2_Carriage mount Ender V2 mk2.gcode
2023-10-22 13:28:46,941 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-22 13:28:46,941 [printer.py:change_state()] - Adding callback for state: printing
2023-10-22 13:28:46,948 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-22 13:28:46,953 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Carriage mount Ender V2 mk2.gcode Size: 4704894
2023-10-22 13:28:46,962 [job_status.py:show_file_thumbnail()] - CE3E3V2_Carriage mount Ender V2 mk2.gcode
2023-10-22 13:28:46,991 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 13:28:47,109 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-22 13:28:47,116 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-22 13:28:47,127 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Carriage mount Ender V2 mk2.gcode Size: 4704894
2023-10-22 13:28:47,136 [job_status.py:show_file_thumbnail()] - CE3E3V2_Carriage mount Ender V2 mk2.gcode
2023-10-22 13:43:27,363 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-22 13:43:28,571 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-22 13:43:28,571 [job_status.py:cancel_confirm()] - Canceling print
2023-10-22 13:43:28,572 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-22 13:43:28,575 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-22 13:43:30,045 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-22 13:43:34,556 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-22 13:43:34,557 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 13:53:34,482 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-22 14:43:29,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 17:43:48,413 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-22 17:43:48,414 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-22 17:43:48,417 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 17:43:48,444 [screen.py:wake_screen()] - Screen wake up
2023-10-22 17:43:48,851 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:43:48,949 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-22 17:43:54,641 [KlippyWebsocket.py:restart()] - Sending printer.restart
2023-10-22 17:43:54,660 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-22 17:43:54,660 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-22 17:43:54,661 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-22 17:43:54,663 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:43:54,729 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-22 17:43:58,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-22 17:43:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-22 17:43:58,033 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-22 17:43:58,041 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-22 17:43:58,042 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-22 17:43:58,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-22 17:43:58,135 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-22 17:43:58,137 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.037500, 0.036250, -0.046250, -0.042500\n0.056250, 0.033750, -0.035000, -0.043750\n0.098750, 0.043750, -0.040000, -0.075000\n0.117500, 0.080000, 0.006250, -0.022500', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0375, 0.03625, -0.04625, -0.0425], [0.05625, 0.03375, -0.035, -0.04375], [0.09875, 0.04375, -0.04, -0.075], [0.1175, 0.08, 0.00625, -0.0225]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-22 17:43:58,140 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-22 17:43:58,141 [printer.py:reinit()] - # Extruders: 1
2023-10-22 17:43:58,141 [printer.py:reinit()] - # Temperature devices: 1
2023-10-22 17:43:58,141 [printer.py:reinit()] - # Fans: 3
2023-10-22 17:43:58,141 [printer.py:reinit()] - # Output pins: 0
2023-10-22 17:43:58,141 [printer.py:reinit()] - # Leds: 0
2023-10-22 17:43:58,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-22 17:43:58,154 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-22 17:43:58,423 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-22 17:43:58,443 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-22 17:43:58,447 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-22 17:43:58,456 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-22 17:43:58,457 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-22 17:43:58,458 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-22 17:43:58,458 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-22 17:43:58,458 [screen.py:init_printer()] - Printer initialized
2023-10-22 17:43:58,459 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-22 17:43:58,459 [printer.py:change_state()] - Adding callback for state: error
2023-10-22 17:43:58,461 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:43:58,506 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-22 17:43:58,552 [print.py:_callback()] - newfiles: []
2023-10-22 17:43:58,552 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.png', '.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base-32x32.png', '.thumbs/CE3E3V2_Carriage mount Ender V2 mk2.png', '.thumbs/CE3E3V2_Carriage mount Ender V2 mk2-32x32.png']
2023-10-22 17:43:58,552 [print.py:_callback()] - updatefiles: []
2023-10-22 17:43:58,553 [print.py:_callback()] - newfiles: []
2023-10-22 17:43:58,553 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base.png']
2023-10-22 17:43:58,553 [print.py:_callback()] - updatefiles: []
2023-10-22 17:43:58,554 [print.py:_callback()] - newfiles: []
2023-10-22 17:43:58,554 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Xbox_Elite_Series_2_Controller_Charging_Base-32x32.png']
2023-10-22 17:43:58,554 [print.py:_callback()] - updatefiles: []
2023-10-22 17:43:58,555 [print.py:_callback()] - newfiles: []
2023-10-22 17:43:58,555 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Carriage mount Ender V2 mk2.png']
2023-10-22 17:43:58,555 [print.py:_callback()] - updatefiles: []
2023-10-22 17:43:58,555 [print.py:_callback()] - newfiles: []
2023-10-22 17:43:58,555 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Carriage mount Ender V2 mk2-32x32.png']
2023-10-22 17:43:58,555 [print.py:_callback()] - updatefiles: []
2023-10-22 17:44:01,686 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-22 17:44:01,761 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-22 17:44:01,762 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-22 17:44:01,763 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-22 17:44:01,764 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:44:01,814 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-22 17:44:05,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-22 17:44:05,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-22 17:44:05,031 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-22 17:44:05,039 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-22 17:44:05,040 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-22 17:44:05,049 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-22 17:44:05,067 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-22 17:44:05,069 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.037500, 0.036250, -0.046250, -0.042500\n0.056250, 0.033750, -0.035000, -0.043750\n0.098750, 0.043750, -0.040000, -0.075000\n0.117500, 0.080000, 0.006250, -0.022500', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0375, 0.03625, -0.04625, -0.0425], [0.05625, 0.03375, -0.035, -0.04375], [0.09875, 0.04375, -0.04, -0.075], [0.1175, 0.08, 0.00625, -0.0225]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-22 17:44:05,072 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-22 17:44:05,072 [printer.py:reinit()] - # Extruders: 1
2023-10-22 17:44:05,072 [printer.py:reinit()] - # Temperature devices: 1
2023-10-22 17:44:05,073 [printer.py:reinit()] - # Fans: 3
2023-10-22 17:44:05,073 [printer.py:reinit()] - # Output pins: 0
2023-10-22 17:44:05,073 [printer.py:reinit()] - # Leds: 0
2023-10-22 17:44:05,084 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-22 17:44:05,085 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-22 17:44:05,350 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-22 17:44:05,367 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-22 17:44:05,370 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-22 17:44:05,380 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-22 17:44:05,381 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-22 17:44:05,381 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-22 17:44:05,381 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-22 17:44:05,381 [screen.py:init_printer()] - Printer initialized
2023-10-22 17:44:05,382 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-22 17:44:05,382 [printer.py:change_state()] - Adding callback for state: startup
2023-10-22 17:44:05,812 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-22 17:44:05,812 [printer.py:change_state()] - Adding callback for state: ready
2023-10-22 17:44:05,815 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:44:05,880 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-22 17:44:05,886 [main_menu.py:add_device()] - Adding device: extruder
2023-10-22 17:44:05,892 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-22 17:44:05,921 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-22 17:44:08,564 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:44:08,596 [temperature.py:add_device()] - Adding device: extruder
2023-10-22 17:44:08,606 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-22 17:44:08,617 [temperature.py:select_heater()] - Selecting extruder
2023-10-22 17:44:08,619 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-22 17:44:08,661 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-10-22 17:44:09,406 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-22 17:44:10,957 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-22 17:44:10,957 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-22 17:44:10,958 [temperature.py:set_temperature()] - name match extruder
2023-10-22 17:44:10,958 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-22 17:44:12,045 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-22 17:44:12,064 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-22 17:44:14,922 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 17:44:15,014 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-22 17:44:15,015 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-22 17:44:15,016 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-22 17:45:56,382 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-22 17:45:58,419 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-22 17:46:09,702 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-22 17:46:20,917 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-22 17:46:21,730 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2023-10-22 17:56:22,485 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-22 18:46:22,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 19:25:36,584 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-22 19:25:36,584 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-22 19:25:36,587 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 19:25:36,609 [screen.py:wake_screen()] - Screen wake up
2023-10-22 19:25:37,018 [screen.py:show_panel()] - Reinitializing panel
2023-10-22 19:25:37,091 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-22 20:33:46,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 20:38:56,194 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 20:38:56,211 [screen.py:wake_screen()] - Screen wake up
2023-10-22 21:38:57,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 22:05:52,639 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 22:05:52,659 [screen.py:wake_screen()] - Screen wake up
2023-10-22 23:05:53,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-22 23:20:32,869 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-22 23:20:32,889 [screen.py:wake_screen()] - Screen wake up
2023-10-23 00:20:33,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 00:39:27,115 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 00:39:27,135 [screen.py:wake_screen()] - Screen wake up
2023-10-23 01:39:28,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 01:50:34,906 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 01:50:34,926 [screen.py:wake_screen()] - Screen wake up
2023-10-23 02:50:35,012 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 02:57:44,563 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 02:57:44,583 [screen.py:wake_screen()] - Screen wake up
2023-10-23 03:57:45,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 04:07:40,489 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 04:07:40,509 [screen.py:wake_screen()] - Screen wake up
2023-10-23 05:07:41,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 05:15:06,472 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 05:15:06,480 [screen.py:wake_screen()] - Screen wake up
2023-10-23 06:15:07,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 06:17:32,192 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 06:17:32,210 [screen.py:wake_screen()] - Screen wake up
2023-10-23 07:17:33,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-23 07:17:34,068 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-23 07:17:34,088 [screen.py:wake_screen()] - Screen wake up
2023-10-23 07:17:35,886 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-23 07:17:35,934 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-23 07:17:35,935 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-23 07:17:35,937 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-23 07:17:35,940 [screen.py:show_panel()] - Reinitializing panel
2023-10-23 07:17:36,014 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-23 07:17:39,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-23 07:17:39,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-23 07:17:39,034 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-23 07:17:39,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-23 07:17:39,043 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-23 07:17:39,052 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-23 07:17:39,071 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-23 07:17:39,074 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.037500, 0.036250, -0.046250, -0.042500\n0.056250, 0.033750, -0.035000, -0.043750\n0.098750, 0.043750, -0.040000, -0.075000\n0.117500, 0.080000, 0.006250, -0.022500', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.0375, 0.03625, -0.04625, -0.0425], [0.05625, 0.03375, -0.035, -0.04375], [0.09875, 0.04375, -0.04, -0.075], [0.1175, 0.08, 0.00625, -0.0225]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-23 07:17:39,076 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-23 07:17:39,077 [printer.py:reinit()] - # Extruders: 1
2023-10-23 07:17:39,077 [printer.py:reinit()] - # Temperature devices: 1
2023-10-23 07:17:39,077 [printer.py:reinit()] - # Fans: 3
2023-10-23 07:17:39,077 [printer.py:reinit()] - # Output pins: 0
2023-10-23 07:17:39,077 [printer.py:reinit()] - # Leds: 0
2023-10-23 07:17:39,089 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-23 07:17:39,092 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-23 07:17:39,360 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-23 07:17:39,376 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-23 07:17:39,380 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-23 07:17:39,389 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-23 07:17:39,391 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-23 07:17:39,391 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-23 07:17:39,391 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-23 07:17:39,392 [screen.py:init_printer()] - Printer initialized
2023-10-23 07:17:39,392 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-23 07:17:39,392 [printer.py:change_state()] - Adding callback for state: startup
2023-10-23 07:17:40,066 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-23 07:17:40,067 [printer.py:change_state()] - Adding callback for state: ready
2023-10-23 07:17:40,069 [screen.py:show_panel()] - Reinitializing panel
2023-10-23 07:17:40,134 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-23 07:17:40,140 [main_menu.py:add_device()] - Adding device: extruder
2023-10-23 07:17:40,146 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-23 07:17:40,177 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
