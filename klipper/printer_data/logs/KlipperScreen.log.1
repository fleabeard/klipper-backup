--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-50-gc14fd4d
2023-10-17 09:46:23,521 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\nG28\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\nG28\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 09:46:23,528 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 09:46:23,529 [printer.py:reinit()] - # Extruders: 1
2023-10-17 09:46:23,529 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 09:46:23,529 [printer.py:reinit()] - # Fans: 3
2023-10-17 09:46:23,529 [printer.py:reinit()] - # Output pins: 0
2023-10-17 09:46:23,529 [printer.py:reinit()] - # Leds: 0
2023-10-17 09:46:23,550 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 09:46:23,554 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 09:46:23,826 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 09:46:23,854 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 09:46:23,864 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 09:46:23,878 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 09:46:23,880 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 09:46:23,880 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 09:46:23,880 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 09:46:23,881 [screen.py:init_printer()] - Printer initialized
2023-10-17 09:46:23,881 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-17 09:46:23,881 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 09:46:23,884 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-17 09:46:23,969 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 09:46:23,975 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 09:46:23,982 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 09:46:24,013 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 09:46:57,165 [screen.py:_load_panel()] - Loading panel: extrude
2023-10-17 09:46:57,252 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 09:46:57,255 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-17 09:46:57,257 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-17 09:47:01,592 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2023-10-17 09:47:06,396 [screen.py:_load_panel()] - Loading panel: temperature
2023-10-17 09:47:06,415 [temperature.py:add_device()] - Adding device: extruder
2023-10-17 09:47:06,425 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-17 09:47:06,438 [temperature.py:select_heater()] - Selecting extruder
2023-10-17 09:47:06,439 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-17 09:47:06,484 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-17 09:47:07,572 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-17 09:47:09,559 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 09:47:09,559 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 09:47:09,559 [temperature.py:set_temperature()] - name match extruder
2023-10-17 09:47:09,560 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-17 09:47:10,747 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 09:47:10,768 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 09:47:10,770 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-17 09:48:17,032 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2023-10-17 09:48:29,253 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 09:48:29,254 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 09:48:29,255 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 09:48:29,256 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 09:48:29,297 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 09:48:32,143 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 09:48:32,153 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 09:48:32,154 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 09:48:32,162 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 09:48:32,164 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 09:48:32,173 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 09:48:32,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 09:48:32,196 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\nG28\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\nG28\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 09:48:32,199 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 09:48:32,199 [printer.py:reinit()] - # Extruders: 1
2023-10-17 09:48:32,199 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 09:48:32,200 [printer.py:reinit()] - # Fans: 3
2023-10-17 09:48:32,200 [printer.py:reinit()] - # Output pins: 0
2023-10-17 09:48:32,200 [printer.py:reinit()] - # Leds: 0
2023-10-17 09:48:32,212 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 09:48:32,214 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 09:48:32,506 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 09:48:32,529 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 09:48:32,539 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 09:48:32,549 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 09:48:32,550 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 09:48:32,550 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 09:48:32,550 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 09:48:32,551 [screen.py:init_printer()] - Printer initialized
2023-10-17 09:48:32,551 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 09:48:32,551 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 09:48:32,938 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 09:48:32,938 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 09:48:32,941 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 09:48:33,007 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 09:48:33,014 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 09:48:33,020 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 09:48:33,049 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 09:48:44,701 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 09:48:44,783 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 09:48:44,785 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-17 09:48:44,787 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-17 09:48:45,755 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-17 09:48:45,787 [screen.py:show_popup_message()] - echo: Printer not homed
2023-10-17 09:48:45,795 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [-1.800]
2023-10-17 09:48:45,803 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [-1.800]
2023-10-17 09:48:45,980 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-17 09:48:49,311 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 09:48:49,330 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 09:48:50,734 [screen.py:_load_panel()] - Loading panel: move
2023-10-17 09:48:50,857 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-17 09:48:51,405 [screen.py:_load_panel()] - Loading panel: menu
2023-10-17 09:48:51,502 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-17 09:48:51,514 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-17 09:48:51,516 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-17 09:48:52,063 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-17 09:48:52,955 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 09:48:52,975 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-17 09:48:54,687 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 09:48:54,705 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 09:48:55,741 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 09:48:55,746 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-17 09:49:18,656 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-17 09:49:18,688 [screen.py:show_popup_message()] - echo: Extruder not hot enough
2023-10-17 09:49:18,761 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-17 09:49:18,768 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-17 09:49:23,752 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 09:49:23,766 [temperature.py:add_device()] - Adding device: extruder
2023-10-17 09:49:23,773 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-17 09:49:23,785 [temperature.py:select_heater()] - Selecting extruder
2023-10-17 09:49:23,787 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-17 09:49:23,814 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-17 09:49:26,080 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-17 09:49:26,659 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 09:49:26,659 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 09:49:26,660 [temperature.py:set_temperature()] - name match extruder
2023-10-17 09:49:26,660 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-17 09:49:27,527 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 09:49:27,548 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 09:49:27,550 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-17 09:50:20,890 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-17 09:50:20,946 [screen.py:show_popup_message()] - error: Extrude only move too long (-300.000mm vs 150.000mm)
2023-10-17 09:50:21,011 [screen.py:show_popup_message()] - error: Extrude only move too long (-300.000mm vs 150.000mm)
2023-10-17 09:50:32,348 [extrude.py:change_distance()] - ### Distance 25
2023-10-17 09:50:33,799 [extrude.py:change_speed()] - ### Speed 5
2023-10-17 09:50:35,484 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:35,486 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F300'}
2023-10-17 09:50:42,840 [extrude.py:change_speed()] - ### Speed 25
2023-10-17 09:50:47,046 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:47,049 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:50:50,688 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:50,689 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:50:52,364 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:52,366 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:50:54,488 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:54,489 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:50:56,336 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:56,338 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:50:58,036 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:50:58,037 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:03,048 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:03,050 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:04,536 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:04,538 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:07,268 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:07,271 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:09,708 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:09,709 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:11,244 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:11,246 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:13,032 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:13,033 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:14,365 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:14,366 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:16,201 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:16,204 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:51:18,360 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:51:18,364 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 09:52:35,708 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:35,710 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:38,864 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:38,865 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:40,896 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:40,898 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:42,552 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:42,553 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:44,416 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:44,418 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:46,504 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:46,506 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:48,408 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:48,409 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-17 09:52:53,572 [extrude.py:change_distance()] - ### Distance 15
2023-10-17 09:52:54,396 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:52:54,397 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F1500'}
2023-10-17 09:53:09,320 [extrude.py:change_distance()] - ### Distance 5
2023-10-17 09:53:09,863 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:53:09,866 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F1500'}
2023-10-17 09:53:15,152 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:53:15,153 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F1500'}
2023-10-17 09:53:16,848 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:53:16,850 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F1500'}
2023-10-17 09:53:18,264 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:53:18,266 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F1500'}
2023-10-17 09:53:19,240 [extrude.py:change_speed()] - ### Speed 2
2023-10-17 09:53:20,647 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 09:53:20,648 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+5 F120'}
2023-10-17 09:56:08,075 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_square_tower(1).png. Retrying in 6 seconds
2023-10-17 09:56:08,076 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_square_tower(1)-32x32.png. Retrying in 6 seconds
2023-10-17 09:57:01,920 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 09:57:01,920 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 09:57:01,936 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-17 09:57:02,119 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 09:57:02,124 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 09:57:02,135 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_square_tower(1).gcode Size: 1159310
2023-10-17 09:57:02,143 [job_status.py:show_file_thumbnail()] - CE3E3V2_square_tower(1).gcode
2023-10-17 09:58:11,811 [screen.py:show_popup_message()] - error: Error on 'M190 S': unable to parse
2023-10-17 09:58:11,893 [screen.py:show_popup_message()] - error: Error on 'M190 S': unable to parse
2023-10-17 09:58:13,121 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 09:58:16,626 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 09:58:16,627 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 10:00:24,091 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_square_tower(1).png. Retrying in 6 seconds
2023-10-17 10:00:24,093 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_square_tower(1)-32x32.png. Retrying in 6 seconds
2023-10-17 10:00:24,255 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 10:00:24,255 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 10:00:24,261 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-17 10:00:24,295 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 10:00:24,414 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 10:00:24,420 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 10:00:24,429 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_square_tower(1).gcode Size: 1159424
2023-10-17 10:00:24,438 [job_status.py:show_file_thumbnail()] - CE3E3V2_square_tower(1).gcode
2023-10-17 10:03:25,300 [screen.py:show_popup_message()] - error: Error on 'M190 S': unable to parse
2023-10-17 10:03:25,370 [screen.py:show_popup_message()] - error: Error on 'M190 S': unable to parse
2023-10-17 10:03:26,507 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 10:03:30,262 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 10:03:30,262 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 10:04:34,453 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 10:04:34,453 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 10:04:34,456 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 10:04:34,459 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 10:04:34,545 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 10:04:38,143 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 10:04:38,151 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 10:04:38,153 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 10:04:38,161 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 10:04:38,162 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 10:04:38,172 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 10:04:38,437 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 10:04:38,440 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.025', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 10:04:38,443 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 10:04:38,443 [printer.py:reinit()] - # Extruders: 1
2023-10-17 10:04:38,443 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 10:04:38,443 [printer.py:reinit()] - # Fans: 3
2023-10-17 10:04:38,443 [printer.py:reinit()] - # Output pins: 0
2023-10-17 10:04:38,443 [printer.py:reinit()] - # Leds: 0
2023-10-17 10:04:38,456 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 10:04:38,457 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 10:04:38,730 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 10:04:38,748 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 10:04:38,752 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 10:04:38,761 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 10:04:38,763 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 10:04:38,763 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 10:04:38,763 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 10:04:38,765 [screen.py:init_printer()] - Printer initialized
2023-10-17 10:04:38,765 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-17 10:04:38,765 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 10:04:38,768 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 10:04:38,835 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 10:04:38,841 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 10:04:38,847 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 10:04:38,876 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 10:05:06,513 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 10:05:06,514 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 10:05:06,530 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 10:05:06,689 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 10:05:06,694 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 10:05:06,702 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_square_tower(1).gcode Size: 1159424
2023-10-17 10:05:06,710 [job_status.py:show_file_thumbnail()] - CE3E3V2_square_tower(1).gcode
2023-10-17 10:53:21,135 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 10:55:17,944 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 10:55:17,970 [screen.py:wake_screen()] - Screen wake up
2023-10-17 10:55:19,131 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-17 10:55:21,421 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-17 10:55:21,422 [job_status.py:cancel_confirm()] - Canceling print
2023-10-17 10:55:21,422 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-17 10:55:21,426 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-17 10:55:22,325 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-17 10:55:25,581 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 10:55:25,581 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 11:07:11,223 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-17 11:08:06,824 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 11:08:06,825 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 11:08:06,826 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 11:08:06,829 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 11:08:06,908 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 11:08:10,143 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:08:10,153 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:08:10,153 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 11:08:10,162 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 11:08:10,163 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 11:08:10,173 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 11:08:10,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 11:08:10,191 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 11:08:10,194 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 11:08:10,195 [printer.py:reinit()] - # Extruders: 1
2023-10-17 11:08:10,195 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 11:08:10,195 [printer.py:reinit()] - # Fans: 3
2023-10-17 11:08:10,195 [printer.py:reinit()] - # Output pins: 0
2023-10-17 11:08:10,195 [printer.py:reinit()] - # Leds: 0
2023-10-17 11:08:10,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 11:08:10,207 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 11:08:10,475 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 11:08:10,491 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 11:08:10,494 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 11:08:10,503 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 11:08:10,504 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 11:08:10,504 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 11:08:10,505 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 11:08:10,505 [screen.py:init_printer()] - Printer initialized
2023-10-17 11:08:10,505 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-17 11:08:10,506 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 11:08:10,509 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 11:08:10,574 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 11:08:10,580 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 11:08:10,586 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 11:08:10,614 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-50-gc14fd4d
2023-10-17 11:28:35,853 [screen.py:main()] - Python version: 3.9
2023-10-17 11:28:35,853 [screen.py:main()] - KlipperScreen version: v0.3.6-50-gc14fd4d
2023-10-17 11:28:36,044 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-10-17 11:28:36,048 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-10-17 11:28:36,065 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-17 11:28:36,155 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-10-17 11:28:36,155 [config.py:install_language()] - Using system lang
2023-10-17 11:28:36,156 [config.py:install_language()] - Using lang en
2023-10-17 11:28:36,174 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-17 11:28:36,175 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-17 11:28:36,831 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-17 11:28:36,840 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-17 11:28:36,847 [screen.py:initial_connection()] - Default printer: None
2023-10-17 11:28:36,847 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-17 11:28:36,848 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-17 11:28:36,893 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 11:28:36,900 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-17 11:28:36,915 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:28:36,924 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-17 11:28:36,925 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-17 11:28:36,932 [_logging.py:info()] - Websocket connected
2023-10-17 11:28:36,932 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-17 11:28:37,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:28:37,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:28:37,032 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 11:28:37,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 11:28:37,042 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 11:28:37,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 11:28:37,164 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 11:28:37,167 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 11:28:37,170 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 11:28:37,171 [printer.py:reinit()] - # Extruders: 1
2023-10-17 11:28:37,171 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 11:28:37,171 [printer.py:reinit()] - # Fans: 3
2023-10-17 11:28:37,171 [printer.py:reinit()] - # Output pins: 0
2023-10-17 11:28:37,171 [printer.py:reinit()] - # Leds: 0
2023-10-17 11:28:37,182 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 11:28:37,183 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 11:28:37,453 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 11:28:37,464 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 11:28:37,474 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 11:28:37,484 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 11:28:37,485 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 11:28:37,485 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 11:28:37,485 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 11:28:37,486 [screen.py:init_printer()] - Printer initialized
2023-10-17 11:28:37,486 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-17 11:28:37,486 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 11:28:37,489 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-17 11:28:37,565 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 11:28:37,571 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 11:28:37,579 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 11:28:37,608 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 11:47:41,906 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 11:47:41,906 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 11:47:41,907 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 11:47:41,912 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 11:47:41,991 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 11:47:45,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:47:45,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 11:47:45,207 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 11:47:45,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 11:47:45,221 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 11:47:45,231 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 11:47:45,248 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 11:47:45,251 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 11:47:45,254 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 11:47:45,255 [printer.py:reinit()] - # Extruders: 1
2023-10-17 11:47:45,255 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 11:47:45,255 [printer.py:reinit()] - # Fans: 3
2023-10-17 11:47:45,255 [printer.py:reinit()] - # Output pins: 0
2023-10-17 11:47:45,255 [printer.py:reinit()] - # Leds: 0
2023-10-17 11:47:45,267 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 11:47:45,268 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 11:47:45,538 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 11:47:45,549 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 11:47:45,560 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 11:47:45,569 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 11:47:45,570 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 11:47:45,570 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 11:47:45,570 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 11:47:45,571 [screen.py:init_printer()] - Printer initialized
2023-10-17 11:47:45,571 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 11:47:45,571 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 11:47:46,247 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 11:47:46,247 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 11:47:46,250 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 11:47:46,312 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 11:47:46,318 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 11:47:46,326 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 11:47:46,353 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 11:48:05,730 [screen.py:show_popup_message()] - error: Invalid adxl345 id (got 0 vs e5).
2023-10-17 11:48:39,340 [screen.py:show_popup_message()] - error: // Unknown command:"GPIODETECT"
2023-10-17 11:50:27,652 [screen.py:show_popup_message()] - error: Invalid adxl345 id (got 0 vs e5).
2023-10-17 12:47:32,188 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 12:47:35,870 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 12:47:35,881 [screen.py:wake_screen()] - Screen wake up
2023-10-17 13:05:09,372 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 13:05:09,372 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 13:05:09,373 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 13:05:09,375 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 13:05:09,418 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 13:05:12,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 13:05:12,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 13:05:12,207 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 13:05:12,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 13:05:12,217 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 13:05:13,585 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 13:05:13,626 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 13:05:13,634 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro print_start': {'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]', 'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE'}, 'gcode_macro _print_start_phase_init': {'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.', 'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if not params.BED %}\n{% set dummy = params.__setitem__(\'BED\', params.BED_TEMP|int) %}\n{% endif %}\n{% if not params.EXTRUDER %}\n{% set dummy = params.__setitem__(\'EXTRUDER\', params.EXTRUDER_TEMP|int) %}\n{% endif %}\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\nM140 S{params.BED}\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"'}, 'gcode_macro _print_start_phase_preheat': {'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"'}, 'gcode_macro _print_start_phase_probing': {'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"'}, 'gcode_macro _print_start_phase_extruder': {'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"'}, 'gcode_macro _print_start_phase_purge': {'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro _km_park_if_needed': {'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]', 'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}'}, 'gcode_macro _km_apply_print_offset': {'variable_offset': '[]', 'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}'}, 'gcode_macro print_start_set': {'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}', 'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}'}, 'gcode_macro print_end': {'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END', 'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1'}, 'gcode_macro _print_end_inner': {'variable_cancelled': 'False', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}'}, 'gcode_macro _km_check_is_printing': {'variable_debug_state': 'False', 'description': 'Throws an error if print is not currently in progress.', 'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}'}, 'gcode_macro _km_check_and_set_print_bounds': {'description': 'Validates all print bounds and caches their values.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE', 'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]'}, 'gcode_macro _print_start_phase_init': {'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if not params.BED %}\n{% set dummy = params.__setitem__(\'BED\', params.BED_TEMP|int) %}\n{% endif %}\n{% if not params.EXTRUDER %}\n{% set dummy = params.__setitem__(\'EXTRUDER\', params.EXTRUDER_TEMP|int) %}\n{% endif %}\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\nM140 S{params.BED}\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"', 'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_preheat': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"', 'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_probing': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"', 'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_extruder': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"', 'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_purge': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.'}, 'gcode_macro _km_park_if_needed': {'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}', 'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]'}, 'gcode_macro _km_apply_print_offset': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}', 'description': 'G-Code macro', 'variable_offset': '[]'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start_set': {'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}', 'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1', 'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END'}, 'gcode_macro _print_end_inner': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}', 'description': 'G-Code macro', 'variable_cancelled': 'False'}, 'gcode_macro _km_check_is_printing': {'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}', 'description': 'Throws an error if print is not currently in progress.', 'variable_debug_state': 'False'}, 'gcode_macro _km_check_and_set_print_bounds': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}', 'description': 'Validates all print bounds and caches their values.'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 13:05:13,645 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 13:05:13,645 [printer.py:reinit()] - # Extruders: 1
2023-10-17 13:05:13,645 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 13:05:13,645 [printer.py:reinit()] - # Fans: 3
2023-10-17 13:05:13,646 [printer.py:reinit()] - # Output pins: 0
2023-10-17 13:05:13,646 [printer.py:reinit()] - # Leds: 0
2023-10-17 13:05:13,670 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 13:05:13,673 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 13:05:13,918 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 13:05:13,994 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 13:05:14,002 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 13:05:14,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 13:05:14,035 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 13:05:14,036 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 13:05:14,036 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 13:05:14,036 [screen.py:init_printer()] - Printer initialized
2023-10-17 13:05:14,037 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 13:05:14,037 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 13:05:16,105 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 13:05:16,105 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 13:05:16,108 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 13:05:16,185 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 13:05:16,202 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 13:05:16,208 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 13:05:16,247 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 13:09:40,793 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 13:09:40,793 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 13:09:40,794 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 13:09:40,796 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 13:09:40,837 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 13:09:44,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 13:09:44,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 13:09:44,209 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 13:09:44,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 13:09:44,219 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 13:09:45,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 13:09:45,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 13:09:45,072 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro print_start': {'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]', 'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE'}, 'gcode_macro _print_start_phase_init': {'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.', 'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if not params.BED %}\n{% set dummy = params.__setitem__(\'BED\', params.BED_TEMP|int) %}\n{% endif %}\n{% if not params.EXTRUDER %}\n{% set dummy = params.__setitem__(\'EXTRUDER\', params.EXTRUDER_TEMP|int) %}\n{% endif %}\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\nM140 S{params.BED}\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"'}, 'gcode_macro _print_start_phase_preheat': {'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"'}, 'gcode_macro _print_start_phase_probing': {'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"'}, 'gcode_macro _print_start_phase_extruder': {'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"'}, 'gcode_macro _print_start_phase_purge': {'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro _km_park_if_needed': {'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]', 'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}'}, 'gcode_macro _km_apply_print_offset': {'variable_offset': '[]', 'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}'}, 'gcode_macro print_start_set': {'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}', 'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}'}, 'gcode_macro print_end': {'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END', 'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1'}, 'gcode_macro _print_end_inner': {'variable_cancelled': 'False', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}'}, 'gcode_macro _km_check_is_printing': {'variable_debug_state': 'False', 'description': 'Throws an error if print is not currently in progress.', 'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}'}, 'gcode_macro _km_check_and_set_print_bounds': {'description': 'Validates all print bounds and caches their values.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE', 'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]'}, 'gcode_macro _print_start_phase_init': {'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if not params.BED %}\n{% set dummy = params.__setitem__(\'BED\', params.BED_TEMP|int) %}\n{% endif %}\n{% if not params.EXTRUDER %}\n{% set dummy = params.__setitem__(\'EXTRUDER\', params.EXTRUDER_TEMP|int) %}\n{% endif %}\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\nM140 S{params.BED}\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"', 'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_preheat': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"', 'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_probing': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"', 'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_extruder': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"', 'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_purge': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.'}, 'gcode_macro _km_park_if_needed': {'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}', 'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]'}, 'gcode_macro _km_apply_print_offset': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}', 'description': 'G-Code macro', 'variable_offset': '[]'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start_set': {'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}', 'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1', 'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END'}, 'gcode_macro _print_end_inner': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}', 'description': 'G-Code macro', 'variable_cancelled': 'False'}, 'gcode_macro _km_check_is_printing': {'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}', 'description': 'Throws an error if print is not currently in progress.', 'variable_debug_state': 'False'}, 'gcode_macro _km_check_and_set_print_bounds': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}', 'description': 'Validates all print bounds and caches their values.'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 13:09:45,082 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 13:09:45,082 [printer.py:reinit()] - # Extruders: 1
2023-10-17 13:09:45,082 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 13:09:45,082 [printer.py:reinit()] - # Fans: 3
2023-10-17 13:09:45,082 [printer.py:reinit()] - # Output pins: 0
2023-10-17 13:09:45,083 [printer.py:reinit()] - # Leds: 0
2023-10-17 13:09:45,100 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 13:09:45,102 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 13:09:45,457 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 13:09:45,480 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 13:09:45,483 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 13:09:45,492 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 13:09:45,493 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 13:09:45,494 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 13:09:45,494 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 13:09:45,494 [screen.py:init_printer()] - Printer initialized
2023-10-17 13:09:45,495 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 13:09:45,495 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 13:09:47,546 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 13:09:47,546 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 13:09:47,548 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 13:09:47,621 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 13:09:47,638 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 13:09:47,644 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 13:09:47,681 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 13:12:40,262 [files.py:add_file()] - File already exists: CE3E3V2_shhhh.gcode
2023-10-17 13:12:40,266 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_shhhh.png. Retrying in 6 seconds
2023-10-17 13:12:40,323 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 13:12:40,323 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 13:12:40,334 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-17 13:12:40,488 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 13:12:40,494 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 13:12:40,506 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32098747
2023-10-17 13:12:40,518 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 13:18:02,581 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _print_start_phase_init:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED_TEMP'
2023-10-17 13:18:02,666 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _print_start_phase_init:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED_TEMP'
2023-10-17 13:18:03,217 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 13:18:04,214 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 13:18:04,214 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 13:47:36,199 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 14:17:39,459 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:17:39,460 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:17:39,461 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:17:39,461 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 14:17:39,484 [screen.py:wake_screen()] - Screen wake up
2023-10-17 14:17:39,898 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:17:39,978 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:17:43,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:17:43,209 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:17:43,210 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:17:43,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:17:43,222 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:17:43,646 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:17:43,682 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:17:43,689 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro print_start': {'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]', 'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE'}, 'gcode_macro _print_start_phase_init': {'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.', 'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n\n\n\n\n\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\nM140 S{params.BED}\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"'}, 'gcode_macro _print_start_phase_preheat': {'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"'}, 'gcode_macro _print_start_phase_probing': {'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"'}, 'gcode_macro _print_start_phase_extruder': {'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"'}, 'gcode_macro _print_start_phase_purge': {'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro _km_park_if_needed': {'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]', 'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}'}, 'gcode_macro _km_apply_print_offset': {'variable_offset': '[]', 'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}'}, 'gcode_macro print_start_set': {'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}', 'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}'}, 'gcode_macro print_end': {'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END', 'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1'}, 'gcode_macro _print_end_inner': {'variable_cancelled': 'False', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}'}, 'gcode_macro _km_check_is_printing': {'variable_debug_state': 'False', 'description': 'Throws an error if print is not currently in progress.', 'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}'}, 'gcode_macro _km_check_and_set_print_bounds': {'description': 'Validates all print bounds and caches their values.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE', 'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]'}, 'gcode_macro _print_start_phase_init': {'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n\n\n\n\n\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\nM140 S{params.BED}\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"', 'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_preheat': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"', 'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_probing': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"', 'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_extruder': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"', 'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_purge': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.'}, 'gcode_macro _km_park_if_needed': {'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}', 'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]'}, 'gcode_macro _km_apply_print_offset': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}', 'description': 'G-Code macro', 'variable_offset': '[]'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start_set': {'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}', 'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1', 'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END'}, 'gcode_macro _print_end_inner': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}', 'description': 'G-Code macro', 'variable_cancelled': 'False'}, 'gcode_macro _km_check_is_printing': {'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}', 'description': 'Throws an error if print is not currently in progress.', 'variable_debug_state': 'False'}, 'gcode_macro _km_check_and_set_print_bounds': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}', 'description': 'Validates all print bounds and caches their values.'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:17:43,699 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:17:43,699 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:17:43,699 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:17:43,699 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:17:43,699 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:17:43,699 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:17:43,717 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:17:43,720 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:17:44,072 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:17:44,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:17:44,099 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:17:44,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:17:44,110 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:17:44,110 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:17:44,110 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:17:44,111 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:17:44,111 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:17:44,111 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:17:46,168 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:17:46,169 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:17:46,175 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:17:46,293 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:17:46,316 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:17:46,322 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:17:46,361 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:17:53,450 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 14:17:53,450 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 14:17:53,476 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:17:53,629 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 14:17:53,634 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 14:17:53,643 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32098747
2023-10-17 14:17:53,651 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 14:23:06,659 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _print_start_phase_preheat:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-10-17 14:23:06,719 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _print_start_phase_preheat:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-10-17 14:23:07,611 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 14:23:08,607 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 14:23:08,607 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:29:36,781 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:29:36,781 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:29:36,782 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:29:36,785 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:29:36,850 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:29:40,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:29:40,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:29:40,207 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:29:40,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:29:40,217 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:29:40,937 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:29:40,975 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:29:40,983 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro print_start': {'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]', 'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE'}, 'gcode_macro _print_start_phase_init': {'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.', 'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n\n\n\n\n\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\n\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"'}, 'gcode_macro _print_start_phase_preheat': {'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"'}, 'gcode_macro _print_start_phase_probing': {'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"'}, 'gcode_macro _print_start_phase_extruder': {'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"'}, 'gcode_macro _print_start_phase_purge': {'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.', 'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro _km_park_if_needed': {'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]', 'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}'}, 'gcode_macro _km_apply_print_offset': {'variable_offset': '[]', 'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}'}, 'gcode_macro print_start_set': {'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}', 'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}'}, 'gcode_macro print_end': {'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END', 'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1'}, 'gcode_macro _print_end_inner': {'variable_cancelled': 'False', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}'}, 'gcode_macro _km_check_is_printing': {'variable_debug_state': 'False', 'description': 'Throws an error if print is not currently in progress.', 'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}'}, 'gcode_macro _km_check_and_set_print_bounds': {'description': 'Validates all print bounds and caches their values.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{action_respond_info(\n"This file is using an old The PRINT_START format. This print will run "\n"fine, but you should update your slicer config to take advantage of the "\n"phased PRINT_START macros. The slicer documentation is here:\\n"\n"https://github.com/jschuh/klipper-macros\\x23slicer-configuration"\n)}\n\n_PRINT_START_PHASE_INIT {rawparams}\n_PRINT_START_PHASE_PREHEAT\n_PRINT_START_PHASE_PROBING\n_PRINT_START_PHASE_EXTRUDER\n_PRINT_START_PHASE_PURGE', 'description': 'Inserted by slicer at start of print. Rather than using this macro\ndirectly you should configure your slicer as instructed in the readme.\nUsage: PRINT_START BED=<temp> EXTRUDER=<temp> [CHAMBER=<temp>]\n[MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [LAYERS=<num>]\n[NOZZLE_SIZE=<mm>]'}, 'gcode_macro _print_start_phase_init': {'gcode': '\nCHECK_KM_CONFIG\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n_KM_APPLY_PRINT_OFFSET RESET=1\n_PRINT_START_PHASE_CHECK PHASE=none\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n\n\n\n\n\n\n\nPRINT_START_SET PRINT_START_PHASE="init" {% for k in params %}{\' %s=\\"%s\\"\' %\n(k,params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')|replace(\'\\"\',\'\\\\\\"\'))\n}{% endfor %}\n\n\n_km_check_and_set_print_bounds\n\nM107\nCLEAR_PAUSE\n\n\n{% if params.CHAMBER %}M141 S{params.CHAMBER|int}{% endif %}\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if km.start_try_saved_surface_mesh and printer.bed_mesh %}\nLOAD_SURFACE_MESH\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="preheat"', 'description': 'Inserted by slicer at start of print. Initializes PRINT_START\nphases.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_preheat': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=preheat\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set BED = print.BED|int %}\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set CHAMBER = print.CHAMBER|default(0)|int %}\n{% set LAYERS = print.LAYERS|default(0)|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |\nabs <= 0.6 %}\nPRINT_START_SET BED_AT_TARGET={1 if bed_at_target else 0}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\n(km.start_home_z_at_temp and not bed_at_target) %}\n{% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if\n(BED and not bed_at_target) else 0.0),\nprinter.configfile.settings.heater_bed.max_temp ) | min %}\n\nINIT_LAYER_GCODE LAYERS="{LAYERS}"\n{% if CHAMBER > 0.0 %}\nM141 S{CHAMBER}\n{% endif %}\n\nM140 S{bed_overshoot}\n{% if actions_at_temp %}\n\n\nM104 S{km.start_extruder_probing_temp if km.start_extruder_probing_temp > 0\nelse (km.start_extruder_preheat_scale * EXTRUDER)|round(0,\'ceil\')|int}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28\nG90\n{% if BED > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating RESET_STACK=1\n\n{% if not bed_at_target %}\nPARK\n\nM190 S{bed_overshoot}\nG4 P{km.start_bed_heat_delay / 2}\nM190 R{BED}\nG4 P{km.start_bed_heat_delay / 2}\n{% endif %}\n{% endif %}\n\n{% if CHAMBER > 0.0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE\nM191 S{CHAMBER}\n{% endif %}\n\n{% if BED > 0.0 and bed_at_target%}\nM190 R{BED}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="probing"', 'description': 'Inserted by slicer at start of print. Handles the bed and chamber\nheating phases and ends when both are stabilized at their target temperatures.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_probing': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=probing\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n\n{% if km.start_random_placement_max > 0 and print.PRINT_MIN and MESH_MIN %}\n{% set PRINT_MIN = print.PRINT_MIN.split(",")|map(\'float\')|list %}\n{% set PRINT_MAX = print.PRINT_MAX.split(",")|map(\'float\')|list %}\n{% set x_offset = (((km.print_max[0] - km.print_min[0] - PRINT_MAX[0] +\nPRINT_MIN[0] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% set y_offset = (((km.print_max[1] - km.print_min[1] - PRINT_MAX[1] +\nPRINT_MIN[1] - 2 * km.start_random_placement_padding)|int,\nkm.start_random_placement_max * 2)|min, 0)|max %}\n{% if x_offset > 0 %}\n{% set x_offset = range(x_offset)|random + km.print_min[0] -\nPRINT_MIN[0] + km.start_random_placement_padding %}\n{% endif %}\n{% if y_offset > 0 %}\n{% set y_offset = range(y_offset)|random + km.print_min[1] -\nPRINT_MIN[1] + km.start_random_placement_padding %}\n{% endif %}\n\n\n{% set MESH_MIN = MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = MESH_MAX.split(",")|map(\'float\')|list %}\n{% set MESH_MIN_NEW = (MESH_MIN[0] + x_offset, MESH_MIN[1] + y_offset) %}\n{% set MESH_MAX_NEW = (MESH_MAX[0] + x_offset, MESH_MAX[1] + y_offset) %}\n{action_respond_info(\n"Relocating print origin from (%.3f,%.3f) "|format(*MESH_MIN) +\n"to (%.3f,%.3f)"|format(*MESH_MIN_NEW))}\n{% set MESH_MIN = (MESH_MIN_NEW[0], MESH_MIN_NEW[1])|join(\',\') %}\n{% set MESH_MAX = (MESH_MAX_NEW[0], MESH_MAX_NEW[1])|join(\',\') %}\nPRINT_START_SET PRINT_OFFSET={"%d,%d" % (x_offset,y_offset)}\n{% endif %}\n\n{% set EXTRUDER = print.EXTRUDER|int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set start_level_bed_at_temp = km.start_level_bed_at_temp and\nnot printer.bed_mesh.profile_name %}\n{% set start_home_z_at_temp = km.start_home_z_at_temp and\nnot print.BED_AT_TARGET|int %}\n{% set actions_at_temp = start_level_bed_at_temp or\nkm.start_quad_gantry_level_at_temp or\nkm.start_z_tilt_adjust_at_temp or\nstart_home_z_at_temp %}\n{% if actions_at_temp %}\n{% if km.start_extruder_probing_temp > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% else %}\nM104 S{EXTRUDER}\n{% endif %}\n{% if start_home_z_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing RESET_STACK=1\nG28 Z\n{% endif %}\n{% if km.start_z_tilt_adjust_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=calibrating_z RESET_STACK=1\nZ_TILT_ADJUST\n{% endif %}\n{% if km.start_quad_gantry_level_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=leveling_gantry RESET_STACK=1\nQUAD_GANTRY_LEVEL\n{% endif %}\n{% if start_level_bed_at_temp %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing RESET_STACK=1\n_km_mesh_if_needed {% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}\n{% endif %}\n{% if km.start_extruder_probing_temp > 0 %}\nM104 S{EXTRUDER}\n{% endif %}\nG4\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="extruder"', 'description': 'Inserted by slicer at start of print. Performs probing (including\nmesh bed level) and other operations that should be run when the bed and\nchamber are stabilized at their target temps.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_extruder': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=extruder\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set EXTRUDER = print.EXTRUDER|default(print.EXTRUDER_TEMP)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if EXTRUDER > 0 %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating RESET_STACK=1\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE\nM109 S{EXTRUDER}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="purge"', 'description': 'Inserted by slicer at start of print. Preheats the extruder.\nUsage: See PRINT_START.'}, 'gcode_macro _print_start_phase_purge': {'gcode': '\n_PRINT_START_PHASE_CHECK PHASE=purge\n\n_KM_APPLY_PRINT_OFFSET\n\n_APPLY_BED_SURFACE_OFFSET\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set MESH_MIN = print.MESH_MIN|default(None) %}\n{% set MESH_MAX = print.MESH_MAX|default(None) %}\n{% set NOZZLE_SIZE = print.NOZZLE_SIZE|default(print.NOZZLE_SIZE)|\ndefault(printer.configfile.settings.extruder.nozzle_diameter)|float %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.start_purge_length > 0.0 and printer.extruder.can_extrude %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=purging RESET_STACK=1\nDRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625\n}"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif\n%}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}\n{% endif %}\nPRINT_START_SET PRINT_START_PHASE="printing"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'description': 'Inserted by slicer at start of print. Generates purge lines.\nUsage: See PRINT_START.'}, 'gcode_macro _km_park_if_needed': {'gcode': '\n\n{% set HEATER = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters else\n("heater_generic " ~ params.HEATER) %}\n{% set RANGE = (params.RANGE|default(1))|string|upper %}\n\n{% if printer[HEATER].target %}\n{% if RANGE == "ABOVE" %}\n{% if printer[HEATER].temperature < printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif RANGE == "BELOW" %}\n{% if printer[HEATER].temperature > printer[HEATER].target %}\nPARK\n{% endif %}\n{% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >\n(printer[HEATER].target * RANGE|float * 0.01)|abs %}\nPARK\n{% endif %}\n{% endif %}', 'description': 'Parks the extruder if the current temperature of the supplied\nheater is not within the specified target range.\nUsage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]'}, 'gcode_macro _km_apply_print_offset': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% if params.RESET|default(0)|int and offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral%}\n{% set PRINT_OFFSET = [offset.pop(0) * -1, offset.pop() * -1] %}\n{% elif print.PRINT_OFFSET and not offset and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set PRINT_OFFSET = print.PRINT_OFFSET.split(",")|map(\'float\')|list %}\n{% set dummy = offset.extend(PRINT_OFFSET) %}\n{% endif %}\n\n{% if PRINT_OFFSET %}\n_KM_SET_GCODE_OFFSET_BASE {"X_ADJUST=%.2f Y_ADJUST=%.2f"|\nformat(*PRINT_OFFSET)}\n{% endif %}', 'description': 'G-Code macro', 'variable_offset': '[]'}, 'gcode_macro _km_mesh_if_needed': {'gcode': '\n\n\n\n{% if not printer.bed_mesh.profile_name %}\nBED_MESH_CALIBRATE_FAST {rawparams}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start_set': {'gcode': '\n{%for k in params %}\n{% set dummy = print.__setitem__(k|upper, params[k]) %}\n{% endfor %}', 'description': 'Inserted by slicer to set values used by PRINT_START.\nUsage: PRINT_START_SET <VARIABLE>=<value>', 'variable_print': '{}'}, 'gcode_macro _print_start_phase_check': {'gcode': '\n{% set print = printer["gcode_macro print_start_set"].print %}\n{% set PRINT_START_PHASE = print.PRINT_START_PHASE|default("none") %}\n{% if PRINT_START_PHASE != params.PHASE %}\n\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n{% if params.PHASE != \'none\' %}\n{% set error = "PRINT_START phase error. Expected \'%s\' but found \'%s\'" %\n(params.PHASE, PRINT_START_PHASE) %}\n\n{% if not \'virtual_sdcard\' in printer or\nnot printer.virtual_sdcard.is_active or \'CANCEL_PRINT\' not in\nprinter.configfile.settings.virtual_sdcard.on_error_gcode|\ndefault("")|upper %}\n{action_respond_info(error)}\nCANCEL_PRINT\n{% else %}\n{action_raise_error(error)}\n{% endif %}\n{% else %}\n{ action_respond_info("Expected phase \'%s\' but found \'%s\'. Resetting."\n% (params.PHASE, PRINT_START_PHASE)) }\n{% endif %}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n_KM_CHECK_IS_PRINTING\nM400\n_PRINT_END_INNER\n\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% if km.start_clear_adjustments_at_end != 0 %}\nRESET_HEATER_SCALING\nRESET_FAN_SCALING\nM220 S100\nM221 S100\n{% endif %}\n_RESET_LAYER_GCODE\n_RESET_VELOCITY_LIMITS\nTURN_OFF_HEATERS\nM107; turn off fan\n{% if printer.bed_mesh %}BED_MESH_CLEAR{% endif %}\n\n{% if printer.toolhead.homed_axes|lower == "xyz" %}\nPARK Y="{km.start_end_park_y}"\n{% endif %}\nM84\nCLEAR_PAUSE\nSET_GCODE_VARIABLE MACRO=print_start_set VARIABLE=print VALUE="{{}}"\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready RESET_STACK=1', 'description': 'Inserted by slicer at end of print.\nUsage: PRINT_END'}, 'gcode_macro _print_end_inner': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{False}"\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set origin = printer.gcode_move.homing_origin%}\n{% set max_x = km.print_max[0] - origin.x %}\n{% set max_y = km.print_max[1] - origin.y %}\n{% set max_z = toolhead.axis_maximum.z - origin.z %}\n\n{% if not cancelled %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=completing\n{% endif %}\n\n{% if printer.extruder.can_extrude %}\n\n{% if not printer.pause_resume.is_paused and not cancelled and\ntoolhead.homed_axes|lower == "xyz" %}\n{% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}\n{% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}\n{% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}\nG91\nG0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2}\nG0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy}\n\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% endif %}\n\n\nG92 E0\nG1 E-5.0 F3600\nM400\n{% endif %}', 'description': 'G-Code macro', 'variable_cancelled': 'False'}, 'gcode_macro _km_check_is_printing': {'gcode': '\n{% if not debug_state and\nprinter.idle_timeout.state|string != "Printing" and\nnot (printer.virtual_sdcard|default({})).is_active|default(False) and\nnot printer.pause_resume.is_paused %}\n{ action_raise_error("No active print.") }\n{% endif %}', 'description': 'Throws an error if print is not currently in progress.', 'variable_debug_state': 'False'}, 'gcode_macro _km_check_and_set_print_bounds': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set print = printer["gcode_macro print_start_set"].print %}\n\n\n{% if print.MESH_MIN %}\n{% set MESH_MIN = print.MESH_MIN.split(",")|map(\'float\')|list %}\n{% set MESH_MAX = print.MESH_MAX.split(",")|map(\'float\')|list %}\n{%if MESH_MIN[0] < km.print_min[0] or MESH_MIN[1] < km.print_min[1] %}\n{action_raise_error("MESH_MIN %s is outside the printable bounds" %\n(MESH_MIN|string, km.print_min|string))}\n{%elif MESH_MAX[0] > km.print_max[0] or MESH_MAX[1] > km.print_max[1] %}\n{action_raise_error("MESH_MAX %s is outside the printable bounds %s" %\n(MESH_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% set points = [] %}\n{% if print.MODEL_MIN or print.MODEL_MAX %}\n{% set MODEL_MIN = print.MODEL_MIN.split(",")|map(\'float\')|list %}\n{% set MODEL_MAX = print.MODEL_MAX.split(",")|map(\'float\')|list %}\n{% set points = [MODEL_MIN, MODEL_MAX] %}\n{% endif %}\n{% if (printer.exclude_object|default({})).objects %}\n{% set points = printer.exclude_object.objects|selectattr(\'polygon\')|\nmap(attribute=\'polygon\')|sum(start=points) %}\n{% set points_len = points|length %}\n{% if points_len >= 2 %}\n{% set x_coords = (points|map(attribute=0)|sort|list)[0::points_len-1] %}\n{% set y_coords = (points|map(attribute=1)|sort|list)[0::points_len-1] %}\n{% set MODEL_MIN = (x_coords[0],y_coords[0])|map(\'float\')|list %}\n{% set MODEL_MAX = (x_coords[1],y_coords[1])|map(\'float\')|list %}\nPRINT_START_SET MODEL_MIN="{MODEL_MIN|join(\',\')\n}" MODEL_MAX="{MODEL_MAX|join(\',\')}"\n{% endif %}\n{% endif %}\n\n{% if MODEL_MIN %}\n\n{% if MODEL_MIN[0] < km.print_min[0] or MODEL_MIN[1] < km.print_min[1] %}\n{action_raise_error("MODEL_MIN %s is outside the printable bounds" %\n(MODEL_MIN|string, km.print_min|string))}\n{% elif MODEL_MAX[0] > km.print_max[0] or MODEL_MAX[1] > km.print_max[1] %}\n{action_raise_error("MODEL_MAX %s is outside the printable bounds %s" %\n(MODEL_MAX|string, km.print_max|string))}\n{% endif %}\n{% endif %}\n\n\n{% if MESH_MIN and MODEL_MIN %}\nPRINT_START_SET PRINT_MIN="{((MODEL_MIN[0],MESH_MIN[0])|min,\n(MODEL_MIN[1],MESH_MIN[1])|min)|join(\',\')\n}" PRINT_MAX="{((MODEL_MAX[0],MESH_MAX[0])|max,\n(MODEL_MAX[1],MESH_MAX[1])|max)|join(\',\')}"\n{% else %}\nPRINT_START_SET PRINT_MIN="{km.print_min|join(\',\')\n}" PRINT_MAX="{km.print_max|join(\',\')}"\n{% endif %}', 'description': 'Validates all print bounds and caches their values.'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:29:40,993 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:29:40,993 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:29:40,993 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:29:40,993 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:29:40,993 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:29:40,993 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:29:41,011 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:29:41,015 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:29:41,362 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:29:41,384 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:29:41,388 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:29:41,398 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:29:41,399 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:29:41,400 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:29:41,400 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:29:41,401 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:29:41,402 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:29:41,402 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:29:48,472 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:29:48,472 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:29:48,477 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:29:48,606 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:29:48,623 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:29:48,629 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:29:48,668 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:29:57,251 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 14:29:57,252 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 14:29:57,266 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:29:57,422 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 14:29:57,428 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 14:29:57,436 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32098747
2023-10-17 14:29:57,444 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 14:33:53,483 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _print_start_phase_preheat:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-10-17 14:33:53,555 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _print_start_phase_preheat:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-10-17 14:33:54,501 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 14:33:55,497 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 14:33:55,497 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:38:43,645 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:38:43,646 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:38:43,648 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:38:43,652 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:38:43,712 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:38:47,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:38:47,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:38:47,209 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:38:47,217 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:38:47,219 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:38:47,491 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:38:47,527 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:38:47,533 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:38:47,541 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:38:47,541 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:38:47,541 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:38:47,541 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:38:47,541 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:38:47,541 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:38:47,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:38:47,562 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:38:47,845 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:38:47,913 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:38:47,918 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:38:47,927 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:38:47,929 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:38:47,929 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:38:47,929 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:38:47,931 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:38:47,932 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:38:47,932 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:38:50,015 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:38:50,015 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:38:50,020 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:38:50,126 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:38:50,142 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:38:50,148 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:38:50,191 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:38:50,993 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:38:56,860 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:38:56,955 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:38:56,967 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_CHECK_IS_PRINTING"
2023-10-17 14:38:56,977 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:38:56,985 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:40:07,033 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:40:07,034 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:40:07,037 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:40:07,042 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:40:07,101 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:40:10,198 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:40:10,211 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:40:10,213 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:40:10,224 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:40:10,226 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:40:11,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:40:11,071 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:40:11,077 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:40:11,086 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:40:11,086 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:40:11,086 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:40:11,086 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:40:11,086 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:40:11,087 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:40:11,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:40:11,105 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:40:11,437 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:40:11,459 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:40:11,463 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:40:11,510 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:40:11,511 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:40:11,512 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:40:11,512 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:40:11,512 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:40:11,513 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:40:11,513 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:40:13,552 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:40:13,552 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:40:13,555 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:40:13,629 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:40:13,646 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:40:13,652 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:40:13,691 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:40:14,503 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:42:09,859 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:42:09,860 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:42:09,860 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:42:09,862 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:42:09,904 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:42:13,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:42:13,210 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:42:13,212 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:42:13,222 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:42:13,224 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:42:13,779 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:42:13,813 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:42:13,819 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=0{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(default extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:42:13,827 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:42:13,827 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:42:13,827 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:42:13,827 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:42:13,827 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:42:13,827 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:42:13,844 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:42:13,846 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:42:14,157 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:42:14,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:42:14,198 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:42:14,207 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:42:14,209 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:42:14,210 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:42:14,210 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:42:14,210 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:42:14,211 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:42:14,211 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:42:16,298 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:42:16,298 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:42:16,301 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:42:16,379 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:42:16,401 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:42:16,407 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:42:16,446 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:42:17,253 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:43:25,765 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:43:25,887 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:43:25,897 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_CHECK_IS_PRINTING"
2023-10-17 14:43:25,904 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:43:25,912 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:44:33,173 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:44:33,173 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:44:33,174 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:44:33,176 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:44:33,217 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:44:36,198 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:44:36,210 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:44:36,212 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:44:36,222 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:44:36,224 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:44:37,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:44:37,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:44:37,143 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancels the current print.\nUsage: CANCEL_PRINT', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro bed_mesh_calibrate_fast': {'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.', 'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro bed_mesh_check': {'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]', 'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}'}, 'gcode_macro adjust_surface_offsets': {'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"'}, 'gcode_macro set_surface_offset': {'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}'}, 'gcode_macro set_surface_active': {'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}'}, 'gcode_macro set_gcode_offset': {'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro make_surface_mesh': {'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}'}, 'gcode_macro load_surface_mesh': {'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]', 'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}'}, 'gcode_macro m300': {'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]', 'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}'}, 'gcode_macro set_draw_params': {'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}'}, 'gcode_macro draw_line_to': {'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]', 'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0'}, 'gcode_macro draw_purge_line': {'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]', 'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}'}, 'gcode_macro set_fan_scaling': {'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0', 'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}'}, 'gcode_macro reset_fan_scaling': {'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING', 'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0'}, 'gcode_macro m106': {'description': 'Wraps M106 to implement scaling overrides.', 'rename_existing': 'M106.6245197', 'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro LOAD_FILAMENT': {'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}'}, 'gcode_macro UNLOAD_FILAMENT': {'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]', 'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}'}, 'gcode_macro m701': {'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro m702': {'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]', 'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}'}, 'gcode_macro _km_globals': {'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600', 'description': 'Initializes our globals, including any _km_options overrides.', 'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400'}, 'delayed_gcode INIT_GLOBALS': {'initial_duration': '1', 'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready'}, 'gcode_macro check_km_config': {'variable_load_errors': '[]', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400'}, 'gcode_macro kmvars': {'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]', 'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }'}, 'gcode_macro check_macro_docs': {'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]', 'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}'}, 'gcode_macro listvars': {'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>', 'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }'}, 'gcode_macro list_macros': {'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}', 'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}'}, 'gcode_macro m109': {'rename_existing': 'M109.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m190': {'rename_existing': 'M190.6245197', 'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m191': {'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]', 'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status'}, 'gcode_macro m104': {'rename_existing': 'M104.6245197', 'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}'}, 'gcode_macro m140': {'rename_existing': 'M140.6245197', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}'}, 'gcode_macro m141': {'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]', 'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}'}, 'gcode_macro set_heater_scaling': {'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}', 'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}'}, 'gcode_macro reset_heater_scaling': {'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]', 'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}'}, 'gcode_macro lazy_home': {'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]', 'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}'}, 'gcode_macro g28': {'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...', 'rename_existing': 'G28.6245197', 'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}"}, 'gcode_macro before_layer_change': {'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>', 'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}'}, 'gcode_macro after_layer_change': {'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE', 'gcode': '\n_KM_LAYER_RUN'}, 'gcode_macro gcode_at_layer': {'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]', 'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}'}, 'gcode_macro _km_layer_run': {'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}', 'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro init_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _reset_layer_gcode': {'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE', 'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro cancel_all_layer_gcode': {'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"'}, 'gcode_macro pause_next_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...', 'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro pause_at_layer': {'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro speed_at_layer': {'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>', 'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}'}, 'gcode_macro flow_at_layer': {'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>', 'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}'}, 'gcode_macro fan_at_layer': {'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"'}, 'gcode_macro heater_at_layer': {'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...', 'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"'}, 'gcode_macro park': {'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}'}, 'gcode_macro g27': {'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]', 'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}'}, 'gcode_macro pause': {'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'rename_existing': '_KM_PAUSE_BASE', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}'}, 'gcode_macro m600': {'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]', 'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}'}, 'gcode_macro m601': {'description': 'Pauses the current print.\nUsage: M601', 'gcode': '\nPAUSE'}, 'gcode_macro m602': {'description': 'Resumes the currently paused print.\nUsage: M602', 'gcode': '\nRESUME'}, 'gcode_macro m24': {'rename_existing': 'M24.6245197', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}'}, 'gcode_macro m25': {'rename_existing': 'M25.6245197', 'gcode': '\nPAUSE'}, 'gcode_macro resume': {'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'rename_existing': '_KM_RESUME_BASE', 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0', 'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1'}, 'gcode_macro clear_pause': {'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro _km_save_state': {'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0', 'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"'}, 'gcode_macro save_gcode_state': {'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1'}, 'gcode_macro restore_gcode_state': {'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}'}, 'gcode_macro _km_print_status': {'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]", 'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}'}, 'gcode_macro gcode_on_print_status': {'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]', 'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}'}, 'gcode_macro m201': {'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m203': {'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m205': {'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]', 'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}'}, 'gcode_macro m900': {'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]', 'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}'}, 'gcode_macro _reset_velocity_limits': {'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]', 'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"'}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n_KM_CHECK_IS_PRINTING\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=cancelling RESET_STACK=1\nSET_GCODE_VARIABLE MACRO=_print_end_inner VARIABLE=cancelled VALUE="{True}"\nPRINT_END\n_KM_CANCEL_PRINT_BASE\n{% if printer.pause_resume.is_paused %}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=0\n{% endif %}\nCLEAR_PAUSE\n_KM_APPLY_PRINT_OFFSET RESET=1\n{% if \'virtual_sdcard\' in printer and not printer.virtual_sdcard.is_active %}\nSDCARD_RESET_FILE\n{% endif %}', 'rename_existing': '_KM_CANCEL_PRINT_BASE', 'description': 'Cancels the current print.\nUsage: CANCEL_PRINT'}, 'gcode_macro pause': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set E = (params.E|default(5))|float %}\n\n{% set B = params.B|default(10)|int if "output_pin beeper" in printer else 0\n%}\n\n{% if printer.pause_resume.is_paused %}\n{ action_respond_info("Print already paused") }\n{% elif printer.idle_timeout.state | string == "Printing" or\n(printer.virtual_sdcard|default({})).is_active|default(False) %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pausing RESET_STACK=1\n{% set position = printer.gcode_move.gcode_position %}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_x VALUE="{position.x}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_y VALUE="{position.y}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_z VALUE="{position.z}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{E}"\nSAVE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE\n_KM_PAUSE_BASE\nM83\n{% if printer.extruder.can_extrude %}\nG1 E{\'%.4f\' % -E} F{km.load_speed}\n{% endif %}\nPARK P=2{% for k in params|select("in", "XYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n{% for i in range(B) %}\nM300 P100\nG4 P200\n{% endfor %}\n{% else %}\n{ action_respond_info("Print not in progress") }\n{% endif %}', 'rename_existing': '_KM_PAUSE_BASE', 'description': 'Pauses the current print.\nUsage: PAUSE [X=<pos>] [Y=<pos>] [Z=<pos>] [E=<retract_length>] [B=<beeps>]', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set extruder = printer[printer.toolhead.extruder] %}\n{% if extruder.target <= printer.configfile.settings[\nprinter.toolhead.extruder].min_temp\n| float + 0.5 %}\nM109 S{saved_extruder_temp}\n{% endif %}\n\n\n\n{% if \'E\' not in params and not saved_e %}\n{% set saved_e = 5.0 %}\nG1 E{\'%.4f\' % -saved_e } F{km.load_speed}\n{% endif %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\nG90\n\nG0 X{saved_x} Y{saved_y} F{km.travel_speed_xy}\nG0 Z{saved_z} F{km.travel_speed_z}\nG91\n\nG1 E{\'%.4f\' % (params.E|default(saved_e))} F{km.load_speed}\nRESTORE_GCODE_STATE NAME=_KM_PAUSE_OVERRIDE_STATE MOVE=1\n_KM_RESUME_BASE\n{% else %}\n{ action_respond_info("Printer is not paused.") }\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=printing RESET_STACK=1', 'rename_existing': '_KM_RESUME_BASE', 'description': 'Resumes the currently paused print.\nUsage: RESUME [E<pos>]', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_saved_extruder_temp': '0', 'variable_saved_x': '0.0', 'variable_saved_y': '0.0', 'variable_saved_z': '0.0', 'variable_saved_e': '0.0'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_next_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE | default(1) | int != 0 %}\n{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VALUE="{\n{ \'enable\': False, \'call\': MACRO }}" VARIABLE=pause_next_layer\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="next"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n_KM_CHECK_IS_PRINTING\n{% set pause_at_layer =\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n\n{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined else\nparams.LAYER is defined %}\n{% set LAYER = params.LAYER |\ndefault((pause_at_layer.layer|int,\nprinter.print_stats.info.current_layer|int + 1)|max)%}\n{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}\n\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\n{ \'enable\': False, \'layer\': 0, \'call\': MACRO }}"\n{% if ENABLE and pause_at_layer.enable %}\n\nGCODE_AT_LAYER COMMAND="{pause_at_layer.call|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{1}" LAYER="{pause_at_layer.layer}"\n{% endif %}\n\nGCODE_AT_LAYER COMMAND="{MACRO|replace(\'\\"\',\'\\\\\\"\')\n}" CANCEL="{0 if ENABLE else 1}" LAYER="{LAYER}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n_KM_SET_PRINT_STATS_INFO {rawparams}', 'rename_existing': '_KM_SET_PRINT_STATS_INFO', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro bed_mesh_calibrate_fast': {'gcode': '\n\nBED_MESH_CHECK ABORT=1\n\n\n{% set calibrate_cmd =\n(printer["gcode_macro list_macros"].macros.bed_mesh_calibrate|\ndefault(["bed_mesh_calibrate"],True))[-1] %}\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set probe_mesh_padding = km.probe_mesh_padding %}\n{% set probe_min_count = km.probe_min_count %}\n{% set probe_count_scale = km.probe_count_scale %}\n{% set bed_mesh = printer.configfile.settings.bed_mesh %}\n\n\n{%if "mesh_radius" not in bed_mesh and\n"MESH_RADIUS" not in params %}\n{% set safe_min_x = bed_mesh.mesh_min[0] %}\n{% set safe_min_y = bed_mesh.mesh_min[1] %}\n{% set safe_max_x = bed_mesh.mesh_max[0] %}\n{% set safe_max_y = bed_mesh.mesh_max[1] %}\n\n\n{% if "MESH_MIN" in params %}\n{% set mesh_min_x = (params.MESH_MIN.split(",")[0]|float -\nprobe_mesh_padding, safe_min_x)|max %}\n{% set mesh_min_y = (params.MESH_MIN.split(",")[1]|float -\nprobe_mesh_padding, safe_min_y)|max %}\n{% else %}\n{% set mesh_min_x = safe_min_x %}\n{% set mesh_min_y = safe_min_y %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set mesh_max_x = (params.MESH_MAX.split(",")[0]|float +\nprobe_mesh_padding, safe_max_x)|min %}\n{% set mesh_max_y = (params.MESH_MAX.split(",")[1]|float +\nprobe_mesh_padding, safe_max_y)|min %}\n{% else %}\n{% set mesh_max_x = safe_max_x %}\n{% set mesh_max_y = safe_max_y %}\n{% endif %}\n\n{% set probe_count = bed_mesh.probe_count if not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n\n{% if "PROBE_COUNT" not in params %}\n{% set max_x_probes = probe_count[0] %}\n{% set max_y_probes = probe_count[-1] %}\n\n{% set x_probes = (max_x_probes * (mesh_max_x - mesh_min_x) /\n(safe_max_x - safe_min_x) * probe_count_scale)\n| round(0) | int %}\n{% set x_probes = ((x_probes, probe_min_count)|max, max_x_probes)|min %}\n\n{% set y_probes = (max_y_probes * (mesh_max_y - mesh_min_y ) /\n(safe_max_y - safe_min_y) * probe_count_scale )\n| round(0) | int %}\n{% set y_probes = ((y_probes, probe_min_count)|max, max_y_probes)|min %}\n\n{% if x_probes > 6 and y_probes < 4 %}\n{% set y_probes = 4 %}\n{% elif y_probes > 6 and x_probes < 4 %}\n{% set x_probes = 4 %}\n{% endif %}\n{% set probe_count = [x_probes,y_probes] %}\n{% elif probe_count|length == 1 %}\n{% set dummy = probe_count.append(probe_count[0]) %}\n{% endif %}\n\n\n\n\n\n\n\n{% if "relative_reference_index" in bed_mesh %}\n{% set row = (bed_mesh.relative_reference_index / bed_mesh.probe_count[0]\n)|int%}\n{% set rrf_x = (((safe_max_x - safe_min_x) /\n(bed_mesh.probe_count[0] - 1))|round(2, \'floor\')) *\n(bed_mesh.relative_reference_index %\nbed_mesh.probe_count[-1]) %}\n{% if row % 2 %}\n{% set rrf_x = safe_max_x - rrf_x %}\n{% else %}\n{% set rrf_x = safe_min_x + rrf_x %}\n{% endif %}\n{% set rrf_y = (((safe_max_y - safe_min_y) /\n(bed_mesh.probe_count[-1] - 1))|round(2, \'floor\')) *\nrow + safe_min_x %}\n{% set x_dist = (mesh_max_x - mesh_min_x) / (probe_count[0] - 1) %}\n{% set y_dist = (mesh_max_y - mesh_min_y) / (probe_count[1] - 1) %}\n{% set rrf = {\'x\':0, \'y\':0, \'dist\':safe_max_x**2+safe_max_y**2,\'pos\':0} %}\n{% for row in range(probe_count[1])%}\n{% for col in range(probe_count[0])%}\n{% if row % 2 %}\n{% set x = mesh_max_x - col * x_dist %}\n{% else %}\n{% set x = mesh_min_x + col * x_dist %}\n{% endif %}\n{% set y = mesh_min_y + row * y_dist %}\n{% set dist = ((x - rrf_x)**2 + (y - rrf_y)**2)**0.5 %}\n{% if dist < rrf.dist %}\n{% set dummy = rrf.__setitem__("dist", dist) %}\n{% set dummy = rrf.__setitem__("x", x) %}\n{% set dummy = rrf.__setitem__("y", y) %}\n{% set dummy = rrf.__setitem__("pos", row * probe_count[1] + col) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n{% if rrf.x != rrf_x or rrf.y != rrf_y %}\n{action_respond_info("relative_reference_index remapped to"\n" %d (%.2f,%.2f) from %d (%.2f,%.2f)" %\n(rrf.pos, rrf.x, rrf.y,\nbed_mesh.relative_reference_index, rrf_x, rrf_y))}\n{% endif %}\n{% set dummy = params.__setitem__("RELATIVE_REFERENCE_INDEX", rrf.pos) %}\n{% endif %}\n\n{% set dummy = params.__setitem__("MESH_MIN", mesh_min_x~","~mesh_min_y) %}\n{% set dummy = params.__setitem__("MESH_MAX", mesh_max_x~","~mesh_max_y) %}\n{% set dummy = params.__setitem__("PROBE_COUNT", probe_count|join(\',\')) %}\n\n{% if probe_count[0] > 6 or probe_count[1]|default(0) > 6 %}\n{% set dummy = params.__setitem__("ALGORITHM", "bicubic") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK {rawparams}\n{% endif %}\n{% else %}\n\n{% set dummy = params.__delitem__("MESH_MIN") %}\n{% set dummy = params.__delitem__("MESH_MAX") %}\n{% endif %}\n\n{% if "MESH_MIN" in params or "MESH_MAX" in params %}\nBED_MESH_CHECK ABORT=1{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%\nendfor%}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=meshing\n{calibrate_cmd}{%for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'}{%endfor%}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Wraps BED_MESH_CALIBRATE, scaling probe count to specified area.\nUsage: See Klipper documentation.'}, 'gcode_macro bed_mesh_check': {'gcode': '\n{% if printer.bed_mesh is defined %}\n{% set action = action_respond_info if params.ABORT|default(0)|int == 0 else\naction_raise_error %}\n{% set settings = printer.configfile.settings %}\n{% set x_min = settings.stepper_x.position_min %}\n{% set y_min = settings.stepper_y.position_min %}\n{% set x_max = settings.stepper_x.position_max %}\n{% set y_max = settings.stepper_y.position_max %}\n\n{% set label = "[bed_mesh] config" %}\n{% if "MESH_MIN" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_min_x = params.MESH_MIN.split(",")[0]|float %}\n{% set mesh_min_y = params.MESH_MIN.split(",")[1]|float %}\n{% else %}\n{% set mesh_min_x = settings.bed_mesh.mesh_min[0] %}\n{% set mesh_min_y = settings.bed_mesh.mesh_min[1] %}\n{% endif %}\n{% if "MESH_MAX" in params %}\n{% set label = "BED_MESH_CALIBRATE params" %}\n{% set mesh_max_x = params.MESH_MAX.split(",")[0]|float %}\n{% set mesh_max_y = params.MESH_MAX.split(",")[1]|float %}\n{% else %}\n{% set mesh_max_x = settings.bed_mesh.mesh_max[0] %}\n{% set mesh_max_y = settings.bed_mesh.mesh_max[1] %}\n{% endif %}\n\n{% if "bltouch" in settings %}\n{% set x_offset = settings.bltouch.x_offset %}\n{% set y_offset = settings.bltouch.y_offset %}\n{% set probe = "bltouch" %}\n{% elif "probe" in settings %}\n{% set x_offset = settings.probe.x_offset %}\n{% set y_offset = settings.probe.y_offset %}\n{% set probe = "probe" %}\n{% else %}\n{% set x_offset = 0.0 %}\n{% set y_offset = 0.0 %}\n{% endif %}\n\n{% set output = [] %}\n{% set warn =\n"* mesh_%s (%f, %f) adjusted by " ~ probe ~\n".%s_offset (%f) can move out of range for "\n"stepper_%s.position_%s (%f)." %}\n{% if x_offset > 0 and (mesh_min_x - x_offset) < x_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'x\', x_offset, \'x\', \'min\', x_min)) %}\n{% elif x_offset < 0 and (mesh_max_x - x_offset) > x_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'x\', x_offset, \'x\', \'max\', x_max)) %}\n{% endif %}\n{% if y_offset > 0 and (mesh_min_y - y_offset) < y_min %}\n{% set dummy = output.append(warn % (\'min\', mesh_min_x, mesh_min_y,\n\'y\', y_offset, \'y\', \'min\', y_min)) %}\n{% elif y_offset < 0 and (mesh_max_y - y_offset) > y_max %}\n{% set dummy = output.append(warn % (\'max\', mesh_max_x, mesh_max_y,\n\'y\', y_offset, \'y\', \'max\', y_max)) %}\n{% endif %}\n\n{% if output %}\n{ action(\n"Warning: The following issue(s) were detected in your " ~ label ~\n":\\n" ~ output|join("\\n")) }\n{% endif %}\n{% endif %}', 'description': 'Warns if bed_mesh config may generate an invalid mesh.\nUsage: BED_MESH_CHECK [MESH_MIN=<x,y>] [MESH_MAX=<x,y>] [ABORT=<0|1>]'}, 'gcode_macro _apply_bed_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={surfaces.active}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _init_surfaces': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if "bed_surfaces" in printer.save_variables.variables %}\n{% set old_surfaces = printer.save_variables.variables.bed_surfaces %}\n{% else %}\n{% set old_surfaces = { \'active\' : \'\', \'available\' : {} } %}\n{% endif %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% if \'endstop_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'endstop_z\', new_endstop_z) %}\n{% endif %}\n{% if \'probe_z\' not in old_surfaces %}\n{% set dummy = old_surfaces.__setitem__(\'probe_z\', new_probe_z) %}\n{% endif %}\n{% set surfaces = { \'active\' : \'\', \'available\' : {},\n\'endstop_z\' : old_surfaces.endstop_z,\n\'probe_z\' : old_surfaces.probe_z } %}\n{% for s in km.bed_surfaces %}\n{% set s = s.split()|join(\' \')|lower %}\n{% if s|length > km.bed_surface_max_name_length or\ns|list|select("in", " \\r\\n\\"\\\'")|list %}\n{action_raise_error(\'Invalid surface name "%s". Name must be %d or fewer \'\n\'characters and must not include space or quotation characters\'\n| format(s, km.bed_surface_max_name_length))}\n{% endif %}\n{% if s in old_surfaces.available %}\n{% set dummy = surfaces.available.__setitem__(s,\nold_surfaces.available[s]) %}\n{% else %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : 0.0}) %}\n{% endif %}\n{% endfor %}\n{% if old_surfaces.active in surfaces.available %}\n{% set dummy = surfaces.__setitem__(\'active\', old_surfaces.active) %}\n{% elif km.bed_surfaces %}\n{% set dummy = surfaces.__setitem__(\'active\', km.bed_surfaces[0]|lower) %}\n{% endif %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n_APPLY_BED_SURFACE_OFFSET\n{% if new_probe_z != surfaces.probe_z or\nnew_endstop_z != surfaces.endstop_z %}\n{ action_respond_info(\n\'Z probe offset or endstop position changed. Run ADJUST_SURFACE_OFFSETS \'\n\'to adjust the offset for all saved surfaces by the change differential, \'\n\'or run ADJUST_SURFACE_OFFSETS IGNORE=1 to hide this message without \'\n\'making changes.\') }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro adjust_surface_offsets': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set settings = printer.configfile.settings %}\n{% set new_probe_z = (settings.probe | default(settings.bltouch) |\ndefault(settings.smart_effector) | default({})\n).z_offset|default(0.0)|float %}\n{% set new_endstop_z = (settings.stepper_z | default({})).position_endstop |\ndefault(0.0)|float %}\n{% set diff = (surfaces.probe_z - new_probe_z +\nsurfaces.endstop_z - new_endstop_z)|round(6) %}\n{% if not params.IGNORE|default(0)|int %}\n{% for s in surfaces.available %}\n{% set offset = (surfaces.available[s].offset - diff)|round(6) %}\n{% set dummy = surfaces.available.__setitem__(s, {\'offset\' : offset}) %}\n{% endfor %}\n{ action_respond_info("All bed surfaces now adjusted by %1.4f"|\nformat(diff))}\n{% elif diff != 0 %}\n{ action_respond_info("Status cleared without adjustment") }\n{% endif %}\n{% set dummy = surfaces.__setitem__(\'endstop_z\', new_endstop_z| round(6)) %}\n{% set dummy = surfaces.__setitem__(\'probe_z\', new_probe_z|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"', 'description': 'Adjusts surface offsets to account for changes in the Z endstop\nposition or probe Z offset.\nUsage: ADJUST_SURFACE_OFFSETS [IGNORE]'}, 'gcode_macro set_surface_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set active = surfaces.available[SURFACE] %}\n\n{% set OFFSET = params.OFFSET|default(active.offset)|float %}\n{% if OFFSET != active.offset %}\n{% set dummy = surfaces.available[SURFACE].__setitem__("offset", OFFSET) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% if SURFACE == surfaces.active %}\n_km_set_gcode_offset_base Z="{OFFSET}" MOVE={\n1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{% endif %}\n{ action_respond_info("Bed surface: %s Offset: %.3f"\n| format(SURFACE, OFFSET)) }\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(active surface) %}\n{% set dummy = params.OFFSET|default(none)|float %}\n" %}', 'description': 'Sets the offset for a surface and moves the toolhead (if homed).\nUsage: SET_SURFACE_OFFSET [OFFSET=<offset>] [SURFACE=<surface>]'}, 'gcode_macro set_surface_active': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if "SURFACE" in params %}\n{% set SURFACE = params.SURFACE|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% if SURFACE != surfaces.active %}\n{% set dummy = surfaces.__setitem__("active", SURFACE) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE={1 if printer.toolhead.homed_axes == \'xyz\' else 0}\n{% endif %}\n{action_respond_info("Active bed surface: %s; offset: %.3f"\n| format(SURFACE, surfaces.available[SURFACE].offset))}\n{% else %}\n{% set output = [] %}\n{% for s in surfaces.available|list|sort %}\n{% set dummy = output.append("%s&nbsp;%s - offset: %.3f"\n| format("*" if s == surfaces.active else "&nbsp;",\ns, surfaces.available[s].offset)) %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SURFACE|default(none) %}\n" %}', 'description': 'Sets the active bed surface and moves the toolhead (if homed). If\nno SURFACE argument is present the available surfaces are listed and the\nactive one is preceded by a "*".\nUsage: SET_SURFACE_ACTIVE [SURFACE=<surface>]'}, 'gcode_macro set_gcode_offset': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% if surfaces.active and\nnot printer["gcode_macro _km_save_state"].is_ephemeral %}\n{% set Z = params.Z|default(0.0)|float|round(6) %}\n{% set Z_ADJUST = params.Z_ADJUST|default(0.0)|float %}\n{% if \'Z\' in params and\nZ != surfaces.available[surfaces.active].offset %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__("offset",\nZ) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% elif Z_ADJUST != 0.0 %}\n{% set dummy = surfaces.available[surfaces.active].__setitem__(\n"offset", (Z_ADJUST + printer.gcode_move.homing_origin.z)|round(6)) %}\nSAVE_VARIABLE VARIABLE=bed_surfaces VALUE="{surfaces}"\n{% endif %}\n{% endif %}\n_km_set_gcode_offset_base{% for k in params%}{\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'rename_existing': '_KM_SET_GCODE_OFFSET_BASE', 'description': 'Wraps SET_GCODE_OFFSET to update the current bed sheet offset.\nUsage: SET_GCODE_OFFSET [X=<pos>|X_ADJUST=<adjust>]\n[Y=<pos>|Y_ADJUST=<adjust>]\n[Z=<pos>|Z_ADJUST=<adjust>]\n[MOVE=1 [MOVE_SPEED=<speed>]]'}, 'gcode_macro make_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE not in surfaces.available %}\n{ action_raise_error("Bed surface %s does not exist." | format(SURFACE)) }\n{% endif %}\n{% set dummy = params.__setitem__(\'PROFILE\', SURFACE) %}\n{% set BED = params.BED|default(70) | int %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set EXTRUDER = params.EXTRUDER|default(km.start_extruder_probing_temp) |\nint %}\n{% set MESH_MULTIPLIER = (params.MESH_MULTIPLIER|default(2)|int, 1)|max %}\n\nM104 S{EXTRUDER}\nM140 S{BED}\nG28\n\n\n{% if surfaces.available[SURFACE].offset !=\nprinter.gcode_move.homing_origin.z %}\n_km_set_gcode_offset_base Z="{surfaces.available[SURFACE].offset\n}" MOVE=1\n{% endif %}\n\n\n{% if BED > 0 %}\n{action_respond_info("Stabilizing bed at %iC" | format(BED,))}\n_KM_PARK_IF_NEEDED HEATER=heater_bed RANGE=0.5\n{% if BED < (printer.heater_bed.temperature - 0.2) %}\nM190 R{BED}\nG4 P{((km.start_bed_heat_delay * 10, 30000)|min,\nkm.start_bed_heat_delay)|max}\n{% else %}\nG4 P{km.start_bed_heat_delay}\n{% endif %}\nM190 R{BED}\n{% endif %}\n\n{% if EXTRUDER > 0 %}\n_KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=2\nM109 R{km.start_extruder_probing_temp}\n{% endif %}\n\n{% if km.start_home_z_at_temp and not bed_at_target %}\nG28 Z\n{% endif %}\n\n\n\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count\nif not params.PROBE_COUNT else\nparams.PROBE_COUNT.split(",")|map(\'int\')|list %}\n{% set dummy = params.__setitem__(\'PROBE_COUNT\',(\nMESH_MULTIPLIER * (probe_count[0] - 1) + 1,\nMESH_MULTIPLIER * (probe_count[-1] - 1) + 1,)|join(\',\')) %}\n\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE_FAST {%\nfor k in params|reject(\'in\',[\'BED\',\'SURFACE\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %}\nSAVE_CONFIG\n\n\n{% set dummy = None if True else "\n{% set dummy = params.MESH_MULTIPLIER|default(2) %}\n{% set dummy = params.SURFACE|default(active surface) %}\n" %}', 'description': 'Generates and saves a mesh to automatically load in PRINT_START.\nUsage: MAKE_SURFACE_MESH [SURFACE=<surface>] [BED=<probing temperature>]\n[EXTRUDER=<probing temperature>]\n[MESH_MULTIPLIER=<integer multiple of mesh density>]\n[bed_mesh_calibrate parameters]'}, 'gcode_macro load_surface_mesh': {'gcode': '\n{% set surfaces = printer.save_variables.variables.bed_surfaces %}\n{% set SURFACE = params.SURFACE|default(surfaces.active)|lower %}\n{% if SURFACE != surfaces.active %}\nSET_SURFACE_ACTIVE SURFACE={SURFACE}\n{% endif %}\n\n{% if SURFACE in printer.bed_mesh.profiles %}\n{% set mesh = printer.bed_mesh.profiles[SURFACE].mesh_params %}\n{% set default = printer.configfile.settings.bed_mesh %}\n\n{% if mesh.min_x <= (default.mesh_min[0] + 0.5) and\nmesh.min_y <= (default.mesh_min[1] + 0.5) and\nmesh.max_x >= (default.mesh_max[0] - 0.5) and\nmesh.max_y >= (default.mesh_max[1] - 0.5) and\nmesh.x_count >= default.probe_count[0] and\nmesh.y_count >= default.probe_count[-1] %}\n\nBED_MESH_PROFILE LOAD={SURFACE}\n{action_respond_info("Loaded mesh: %s" | format(SURFACE,))}\n{% endif %}\n{% endif %}', 'description': 'Attempts to load a mesh associated with the specified surface.\nUsage: LOAD_SURFACE_MESH [SURFACE=<surface>]'}, 'gcode_macro m300': {'gcode': '\n{% set settings = printer.configfile.settings %}\n{% if "output_pin beeper" in printer %}\n{% set P = (params.P|default(100)|int, 0)|max %}\n{% set S = (params.S|default(1000)|int, 1)|max %}\nSET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{\nsettings["output_pin beeper"].scale|default(1.0) * 0.5\n} CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}\nG4 P{P}\nSET_PIN PIN=beeper VALUE=0\n{% else %}\n{action_respond_info(\n"M300 is disabled. To enable create an [output_pin beeper] config.")}\n{% endif %}', 'description': 'Emits and audible beep.\nUsage: M300 [P<duration>] [S<frequency>]'}, 'gcode_macro set_draw_params': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% for k in params %}\n{% set kl = k|lower %}\n{% if kl in dparams %}\n{% if dparams[kl] is float %}\n{% set v = params[k]|float %}\n{% elif dparams[kl] is integer %}\n{% set v = params[k]|int %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"\n{% endif %}\n{% endfor %}', 'description': 'Sets the default parameters used by DRAW_LINE_TO.\nUsage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]', 'variable_height': '0.2', 'variable_width': '0.0', 'variable_feedrate': '1200'}, 'gcode_macro draw_line_to': {'gcode': '\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set position = printer.gcode_move.gcode_position %}\n{% set X = params.X|default(position.x)|float %}\n{% set Y = params.Y|default(position.y)|float %}\n{% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}\n{% set WIDTH = params.WIDTH|default(dparams.width)|float %}\n{% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}\n\n{% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}\n\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[\nprinter.toolhead.extruder].filament_diameter ** 2) / 4 %}\n{% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}\n\n\n_KM_SAVE_GCODE_STATE NAME=_KM_PURGE\nG90\nG92 E0.0\nG1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}\n_KM_RESTORE_GCODE_STATE NAME=_KM_PURGE MOVE=0', 'description': 'Extrudes a line of filament at the specified height and width from\nthe current coordinate to the supplied XY coordinate. (The height is used only\nto calculate the extrusion volume.)\nUsage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]\n[FEEDRATE=<mm/m>]'}, 'gcode_macro draw_purge_line': {'gcode': '\n\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set origin = printer.gcode_move.homing_origin %}\n{% set dummy = km.__setitem__(\'print_min\', (km.print_min[0] - origin.x,\nkm.print_min[1] - origin.y)) %}\n{% set dummy = km.__setitem__(\'print_max\', (km.print_max[0] - origin.x,\nkm.print_max[1] - origin.y)) %}\n\n{% if "PRINT_MIN" in params %}\n{% set PRINT_MIN = (\n(params.PRINT_MIN.split(",")[0]|float, km.print_min[0])|max,\n(params.PRINT_MIN.split(",")[1]|float, km.print_min[1])|max\n) %}\n{% else %}\n{% set PRINT_MIN = km.print_min %}\n{% endif %}\n{% if "PRINT_MAX" in params %}\n{% set PRINT_MAX = (\n(params.PRINT_MAX.split(",")[0]|float, km.print_max[0])|min,\n(params.PRINT_MAX.split(",")[1]|float, km.print_max[1])|min\n) %}\n{% else %}\n{% set PRINT_MAX = km.print_max %}\n{% endif %}\n{% set extruder = printer.toolhead.extruder|string %}\n{% set HEIGHT = params.HEIGHT|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 0.625)|float %}\n{% set WIDTH = params.WIDTH|default(\nprinter.configfile.settings[extruder].nozzle_diameter * 1.25)|float %}\n{% set LENGTH = params.LENGTH|default(km.start_purge_length)|float %}\n\n{% set dparams = printer["gcode_macro set_draw_params"] %}\n{% set filament_area = 3.14159 *\n(printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}\n{% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}\n{% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}\n{% set purge_rows = (purge_length / printable_length)|round(0,\'ceil\')|int %}\n{% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}\n{% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}\n{% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}\n\n{% set y_start = (km.print_min[1], PRINT_MIN[1] - km.start_purge_clearance -\n(purge_rows + 0.5) * WIDTH )|max %}\nG90\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 30, km.print_min[0])|max} Y{\n"%.3f" % (y_start - 10, km.print_min[1])|max} F{km.travel_speed_xy}\n\nG1 X{"%.3f" % (PRINT_MIN[0] - 2, km.print_min[0])|max} Y{"%.3f" % y_start} Z{\n"%.4f" % HEIGHT} F{km.travel_speed_xy}\n\nG92 E0.0\nG1 E{"%.3f" % km.start_purge_prime_length} F{km.load_priming_speed}\nG92 E0.0\n\nG1 X{"%.3f" % PRINT_MIN[0]} F{km.travel_speed_xy}\n{% for n in range(purge_rows - 1) %}\n{% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * n + y_start}"\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (n + 1) + y_start}"\n{% endfor %}\n{% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}\nDRAW_LINE_TO HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" X="{x_pos}" Y="{\nWIDTH * (purge_rows - 1) + y_start}"\nG92 E0.0', 'description': 'Purges the specified length of filament as a line (or rows of\nlines) in front of the supplied print area. If no print area is specified the\npurge lines are drawn at the front edge of the maximum printable area. If no\nprintable area is set it defaults to the XY axis limits.\nUsage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]\n[WIDTH=<mm>] [LENGTH=<mm>]'}, 'gcode_macro _check_fan_params': {'gcode': '\n{% set MAXIMUM = params.MAXIMUM|default(\nprinter["gcode_macro set_fan_scaling"].maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(\nprinter["gcode_macro set_fan_scaling"].minimum)|int %}\n\n{% if params.SCALE and params.SCALE|float <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < 0 or MINIMUM > 255 %}\n{ action_raise_error("MINIMUM must be between 0 and 255.") }\n{% elif MAXIMUM < 0 or MAXIMUM > 255 %}\n{ action_raise_error("MAXIMUM must be between 0 and 255.") }\n{% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}\n{ action_raise_error("SPEED must be between 0 and 255.") }\n{% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}\n{ action_raise_error("BOOST must be between 0 and 255.") }\n{% elif MINIMUM > MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_fan_scaling': {'gcode': '\n_CHECK_FAN_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set SCALE = params.SCALE|default(scale)|float %}\n{% set BOOST = params.BOOST|default(boost)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}\n{% set MINIMUM = params.MINIMUM|default(minimum)|int %}\n{% set SPEED = params.SPEED|default(real_speed)|int %}\n\n{% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}\n{action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|\nformat(SCALE, MINIMUM, MAXIMUM, SPEED))}\n{% endif %}\n\n\n{% if params|length > 0 %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"\n\nM106 S{SPEED}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(255)|int %}\n{% set dummy = params.MINIMUM|default(0)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}', 'description': 'Sets fan scaling factors applied to M106 command. If a speed is\nprovided it will be adjusted according to the scaling parameters.\nUsage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]\n[MINIMUM=<min>] [SPEED=<speed>]', 'variable_scale': '1.0', 'variable_boost': '0', 'variable_minimum': '0', 'variable_maximum': '255', 'variable_real_speed': '0'}, 'gcode_macro reset_fan_scaling': {'gcode': '\nSET_FAN_SCALING SCALE=1.0 BOOST=0 MAXIMUM=255 MINIMUM=0', 'description': 'Clears all fan scaling factors.\nUsage: RESET_FAN_SCALING'}, 'gcode_macro m106': {'gcode': '\n{% set S = params.S|default(255)|int %}\n{% set scale = printer["gcode_macro set_fan_scaling"] %}\nSET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=real_speed VALUE="{S}"\nM106.6245197 S{((((S + scale.boost) * scale.scale) | round | int,\nscale.minimum) | max, scale.maximum) | min}', 'rename_existing': 'M106.6245197', 'description': 'Wraps M106 to implement scaling overrides.'}, 'gcode_macro _load_unload': {'gcode': '\n{% set saved_extruder = printer.toolhead.extruder %}\n{% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n{% set BEEPS = params.BEEPS|default(8)|int if "output_pin beeper" in printer\nelse 0 %}\n{% set default_minimum = km.load_min_temp if km.load_min_temp else\n(printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}\n{% if \'MINIMUM\' in params %}\n{% set MINIMUM = params.MINIMUM|int %}\n\n{% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and\nprinter["gcode_macro resume"].saved_extruder_temp %}\n{% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}\n\n{% elif printer[EXTRUDER].target > default_minimum %}\n{% set MINIMUM = printer[EXTRUDER].target %}\n{% else %}\n{% set MINIMUM = default_minimum %}\n{% endif %}\n{% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}\n{ action_raise_error("Extrude below minimum temp.") }\n{% elif printer.pause_resume.is_paused %}\n\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\n{% endif %}\n{% set SPEED = params.SPEED|default(km.load_speed)|int %}\n{% set priming_length = km.load_priming_length %}\n{% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}\n{% if LENGTH < 0 %}\n{% set priming_length = (priming_length + LENGTH, 0)|max %}\n{% set LENGTH = 0 %}\n{% endif %}\nSAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n{% if EXTRUDER != saved_extruder%}\nACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n{% if not printer.extruder.can_extrude or\nprinter[EXTRUDER].target < default_minimum %}\n{action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}\nM109 S{MINIMUM}\n{% endif %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"\nif params.LOAD|int else "filament_unload"}\nM83\n{% set priming_speed = (km.load_priming_speed, SPEED)|min %}\n{% if params.LOAD|int %}\nG0 E{LENGTH} F{SPEED}\nG0 E{priming_length} F{priming_speed}\nG0 E{\'%.4f\' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}\n{% else %}\n{% set pre_prime_distance = 5.0 %}\n{% set shaping_moves = 5 %}\n{% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}\n\nG0 E{pre_prime_distance} F{SPEED}\nG4 P500\nG0 E{\'%.4f\' % -(priming_length - shaping_distance)} F{SPEED}\n\n\n{% for i in range(1, shaping_moves + 1) %}\nG0 E2 F{priming_speed}\nG0 E-{2 + (0.1 * i)} F{priming_speed}\n{% endfor %}\n\nG0 E{\'%.4f\' % -(LENGTH + pre_prime_distance)} F{SPEED}\n{% endif %}\nRESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD\n\n\n{% for i in range(BEEPS) %}\nM300 P100\nG4 P200\n{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\n_LOAD_UNLOAD LOAD=1{% for k in params\n%}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n\n\n{% set dummy = None if True else "\nM109\n{% set dummy = params.LENGTH|default(variable_load_length)|float %}\n{% set dummy = params.SPEED|default(variable_load_speed)|float %}\n{% set dummy = params.EXTRUDER|default(current extruder) %}\n{% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}\n{% set dummy = params.BEEPS|default(10)|int %}\n" %}', 'description': 'Loads filament to the extruder.\nUsage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'Unloads filament from the extruder.\nUsage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]\n[EXTRUDER=<extruder>] [MINIMUM=<temperature>]\n[BEEPS=<beep count on completion>]'}, 'gcode_macro _pause_inner_m700': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if extruder != printer.toolhead.extruder%}\nACTIVATE_EXTRUDER EXTRUDER={extruder}\n{% endif %}\n\n{% set z_param = (\' Z="%f"\' % params.Z) if \'Z\' in params else "" %}\n\n{% if printer.idle_timeout.state|string == "Printing" %}\nPAUSE B="{0}" P=2{z_param}\n{% elif not printer.pause_resume.is_paused%}\nPARK B="{0}" P=2{z_param}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m701': {'gcode': '\n{% if \'U\' in params %}\n{% if not \'L\' in params %}\nRESPOND TYPE=error MSG="Argument \\"U\\" substituted for missing \\"L\\"."\n{% set dummy = params.__setitem__("L", params.U) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"U\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.L|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then loads filament to the extruder.\nUsage: M701 [L<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro m702': {'gcode': '\n{% if \'L\' in params %}\n{% if not \'U\' in params %}\nRESPOND TYPE=error MSG="Argument \\"L\\" substituted for missing \\"U\\"."\n{% set dummy = params.__setitem__("U", params.L) %}\n{% else %}\nRESPOND TYPE=error MSG="Invalid argument \\"L\\" ignored."\n{% endif %}\n{% endif %}\n\n_PAUSE_INNER_M700 {% for k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT BEEPS="{10}" LENGTH={\nparams.U|default(printer["gcode_macro _km_globals"].load_length)|float}', 'description': 'Pauses/parks the toolhead then unloads filament from the extruder.\nUsage: M702 [U<distance>] [Z<pos>] [T<extruder>]'}, 'gcode_macro _km_globals': {'gcode': '\n\n\n\n\n\n\n\n\n{% set required_sections = {"heater_bed" : None,\n"extruder" : None,\n"gcode_macro _km_options" : None,\n"idle_timeout" : ("gcode", "_KM_IDLE_TIMEOUT"),\n"pause_resume" : None,\n"respond" : None,\n"save_variables" : None,\n"virtual_sdcard" :\n("on_error_gcode", "CANCEL_PRINT")\n} %}\n{% set warn_removed = {\n"start_extruder_set_target_before_level" :\n"The start_extruder_set_target_before_level option has been removed. "\n"Use the start_extruder_probing_temp option instead to set a fixed "\n"probing temperature.",\n"start_gcode_before_print" :\n"The start_gcode_before_print option has been removed. The same effect "\n"can now be achieved by inserting custom gcode before the "\n"_PRINT_START_PHASE_PURGE line in your slicer\'s start gcode, or by "\n"wrapping the _PRINT_START_PHASE_PURGE macro. See the Slicer "\n"Configuration section in the readme for more information.",\n"velocity_decel_scale" :\n"The velocity_decel_scale option has been removed. Klipper\'s input "\n"shaping provides a superior mechanism for improving print quality "\n"at higher speeds.",\n} %}\n{% set output = [] %}\n{% for s in required_sections %}\n{% set f = required_sections[s][0] if required_sections[s] else None %}\n{% set v = required_sections[s][1] if required_sections[s] else None %}\n{% if s not in printer.configfile.config %}\n{% set dummy = output.append("Missing [%s] section.\\n" | format(s)) %}\n{% elif f and\n(v not in printer.configfile.config[s][f]|default("")|upper) %}\n{% set dummy = output.append("Missing %s in %s for [%s] section.\\n"\n| format(v, f, s)) %}\n{% endif %}\n{% endfor %}\n{% if output %}\n{ action_emergency_stop((\n"required printer.cfg section(s) missing:\\n"\n~ output | join("\\n")) ~\n"See readme: https://github.com/jschuh/klipper-macros\\x23klipper-setup")\n}\n{% endif %}\n\n\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_level_bed_at_temp VALUE="{\n1 if printer.bed_mesh is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_quad_gantry_level_at_temp VALUE="{\n1 if printer.quad_gantry_level is defined else 0}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_z_tilt_adjust_at_temp VALUE="{\n1 if printer.z_tilt is defined else 0}"\n{% set toolhead = printer.toolhead %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_min VALUE="{\n(toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=print_max VALUE="{\n(toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_end_park_y VALUE="{\ntoolhead.axis_maximum.y}"\n{% set settings = printer.configfile.settings %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE=start_home_z_at_temp VALUE="{\n1 if ("stepper_z" in settings and\nsettings.stepper_z.endstop_pin.split()|join("")|lower ==\n"probe:z_virtual_endstop") else 0}"\n\n{% set options = printer["gcode_macro _km_options"] %}\n{% set km = printer["gcode_macro _km_globals"] %}\n\n\n{% if options.park_x|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_min) %}\n{% elif options.park_x|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_x",\nprinter.configfile.settings.stepper_x.position_max) %}\n{% endif %}\n{% if options.park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.start_end_park_y|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_min) %}\n{% elif options.start_end_park_y|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("start_end_park_y",\nprinter.configfile.settings.stepper_y.position_max) %}\n{% endif %}\n{% if options.park_z|default("")|string|lower == "min" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_min) %}\n{% elif options.park_z|default("")|string|lower == "max" %}\n{% set dummy = options.__setitem__("park_z",\nprinter.configfile.settings.stepper_z.position_max) %}\n{% endif %}\n\n\n{% for k in options %}\n{% if k not in km %}\n{% if k in warn_removed %}\n{action_respond_info(warn_removed[k])}\n{% else %}\n{% set dummy = output.append("%s is not valid for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% elif km[k] is string %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="\'{options[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\')}\'"\n{% elif km[k] is float %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|float}"\n{% elif km[k] is integer or km[k] is boolean %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k} VALUE="{options[k]|int}"\n{% elif km[k] is mapping %}\n{% if options[k] is not mapping %}\n{% set dummy = output.append("%s requires a mapping type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% elif km[k] is sequence %}\n{% if options[k] is not sequence %}\n{% set dummy = output.append("%s requires a sequence type." |\nformat(k)) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_globals VARIABLE={k\n} VALUE="{options[k]|replace(\'\\"\',\'\\\\\\"\')}"\n{% else %}\n{% set dummy = output.append("%s is not a valid type for _KM_OPTIONS." |\nformat(k)) %}\n{% endif %}\n{% endfor %}\n\n{% if "homing_override" in printer.configfile.config %}\n{% for l in printer.configfile.config.homing_override.gcode.split("\\n") %}\n{% if " g28 " in (" " ~ l.split("\\x23")[0].split(";")[0]|lower ~ " ") %}\n{% set dummy = output.append(\n"G28 in [homing_override] gcode. Replace with G28.6245197 to "\n"fix recursive macro call.\\n"\n"See readme: https://github.com/jschuh/klipper-macros\\x23g28") %}\n{% endif %}\n{% endfor %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=check_km_config VARIABLE=load_errors VALUE="{\noutput|replace(\'\\"\',\'\\\\\\"\')}"\nM400', 'description': 'Initializes our globals, including any _km_options overrides.', 'variable_bed_surface_max_name_length': '10', 'variable_bed_surfaces': "['default']", 'variable_load_length': '90.0', 'variable_load_min_temp': '0', 'variable_load_priming_length': '20.0', 'variable_load_priming_speed': '200', 'variable_load_speed': '1200', 'variable_menu_show_octoprint': 'True', 'variable_menu_show_sdcard': 'True', 'variable_menu_temperature': "[\n{'name' : 'PLA',  'extruder' : 200, 'bed' : 60},\n{'name' : 'PETG', 'extruder' : 230, 'bed' : 85},\n{'name' : 'ABS',  'extruder' : 245, 'bed' : 110}]", 'variable_park_x': '0.0', 'variable_park_y': '0.0', 'variable_park_z': '20.0', 'variable_print_min': '()', 'variable_print_max': '()', 'variable_pressure_advance_scale': '-1.0', 'variable_probe_mesh_padding': '5.0', 'variable_probe_min_count': '3', 'variable_probe_count_scale': '1.0', 'variable_start_bed_heat_delay': '2000', 'variable_start_bed_heat_overshoot': '2.0', 'variable_start_clear_adjustments_at_end': 'True', 'variable_start_end_park_y': '0.0', 'variable_start_extruder_preheat_scale': '0.5', 'variable_start_extruder_probing_temp': '0', 'variable_start_home_z_at_temp': 'True', 'variable_start_level_bed_at_temp': 'True', 'variable_start_purge_clearance': '2.0', 'variable_start_purge_length': '0.0', 'variable_start_purge_prime_length': '12.0', 'variable_start_quad_gantry_level_at_temp': 'True', 'variable_start_random_placement_max': '0', 'variable_start_random_placement_padding': '10.0', 'variable_start_try_saved_surface_mesh': 'False', 'variable_start_z_tilt_adjust_at_temp': 'True', 'variable_travel_speed_xy': '3000', 'variable_travel_speed_z': '600'}, 'delayed_gcode init_globals': {'gcode': '\nLIST_MACROS SILENT=1\n_KM_GLOBALS\n\nCHECK_KM_CONFIG\n_INIT_SURFACES\nBED_MESH_CHECK\n\nSET_DRAW_PARAMS WIDTH="{printer.configfile.settings.extruder.nozzle_diameter}"\n\n_KM_OPTIONS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready', 'initial_duration': 1.0}, 'gcode_macro check_km_config': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set toolhead = printer.toolhead %}\n{% set output = load_errors %}\n{% if km.park_x > toolhead.axis_maximum.x or\nkm.park_x < toolhead.axis_minimum.x %}\n{% set dummy = output.append("park_x is invalid.") %}\n{% endif %}\n{% if km.park_y > toolhead.axis_maximum.y or\nkm.park_y < toolhead.axis_minimum.y %}\n{% set dummy = output.append("park_y is invalid.") %}\n{% endif %}\n{% if km.park_z > toolhead.axis_maximum.z or\nkm.park_z < toolhead.axis_minimum.z %}\n{% set dummy = output.append("park_z is invalid.") %}\n{% endif %}\n{% if km.print_max[0] > toolhead.axis_maximum.x or\nkm.print_max[1] > toolhead.axis_maximum.y %}\n{% set dummy = output.append("print_max is invalid.") %}\n{% endif %}\n{% if km.print_min[0] < toolhead.axis_minimum.x or\nkm.print_min[1] < toolhead.axis_minimum.y %}\n{% set dummy = output.append("print_min is invalid.") %}\n{% endif %}\n{% if km.start_extruder_preheat_scale > 1.0 or\nkm.start_extruder_preheat_scale < 0.0 %}\n{% set dummy = output.append("extruder_preheat_scale is invalid.") %}\n{% endif %}\n{% if km.load_length >\nprinter.configfile.settings["extruder"].max_extrude_only_distance %}\n{% set dummy = output.append(\n"load_length exceeds max_extrude_only_distance.") %}\n{% endif %}\n{% if km.load_length < km.load_priming_length %}\n{% set dummy = output.append(\n"load_length is shorter than load_priming_length.") %}\n{% endif %}\n{% if km.load_length < 0.0 %}\n{% set dummy = output.append("load_length is negative.") %}\n{% endif %}\n{% if km.load_priming_length < 0.0 %}\n{% set dummy = output.append("load_priming_length is negative.") %}\n{% endif %}\n\n\n{% if output %}\n{ action_raise_error(output|sort|join(\'\\nError: \')) }\n{% endif %}\nM400', 'description': 'Checks global variables and throws an error on any invalid values.\nDoes nothing if the config has no errors.', 'variable_load_errors': '[]'}, 'gcode_macro kmvars': {'gcode': '\n{% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set output = [] %}\n{% for k in km %}\n{% if SEARCH in k %}\n{% set dummy = output.append(k ~ ": " ~ km[k]) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|sort|join(\'\\n\')) }', 'description': 'Lists global variables used by klipper-macros.\nUsage: KMVARS [SEARCH=<search_string>]'}, 'gcode_macro check_macro_docs': {'gcode': '\n{% set USAGE = params.USAGE|default(0)|int %}\n{% set HIDDEN = params.HIDDEN|default(0)|int %}\n{% set RENAMED = params.RENAMED|default(0)|int %}\n{% set output = [] %}\n{%set config = printer.configfile.config %}\n{% for k in config|sort %}\n{% if k.startswith("gcode_macro") %}\n{% set name = k.split()[1] %}\n{% set desc = config[k].description|default("") %}\n{% set is_renamed = config[k].rename_existing|default("") %}\n{% if (not desc or (USAGE and not "Usage: "~name.upper() in desc)) and\n(HIDDEN or not name.startswith(\'_\')) and (RENAMED or is_renamed) %}\n{% set dummy = output.append("%s&nbsp;%s: missing %s."\n| format("*" if is_renamed else "&nbsp;", name,\n"description" if not desc else "usage")) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{action_respond_info(output|join("\\n"))}', 'description': 'Lists macros lacking proper documentation.\nUsage: CHECK_MACRO_DOCS [USAGE=<0|1>] [HIDDEN=<1|0>] [RENAMED=<1|0>]'}, 'gcode_macro listvars': {'gcode': '\n\n{% if \'SEARCH\' not in params and \'S\' not in params %}\n{ action_raise_error("Must provide a SEARCH parameter.") }\n{% endif %}\n{% set SEARCH = params.SEARCH|default(params.S)|lower %}\n{% set ns = namespace() %}\n{% set output = [] %}\n{% for item in printer %}\n{% if item is not string %}\n{% set ns.path = [\'printer\', "[%s]" % (item|string), \'\'] %}\n{% elif \' \' in item %}\n{% set ns.path = [\'printer\', "[\'%s\']" % (item), \'\'] %}\n{% else %}\n{% set ns.path = [\'printer.\', item, \'\'] %}\n{% endif %}\n\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append(ns.path|join) %}\n{% endif %}\n\n{% if printer[item].items() %}\n{% for childkey, child in printer[item].items() recursive %}\n{% set ns.path = ns.path[:loop.depth|int + 1] %}\n{% if childkey is not string %}\n{% set null = ns.path.append("[%s]" % (childkey|string)) %}\n{% elif \' \' in childkey %}\n{% set null = ns.path.append("[\'%s\']" % (childkey)) %}\n{% else %}\n{% set null = ns.path.append(".%s" % (childkey)) %}\n{% endif %}\n\n{% if child is mapping  %}\n{loop(child.items())}\n{% else %}\n{% if SEARCH in ns.path|lower %}\n{% set dummy = output.append("%s : %s" % (ns.path|join, child)) %}\n{% endif %}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output|join("\\n")) }', 'description': 'Lists per-macro variables with a name containing SEARCH. This is\nuseful for debugging macros by allowing you to probe printer state. Be very\ncareful, however, as an overly broad SEARCH parameter can take a long time\nto process and potentially hang or crash klipper.\nUsage: LISTVARS SEARCH=<search_string>'}, 'gcode_macro list_macros': {'gcode': '\n\n{% if not macros %}\n{% set renames = {} %}\n{% for k in printer.configfile.config %}\n{% if k.lower().startswith("gcode_macro") and\nprinter.configfile.config[k].rename_existing %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = renames.__setitem__(name,\n[printer.configfile.config[k].rename_existing|lower] +\nrenames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% for k in printer %}\n{% if k.lower().startswith("gcode_macro") %}\n{% set name = k.split(None, 1)[1] | lower %}\n{% set dummy = macros.__setitem__(name, renames[name]|default([])) %}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n{% if params.SILENT|default(0)|int == 0 %}\n_LIST_MACROS_DISPLAY {rawparams}\n{% endif %}', 'description': 'Lists registered macros (and optionally show variable state).\nUsage: LISTVARS SEARCH=<search_string> VARS=<0|1> SILENT=<0|1>', 'variable_macros': '{}'}, 'gcode_macro _list_macros_display': {'gcode': '\n{% set SEARCH = params.SEARCH | default(params.S) | default("") | lower %}\n{% set VARS = params.VARS | default(params.V) | default(0) | int != 0 %}\n\n{% set macros = printer["gcode_macro list_macros"].macros %}\n{% set output = [] %}\n{% for k in macros %}\n{% if SEARCH in k | lower %}\n{% set line = k ~ ((" (renames: %s)" % (macros[k]|join(","))) if macros[k]\nelse "") %}\n{% set outvars = [] %}\n{% if VARS %}\n{% for v in printer["gcode_macro " ~ k] | sort %}\n{% set dummy = outvars.append("\\n* %s: %s" %\n(v, printer["gcode_macro " ~ k][v]|string)) %}\n{% endfor %}\n{% endif %}\n{% set dummy = output.append(line + outvars | join("")) %}\n{% endif %}\n{% endfor %}\n{ action_respond_info(output | sort | join("\\n")) }', 'description': 'G-Code macro'}, 'gcode_macro set_heater_temperature_scaled': {'gcode': '\n{% set HEATER = params.HEATER.lower() %}\n{% set TARGET = params.TARGET|default(0.0)|float %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n{%if TARGET > 0.0 %}\n{% set TARGET = (((TARGET + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% endif %}\nSET_HEATER_TEMPERATURE HEATER="{HEATER}" TARGET={TARGET}', 'description': 'G-Code macro'}, 'gcode_macro temperature_wait_scaled': {'gcode': '\n{% set SENSOR = params.SENSOR.lower() %}\n{% set heater = SENSOR if not SENSOR.startswith("heater_generic") else\nSENSOR.split()[1] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if heater in scaled_heaters %}\n{% set scales = scaled_heaters[heater] %}\n{% if "MINIMUM" in params and MINIMUM > 0.0 %}\n{% set MINIMUM = (((MINIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% if "MAXIMUM" in params and MAXIMUM > 0.0 %}\n{% set MAXIMUM = (((MAXIMUM + scales.bump) * scales.scale, scales.minimum)\n| max, scales.maximum)|min %}\n{% endif %}\n{% else %}\n{% set settings = printer.configfile.settings[SENSOR] %}\n{% set MINIMUM = params.MINIMUM|default(settings.min_temp) %}\n{% set MAXIMUM = params.MAXIMUM|default(settings.max_temp) %}\n{% endif %}\n{% if printer[sensor].temperature < MINIMUM or\nprinter[sensor].temperature > MAXIMUM %}\nTEMPERATURE_WAIT SENSOR="{SENSOR}" MINIMUM={MINIMUM} MAXIMUM={MAXIMUM}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper_inner': {'gcode': '\n\n\n{% set sensor = params.HEATER if params.HEATER in\nprinter.heaters.available_heaters\nelse ("heater_generic " ~ params.HEATER) %}\n{% set target = printer[sensor].target %}\n{% if \'R\' in params and target > 0.0 %}\n{% set T = params.T|default("") %}\nM{params.M}.6245197 S{target} { (" T"~T) if T else "" }\n{% elif printer[sensor].temperature < target %}\nTEMPERATURE_WAIT SENSOR="{sensor}" MINIMUM={target}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _gcode_wait_wrapper': {'gcode': '\n{% set target = params.S | default(params.R | default(0))| float %}\nSET_HEATER_TEMPERATURE_SCALED HEATER="{params.HEATER}" TARGET={target}\n_GCODE_WAIT_WRAPPER_INNER{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}', 'description': 'G-Code macro'}, 'gcode_macro m109': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=extruder_heating\n_GCODE_WAIT_WRAPPER HEATER={extruder}{%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M109.6245197', 'description': 'G-Code macro'}, 'gcode_macro m190': {'gcode': '\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=bed_heating\n_GCODE_WAIT_WRAPPER HEATER=heater_bed {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'rename_existing': 'M190.6245197', 'description': 'G-Code macro'}, 'gcode_macro m191': {'gcode': '\n\n{% if "R" in params %}\n{% set dummy = params.__setitem__("S", params.R) %}\n{% endif %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=chamber_heating\n_GCODE_WAIT_WRAPPER HEATER=chamber {%\nfor k in params %}{\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status', 'description': 'Sets chamber temperature (with wait for heating).\nUsage: M191 [S<temp>]'}, 'gcode_macro m104': {'gcode': '\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={extruder} TARGET={params.S|default(0)}', 'rename_existing': 'M104.6245197', 'description': 'G-Code macro'}, 'gcode_macro m140': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=heater_bed TARGET={params.S|default(0)}', 'rename_existing': 'M140.6245197', 'description': 'G-Code macro'}, 'gcode_macro m141': {'gcode': '\nSET_HEATER_TEMPERATURE_SCALED HEATER=chamber TARGET={params.S|default(0)}', 'description': 'Sets chamber temperature.\nUsage: M141 [S<temp>]'}, 'gcode_macro _check_heater_params': {'gcode': '\n{% set HEATER = params.HEATER|lower %}\n{% set sensor = params.HEATER %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{% set sensor = "heater_generic " ~ HEATER %}\n{% if sensor not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% endif %}\n{% set settings = printer.configfile.settings[sensor] %}\n{% set scaled_heaters =\nprinter["gcode_macro set_heater_scaling"].scaled_heaters %}\n{% if HEATER is in scaled_heaters %}\n{% set scales = scaled_heaters[HEATER] %}\n{% else %}\n{% set scales = { "scale": 1.0, "bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[sensor].target} %}\n{% endif %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n\n{% if SCALE <= 0 %}\n{ action_raise_error("SCALE must be a positive value.") }\n{% elif MINIMUM < settings.min_temp or MINIMUM > settings.max_temp %}\n{ action_raise_error("MINIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MAXIMUM < settings.min_temp or MAXIMUM > settings.max_temp %}\n{ action_raise_error("MAXIMUM must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% elif MINIMUM >= MAXIMUM %}\n{ action_raise_error("MINIMUM must be less than MAXIMUM.") }\n{% elif "TARGET" in params and (params.TARGET|float < MINIMUM or\nparams.TARGET|float > MAXIMUM) %}\n{ action_raise_error("TARGET must be between %.1f and %.1f" |\nformat(settings.min_temp, settings.max_temp)) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro set_heater_scaling': {'gcode': '\n\n{% if "HEATER" is not in params %}\n{% set output = [] %}\n{% for h in scaled_heaters %}\n{% set dummy = output.append(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f"\n| format(h, scaled_heaters[h].scale, scaled_heaters[h].bump,\nscaled_heaters[h].minimum, scaled_heaters[h].maximum)) %}\n{% endfor %}\n{% if output %}}{action_respond_info(output|join(\'\\n\'))}{% endif %}\n{% else %}\n\n{% set HEATER = params.HEATER.lower() %}\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if HEATER is not in scaled_heaters %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, {"scale": 1.0,\n"bump": 0.0, "minimum": settings.min_temp,\n"maximum": settings.max_temp,\n"real_target": printer[HEATER].target}) %}\n{% endif %}\n_CHECK_HEATER_PARAMS{% for k in params %}{\' \'~k~\'=\'~params[k]}{% endfor %}\n{% set scales = scaled_heaters[HEATER] %}\n{% set SCALE = params.SCALE|default(scales.scale)|float %}\n{% set BUMP = params.BUMP|default(scales.bump)|float %}\n{% set MAXIMUM = params.MAXIMUM|default(scales.maximum)|float %}\n{% set MINIMUM = params.MINIMUM|default(scales.minimum)|float %}\n{% set TARGET = params.TARGET|default(scales.real_target)|float %}\n{% set dummy = scales.__setitem__("scale", SCALE) %}\n{% set dummy = scales.__setitem__("bump", BUMP) %}\n{% set dummy = scales.__setitem__("maximum", MAXIMUM) %}\n{% set dummy = scales.__setitem__("minimum", MINIMUM) %}\n{% set dummy = scales.__setitem__("real_target", TARGET) %}\n\n{% set settings = printer.configfile.settings[HEATER] %}\n{% if SCALE != 1.0 or BUMP != 0.0 or MINIMUM != settings.min_temp or\nMAXIMUM != settings.max_temp %}\n{% set dummy = scaled_heaters.__setitem__(HEATER, scales) %}\n{% else %}\n{% set dummy = scaled_heaters.__delitem__(HEATER) %}\n{% endif %}\nSET_HEATER_TEMPERATURE_SCALED HEATER={HEATER} TARGET={TARGET}\n{action_respond_info(\n"%s: Scale: %.2f Bump: %.1f Minimum:%.1f Maximum: %.1f Target: %.1f"\n| format(HEATER, SCALE, BUMP, MINIMUM, MAXIMUM, TARGET))}\n{% endif %}\n\n{% set dummy = None if True else "\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}', 'description': 'Sets scaling parameters for heater. If a new target temperature is\npassed it will be adjusted to the scaling parameters.\nUsage: SET_HEATER_SCALING [HEATER=<heater>] [SCALE=<scale_factor>]\n[BUMP=<degrees>] [MAXIMUM=<degrees>]\n[MINIMUM=<degrees>] [TARGET=<temp>]', 'variable_scaled_heaters': '{}'}, 'gcode_macro reset_heater_scaling': {'gcode': '\n{% if "HEATER" in params %}\n{% set HEATER = params.HEATER.lower() %}\n{% if HEATER not in printer.heaters.available_heaters %}\n{ action_raise_error("The value \'%s\' is not valid for HEATER"\n| format(HEATER)) }\n{% endif %}\n{% set settings = printer.configfile.settings[HEATER] %}\nSET_HEATER_SCALING HEATER={HEATER\n} SCALE=1.0 BUMP=0.0 MINIMUM={settings.min_temp\n} MAXIMUM={settings.max_temp}\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=set_heater_scaling VARIABLE=scaled_heaters VALUE={\n"{}"}\n{% endif %}', 'description': 'Clears scaling for heater (or all heaters if none specified).\nUsage: RESET_HEATER_SCALING [HEATER=<heater>]'}, 'gcode_macro _km_idle_timeout': {'gcode': '\n{% if printer.pause_resume.is_paused %}\n{action_respond_info("Extruder powered down on idle timeout.")}\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{\nprinter[printer.toolhead.extruder].target}"\nM104; Turn off extruder but leave the bed on.\n{% else %}\nTURN_OFF_HEATERS\nM107; turn off fan\nM84\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=ready\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _check_kinematic_limits': {'gcode': '\n{% set toolhead = printer.toolhead %}\n{% if params.X and (params.X|float < toolhead.axis_minimum.x or\nparams.X|float > toolhead.axis_maximum.x) %}\n{action_raise_error("X[%.3f] must be between %.3f and %.3f."\n| format(params.X|float, toolhead.axis_minimum.x,\ntoolhead.axis_maximum.x))}\n{% elif params.Y and (params.Y|float < toolhead.axis_minimum.y or\nparams.Y|float > toolhead.axis_maximum.y) %}\n{action_raise_error("Y[%.3f] must be between %.3f and %.3f."\n| format(params.Y|float, toolhead.axis_minimum.y,\ntoolhead.axis_maximum.y))}\n{% elif params.Z and (params.Z|float < toolhead.axis_minimum.z or\nparams.Z|float > toolhead.axis_maximum.z) %}\n{action_raise_error("Z[%.3f] must be between %.3f and %.3f."\n| format(params.Z|float, toolhead.axis_minimum.z,\ntoolhead.axis_maximum.z))}\n{% elif params.E and (params.E|float|abs > printer.configfile.settings[\n"extruder"].max_extrude_only_distance) %}\n{action_raise_error("E[%.4f] exceeds max_extrude_only_distance[%.4f]."\n| format(params.E|float|abs, printer.configfile.settings[\n"extruder"].max_extrude_only_distance))}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro lazy_home': {'gcode': '\n\nLIST_MACROS SILENT=1\n_LAZY_HOME_INNER {rawparams}', 'description': 'Homes the specified axes. If lazy is true, already homed axes\nare skipped.\nUsage: LAZY_HOME [LAZY=<1|0>] [AXES=<axes_string>]'}, 'gcode_macro _lazy_home_inner': {'gcode': '\n\n{% set G28 = (printer["gcode_macro list_macros"].macros.g28|\ndefault(["g28"],True))[-1] %}\n{% set axes = \'XYZ\'|select(\'in\', params.AXES|default("XYZ")|upper|list) %}\n{% if not axes %}\n{% set axes = \'XYZ\' %}\n{% endif %}\n{% if params.LAZY|default(1)|int %}\n{% set axes = axes|reject(\'in\', printer.toolhead.homed_axes|upper)|join() %}\n{% endif %}\n\n{% if axes %}\n_KM_PRINT_STATUS ACTION=PUSH_STATUS\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=homing\n{G28}{% for k in axes %}{\' \' ~ k}{% endfor %}\n_KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g28': {'gcode': "\n{% set axes = 'XYZ'|select('in', params)|join() %}\nLAZY_HOME LAZY={('O' in params)|int}{%if axes%} AXES={axes}{%endif%}", 'rename_existing': 'G28.6245197', 'description': 'Wraps the G28 command to add the Marlin "O" parameter so that\nalready homed axes will not be homed again. See the Klipper documentation on\nG28 for the behavior of the other parameters.\nUsage: G28 [O] ...'}, 'gcode_macro before_layer_change': {'gcode': '\n{% set height = params.HEIGHT|default(printer.toolhead.position.z)|float %}\n{% set layer = params.LAYER|default(-1)|int + 1 %}\n{% if height >= 0.0 and layer >= 0 %}\nSET_PRINT_STATS_INFO CURRENT_LAYER="{layer}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{height}"\n{% if printer["gcode_macro _km_layer_run"].clearance_z < height %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{\nheight}"\n{% endif %}\n{% endif %}', 'description': 'Add this to the "before layer change" input box in the slicer.\nUsage: BEFORE_LAYER_CHANGE HEIGHT=<current_height> LAYER=<current_layer>'}, 'gcode_macro after_layer_change': {'gcode': '\n_KM_LAYER_RUN', 'description': 'Add this to the "after layer change" input box in the slicer.\nUsage: AFTER_LAYER_CHANGE'}, 'gcode_macro gcode_at_layer': {'gcode': '\n{% set tot_layers = printer.print_stats.info.total_layer %}\n{% if params|length > 0 %}\n_KM_CHECK_IS_PRINTING\n\n{% set CANCEL = params.CANCEL|default(0)|int != 0 %}\n{% set COMMAND = params.COMMAND|default(None) %}\n{% if COMMAND %}\n{% set COMMAND = COMMAND.lstrip().split(None, 1) %}\n{% set COMMAND = " ".join([COMMAND[0]|upper] + COMMAND[1:]) %}\n{% endif %}\n\n{% if "LAYER" in params %}\n{% set cmd_container = "commands_layer" %}\n{% set cur_layer = printer.print_stats.info.current_layer|int %}\n{% if "HEIGHT" in params %}\n{action_raise_error("Conflicting HEIGHT and LAYER arguments provided.")}\n{% elif params.LAYER|string|lower == "next" %}\n{% set LAYER = cur_layer + 1 %}\n{% else %}\n{% set LAYER = params.LAYER|int %}\n{% endif %}\n{% if LAYER <= cur_layer %}\n{action_raise_error("LAYER[%i] must be above current print layer[%i]."\n| format(LAYER, cur_layer))}\n{% elif tot_layers and LAYER > tot_layers %}\n{action_raise_error("LAYER[%i] must not be above top layer[%i]."\n| format(LAYER, tot_layers))}\n{% endif %}\n{% set key = LAYER %}\n\n{% elif "HEIGHT" in params %}\n{% set cmd_container = "commands_height" %}\n{% set HEIGHT = params.HEIGHT|float %}\n{% set cur_height = printer["gcode_macro _km_layer_run"].cur_height %}\n{% if HEIGHT <= cur_height %}\n{action_raise_error(\n"HEIGHT[%.3f] must be above current print height[%.3f].")\n| format(HEIGHT, cur_height)}\n{% elif HEIGHT >= printer.toolhead.axis_maximum.z %}\n{action_raise_error(\n"HEIGHT[%.3f] must be below maximum Z height[%.3f].")\n| format(HEIGHT, printer.toolhead.axis_maximum.z)}\n{% endif %}\n{% set key = HEIGHT %}\n\n{% else %}\n{action_raise_error("No HEIGHT or LAYER argument provided.")}\n{% endif %}\n\n{% set commands = printer["gcode_macro _km_layer_run"][cmd_container] %}\n{% if key not in commands and not CANCEL %}\n{% set dummy = commands.__setitem__(key, []) %}\n{% endif %}\n\n{% if CANCEL %}\n{% if key in commands %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{% if COMMAND %}\n{% set dummy = commands[key].remove(COMMAND) %}\n{% if commands[key]|length == 0 %}\n{% set dummy = commands.__delitem__(key) %}\n{% endif %}\n{action_respond_info("Cancelled %s %s:\\n* %s" |\nformat("layer" if k is integer else "height",\npos, COMMAND))}\n{% else %}\n{% set dummy = commands.__delitem__(key) %}\n{action_respond_info("Cancelled all commands at %s %s." |\nformat("layer" if k is integer else "height",\npos))}\n{% endif %}\n{% endif %}\n{% elif not COMMAND %}\n{action_raise_error("No COMMAND argument provided.")}\n{% elif COMMAND in commands[key] %}\n{action_raise_error("Duplicate command previously scheduled.")}\n{% else %}\n{% set dummy = commands[key].append(COMMAND) %}\n{% set pos = ("%i"|format(key)) if key is integer else\n("%.3fmm"|format(key)) %}\n{action_respond_info("%s %s:\\n* %s" |\nformat("layer" if key is integer else "height",\npos, COMMAND))}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE={cmd_container} VALUE="{\ncommands|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT\n\n\n{% else %}\n{% set output = [] %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("layer %i:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{% set commands = printer["gcode_macro _km_layer_run"].commands_height %}\n{% for key in commands|list|sort %}\n{% set dummy = output.append("height %.3fmm:" | format(key)) %}\n{% for c in commands[key] %}\n{% set dummy = output.append("* %s" | format(c)) %}\n{% endfor %}\n{% endfor %}\n{action_respond_info(output|join(\'\\n\'))}\n{% endif %}', 'description': 'Schedules the specified g-code command to be run at the specified\nlayer. LAYER=next will cause the command to run at the next layer change.\nUsage: GCODE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } COMMAND=<gcode>\n[CANCEL=<0|1>]'}, 'gcode_macro _km_layer_run': {'gcode': '\n{% set cur_layer = printer.print_stats.info.current_layer %}\n{% for key in commands_layer | select("<=", cur_layer) | sort %}\n{action_respond_info("Executing scheduled commands at layer %d:\\n%s" |\nformat(key, commands_layer[key]|join(\'\\n\')))}\n{% for c in commands_layer[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_layer.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{\ncommands_layer|replace(\'\\"\',\'\\\\\\"\')}"\n{% for key in commands_height | select("<=", cur_height) | sort %}\n{action_respond_info("Executing scheduled commands at height %.3f:\\n%s" |\nformat(key, commands_height[key]|join(\'\\n\')))}\n{% for c in commands_height[key] %}\n{c}\n{% endfor %}\n{% set dummy = commands_height.__delitem__(key) %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{\ncommands_height|replace(\'\\"\',\'\\\\\\"\')}"\n_UPDATE_LAYER_COMPAT', 'description': 'Runs pending commands for the current layer change.\nUsage: _KM_LAYER_RUN', 'variable_cur_height': '0.0', 'variable_clearance_z': '0.0', 'variable_commands_layer': '{}', 'variable_commands_height': '{}'}, 'gcode_macro init_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{params.LAYERS|int + 1}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: INIT_LAYER_GCODE LAYERS=<num>'}, 'gcode_macro _reset_layer_gcode': {'gcode': '\nSET_PRINT_STATS_INFO TOTAL_LAYER="{0}" CURRENT_LAYER="{0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=cur_height VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=clearance_z VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears scheduled gcode commands and state for all layers.\nUsage: _RESET_LAYER_GCODE'}, 'gcode_macro cancel_all_layer_gcode': {'gcode': '\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_layer VALUE="{{}}"\nSET_GCODE_VARIABLE MACRO=_km_layer_run VARIABLE=commands_height VALUE="{{}}"\n_UPDATE_LAYER_COMPAT', 'description': 'Clears all scheduled gcode commands.\nUsage: CANCEL_ALL_LAYER_GCODE'}, 'gcode_macro _update_layer_compat': {'gcode': '\n{% set next_layer = printer.print_stats.info.current_layer|int + 1 %}\n{% set commands_layer = printer["gcode_macro _km_layer_run"].commands_layer %}\n{% set keys = commands_layer | sort(reverse=True) %}\n\n{% set pause_next_layer = {\'enable\': False, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer.call} %}\n{% if pause_next_layer.call in commands_layer[next_layer] | default([]) %}\n{% set dummy = pause_next_layer.__setitem__(\'enable\', True) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{\npause_next_layer|replace(\'\\"\',\'\\\\\\"\') }"\n\n\n{% set pause_at_layer = {\'enable\': False, \'layer\': 0, \'call\':\nprinter[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer.call} %}\n{% if pause_next_layer.enable and\npause_next_layer.call == pause_at_layer.call %}\n{% set keys = keys | reject("==", next_layer) %}\n{% endif %}\n\n\n\n\n{% for key in keys %}\n{% if pause_at_layer.call in commands_layer[key] %}\n{% set dummy = pause_at_layer.__setitem__(\'enable\', True) %}\n{% set dummy = pause_at_layer.__setitem__(\'layer\', key) %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{\npause_at_layer|replace(\'\\"\',\'\\\\\\"\') }"', 'description': 'G-Code macro'}, 'gcode_macro pause_next_layer': {'gcode': '\n_CHECK_KINEMATIC_LIMITS{% for k in params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER LAYER=NEXT COMMAND="PAUSE{% for k in params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nnext layer change. See PAUSE for additional arguments.\nUsage: PAUSE_NEXT_LAYER ...'}, 'gcode_macro pause_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_KINEMATIC_LIMITS{% for k in filtered_params%}{\' \' ~k~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="PAUSE{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule the current print to pause at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. See PAUSE for additional arguments.\nUsage: PAUSE_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro speed_at_layer': {'gcode': '\n{% set SPEED = params.SPEED|default(0)|int %}\n{% if SPEED < 1 or SPEED > 500 %}\n{action_raise_error("SPEED[%i] parameter between 1 and 500 is required."\n% SPEED)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M220 S{SPEED|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SPEED|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a feedrate adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (SPEED parameter behaves the same as the M220 S parameter.)\nUsage: SPEED_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } SPEED=<percentage>'}, 'gcode_macro flow_at_layer': {'gcode': '\n{% set FLOW = params.FLOW|default(0)|int %}\n{% if FLOW < 1 or FLOW > 500 %}\n{action_raise_error("FLOW[%i] parameter between 1 and 500 is required."\n% FLOW)}\n{% endif %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor %} COMMAND="M221 S{FLOW|int}"\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.FLOW|default(percentage)|int %}\n" %}', 'description': 'Convenience macro to schedule a flow percentage adjustment at the\nspecified layer change. LAYER=next will cause the command to run at the next\nlayer change. (FLOW parameter behaves the same as the M221 S parameter.)\nUsage: FLOW_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } FLOW=<percentage>'}, 'gcode_macro fan_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0)|int %}\n{% set dummy = params.MAXIMUM|default(0)|int %}\n{% set dummy = params.MINIMUM|default(255)|int %}\n{% set dummy = params.SPEED|default(current speed)|int %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n{% if filtered_params|length == 0 %}\n{action_raise_error("No fan parameters provided.")}\n{% endif %}\n_CHECK_FAN_PARAMS{% for k in filtered_params %}{\' \'~k~\'=\'~params[k]\n}{% endfor %}\nGCODE_AT_LAYER {% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_FAN_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\' ~ params[k]}{% endfor %}"', 'description': 'Convenience macro to schedule a fan adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_FAN_SCALING for additional arguments.\nUsage: FAN_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro heater_at_layer': {'gcode': '\n\n{% set dummy = None if True else "\n{% set dummy = params.LAYER|default(layer number)|float %}\n{% set dummy = params.HEIGHT|default(Z height)|int %}\n{% set dummy = params.HEATER|default(e.g. extruder) %}\n{% set dummy = params.SCALE|default(1.0)|float %}\n{% set dummy = params.BUMP|default(0.0)|float %}\n{% set dummy = params.MAXIMUM|default(max_temp)|float %}\n{% set dummy = params.MINIMUM|default(min_temp)|float %}\n{% set dummy = params.TARGET|default(current target)|float %}\n" %}\n{% set filtered_params = params|reject(\'in\',[\'HEIGHT\',\'LAYER\'])|list|sort %}\n_CHECK_HEATER_PARAMS{% for k in filtered_params%}{\' \' ~ k ~ \'=\' ~ params[k]\n}{% endfor %}\nGCODE_AT_LAYER{% for k in params|select(\'in\',[\'HEIGHT\',\'LAYER\'])|list %}{\n\' \' ~ k ~ \'=\' ~ params[k] }{% endfor\n%} COMMAND="SET_HEATER_SCALING{% for k in filtered_params %}{\n\' \' ~ k ~ \'=\\\\\\"\' ~ params[k]|replace(\'\\\\\',\'\\\\\\\\\')|replace(\'\\\'\',\'\\\\\\\'\')\n|replace(\'\\"\',\'\\\\\\"\') ~ \'\\\\\\"\'\n}{% endfor %}"', 'description': 'Convenience macro to schedule a heater adjustment at the specified\nlayer change. LAYER=next will cause the command to run at the next layer\nchange. See SET_HEATER_SCALING for additional arguments.\nUsage: HEATER_AT_LAYER { HEIGHT=<pos> | LAYER=<layer> } ...'}, 'gcode_macro park': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set LAZY = params.LAZY|default(1)|int %}\n{% if printer.toolhead.homed_axes != "xyz" %}\n{% if LAZY %}\nLAZY_HOME\n{% else %}\n{action_raise_error("Must home axes first.")}\n{% endif %}\n{% endif %}\n\n\n{% set P = (params.P|default(2))|int %}\n{% set X = params.X|default(km.park_x)|float %}\n{% set Y = params.Y|default(km.park_y)|float %}\n{% set Z = params.Z|default(km.park_z)|float %}\n\nM400\n_CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"\n_PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"\n\n{% set dummy = None if True else "\n{% set dummy = params.P|default(mode=<0|1|2>)|int %}\n{% set dummy = params.X|default(X position)|int %}\n{% set dummy = params.Y|default(Y position)|int %}\n{% set dummy = params.Z|default(Z position)|int %}\n" %}', 'description': 'Park the toolhead\nUsage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]'}, 'gcode_macro _park_inner': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% set travel_speed_xy = km.travel_speed_xy %}\n{% set travel_speed_z = km.travel_speed_z %}\n\n{% set position = printer.gcode_move.gcode_position %}\n{% set origin = printer.gcode_move.homing_origin%}\n\n\n\n{% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,\nposition.z) | max %}\n{% set P = params.P|int %}\n{% set X = params.X|float - origin.x %}\n{% set Y = params.Y|float - origin.y %}\n{% set Z = params.Z|float %}\n{% set LAZY = params.LAZY|int %}\n\n\n{% if P == 0 %}\n{% if clearance_z > Z %}\n{% set Z = clearance_z %}\n{% endif %}\n{% elif P == 1 %}\n{% set Z = Z - origin.z %}\n{% elif P == 2 %}\n{% set Z = Z + clearance_z %}\n{% else %}\n{action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |\nformat(P)) }\n{% endif %}\n\n\n{% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,\nprinter.toolhead.axis_minimum.z - origin.z)|max %}\n\n\n{% if (not LAZY) or P != 2 or X != position.x or Y != position.y\nor Z < clearance_z %}\nSAVE_GCODE_STATE NAME=_KM_PARK\nG90\nG0 Z{Z} F{travel_speed_z}\nG0 X{X} Y{Y} F{travel_speed_xy}\nRESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro g27': {'gcode': '\n\nPARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{\n\' \'~k~\'="\'~params[k]~\'"\'\n}{% endfor %}', 'description': 'Parks the toolhead.\nUsage: G27 [P=<0|1|2>]'}, 'gcode_macro m600': {'gcode': '\nPAUSE B="{0}" P=2{% for k in params|select("in", "EXYZ") %}{\n\' \'~k~\'="\'~params[k]~\'"\'}{% endfor %}\nUNLOAD_FILAMENT{% if \'U\' in params %} LENGTH={params.U}{% endif\n%} BEEPS="{params.B|default(10)|int}"\n{% if \'R\' in params %}M109 S{params.R}{% endif %}', 'description': 'Pauses the current print.\nUsage: M600 [B<beeps>] [E<pos>] [L<pos>] [R<temp>] [U<pos>] [X<pos>] [Y<pos>]\n[Z<pos>]'}, 'gcode_macro m601': {'gcode': '\nPAUSE', 'description': 'Pauses the current print.\nUsage: M601'}, 'gcode_macro m602': {'gcode': '\nRESUME', 'description': 'Resumes the currently paused print.\nUsage: M602'}, 'gcode_macro m24': {'gcode': '\n{% if printer.pause_resume.is_paused %}\nRESUME\n{% else %}\nM24.6245197\n{% endif %}', 'rename_existing': 'M24.6245197', 'description': 'G-Code macro'}, 'gcode_macro m25': {'gcode': '\nPAUSE', 'rename_existing': 'M25.6245197', 'description': 'G-Code macro'}, 'gcode_macro clear_pause': {'gcode': '\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"\nSET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_extruder_temp VALUE="{0}"\n_KM_CLEAR_PAUSE', 'rename_existing': '_KM_CLEAR_PAUSE', 'description': 'Clears the current pause state.\nUsage: CLEAR_PAUSE'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro _km_save_state': {'gcode': '\n{% if params.SAVE|int %}\n{% set dummy = state_set.__setitem__(params.NAME, None) %}\n{% else %}\n{% set dummy = state_set.__delitem__(params.NAME) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{\n1 if state_set|length > 0 else 0 }"', 'description': 'Tracks gcode state.', 'variable_state_set': '{}', 'variable_is_ephemeral': '0'}, 'gcode_macro save_gcode_state': {'gcode': '\n_KM_SAVE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=1', 'rename_existing': '_KM_SAVE_GCODE_STATE', 'description': 'Wraps SAVE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro restore_gcode_state': {'gcode': '\n_KM_RESTORE_GCODE_STATE {rawparams}\n{% set NAME = params.NAME|default("default") %}\n_km_save_state NAME={NAME} SAVE=0', 'rename_existing': '_KM_RESTORE_GCODE_STATE', 'description': 'Wraps RESTORE_GCODE_STATE to track persistence state.\nUsage: See Klipper documentation'}, 'gcode_macro _abort_on_gcode_state': {'gcode': '\n{% set save_state = printer["gcode_macro _km_save_state"] %}\n{% if save_state.is_ephemeral %}\n{action_raise_error("Encountered unexpected save state " +\nsave_state.state_set|list|sort|string)}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _km_print_status': {'gcode': '\n{% set ACTION = params.ACTION|trim|upper %}\n{% set STATUS = params.STATUS|default("")|trim|lower %}\n\n\n{% if ACTION == "ADD_EVENT" %}\n{% set COMMAND = params.COMMAND %}\n{% set ARGS = params.ARGS|default(0)|int != 0 %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|\nselect()|unique|list %}\n\n{% set STATUSES = STATUS.split(\',\')|map(\'trim\')|list %}\n{% for s in (STATUSES if STATUSES[0] != \'all\' else status_list) %}\n{% if not s in command_list %}\n{% set dummy = command_list.__setitem__(s,[]) %}\n{% endif %}\n{% set dummy = command_list[s].append({\'cmd\':COMMAND, \'args\':ARGS,\n\'type\':TYPE, \'when\':WHEN,\n\'filt_e\':FILTER_ENTER,\n\'filt_l\':FILTER_LEAVE}) %}\n{% endfor %}\n\n\n{% elif ACTION == "CHANGE" %}\n{% if params.RESET_STACK|default(0)|int %}\n{% for dummy in range(status_stack|length) %}\n{% set dummy = status_stack.pop() %}\n{% endfor %}\n\n\n{% elif STATUS == "pop_status" %}\n{% set STATUS = (status_stack|default([\'ready\'], True)).pop() %}\n{% endif %}\n\n{% if STATUS not in status_list %}\n{action_raise_error("Status \'%s\' not valid."|format(STATUS))}\n{% endif %}\n\n{% if STATUS != last_status %}\n{% set is_printing =\nprinter["gcode_macro print_start_set"].print.PRINT_START_PHASE|\ndefault("")|length != 0 %}\n{% set print_states = (\'ALWAYS\', \'PRINTING\' if is_printing else \'IDLE\') %}\n\n{% for c in command_list[last_status]|default([]) %}\n{% if c.type in (\'BOTH\',\'LEAVE\') and c.when in print_states and\n(not c.filt_l or STATUS in c.filt_l) %}\nM400\n{c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\n\n{% for c in command_list[STATUS]|default([]) %}\n{% if c.type in (\'BOTH\',\'ENTER\') and c.when in print_states and\n(not c.filt_e or STATUS in c.filt_e) %}\nM400\n{c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]\n} LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}\n{% endif %}\n{% endfor %}\nSET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="\'{\nSTATUS}\'"\n{% endif %}\n\n\n{% elif ACTION == "PUSH_STATUS" %}\n{% set dummy = status_stack.append(last_status) %}\n\n\n{% else %}\n{action_raise_error("Action \'%s\' not valid."|format(ACTION))}\n{% endif %}', 'description': 'G-Code macro', 'variable_last_status': "'none'", 'variable_status_stack': '[]', 'variable_command_list': '{}', 'variable_status_list': "[\n'ready',\n'filament_load',\n'filament_unload',\n'bed_heating',\n'chamber_heating',\n'homing',\n'leveling_gantry',\n'calibrating_z',\n'meshing',\n'extruder_heating',\n'purging',\n'printing',\n'pausing',\n'cancelling',\n'completing',\n]"}, 'gcode_macro gcode_on_print_status': {'gcode': '\n{% set STATUS = (params.STATUS|lower).split(\',\')|map(\'trim\')|list %}\n{% set TYPE = params.TYPE|default(\'ENTER\')|trim|upper %}\n{% set WHEN = params.WHEN|default(\'PRINTING\')|trim|upper %}\n{% set FILTER_ENTER =\n(params.FILTER_ENTER|default("")|trim|lower).split(\',\')|select()|list %}\n{% set FILTER_LEAVE =\n(params.FILTER_LEAVE|default("")|trim|lower).split(\',\')|select()|list %}\n\n\n{% set status_list = printer["gcode_macro _km_print_status"].status_list %}\n{% for s in STATUS %}\n{% if not (s in status_list or s == \'all\' and STATUS|length == 1) %}\n{action_raise_error("STATUS parameter \'%s\' not valid."|format(s))}\n{% endif %}\n{% endfor %}\n\n{% if TYPE not in (\'ENTER\', \'LEAVE\', \'BOTH\') %}\n{action_raise_error("TYPE paramater \'%s\' not valid."|format(TYPE))}\n{% elif WHEN not in (\'PRINTING\', \'IDLE\', \'ALWAYS\') %}\n{action_raise_error("WHEN parameter \'%s\' not valid."|format(WHEN))}\n{% elif TYPE == \'ENTER\' and FILTER_LEAVE %}\n{action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}\n{% elif TYPE == \'LEAVE\' and FILTER_ENTER %}\n{action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}\n{% endif %}\n{% for f in FILTER_ENTER %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_ENTER parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n{% for f in FILTER_LEAVE %}\n{% if f not in status_list %}\n{action_raise_error("FILTER_LEAVE parameter \'%s\' not valid."|format(f))}\n{% endif %}\n{% endfor %}\n\n\n_KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}', 'description': 'Adds a gcode command for a status event.\nUsage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]\n[WHEN=<PRINTING|IDLE|ALWAYS>]\n[TYPE=<ENTER|LEAVE|BOTH>]\n[FILTER_ENTER=<status list>]\n[FILTER_LEAVE=<status list>]'}, 'gcode_macro m201': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if \'X\' in params or \'Y\' in params %}\n{% set accel = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum accelleration.\nUsage: M201 [X<accel>] [Y<accel>]', 'variable_max_accel': '1.7976931348623157e+308'}, 'gcode_macro m203': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\n{% set velocity = (params.X|default(params.Y)|float,\nparams.Y|default(params.X)|float)|min %}\nSET_VELOCITY_LIMIT VELOCITY="{velocity}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets maximum velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m205': {'gcode': '\n{% if \'X\' in params or \'Y\' in params %}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{\n(params.X|default(0)|float, params.Y|default(0)|float)|min}"\n{% else %}\nSET_VELOCITY_LIMIT\n{% endif %}', 'description': 'Sets square corner velocity.\nUsage: M203 [X<velocity>] [Y<velocity>]'}, 'gcode_macro m900': {'gcode': '\n{% set km = printer["gcode_macro _km_globals"] %}\n{% if km.pressure_advance_scale > 0.0 %}\n{% set extruder = "extruder" ~ params.T|replace(\'0\', \'\')\nif "T" in params else printer.toolhead.extruder %}\n{% if \'K\' in params %}\nSET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{\nparams.K|float * km.pressure_advance_scale}"\n{% endif %}\n{% endif %}', 'description': 'Sets pressure advance.\nUsage: M900 [K<advance>] [T<extruder_index>]'}, 'gcode_macro _reset_velocity_limits': {'gcode': '\nSET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"', 'description': 'Sets maximum accelleration.\nUsage: M204 [S<accel>] [P<accel> T<accel>]'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:44:37,151 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:44:37,151 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:44:37,151 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:44:37,151 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:44:37,151 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:44:37,152 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:44:37,171 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:44:37,174 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:44:37,558 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:44:37,578 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:44:37,581 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:44:37,592 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:44:37,594 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:44:37,594 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:44:37,594 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:44:37,595 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:44:37,596 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:44:37,596 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:44:39,624 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:44:39,624 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:44:39,626 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:44:39,706 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:44:39,723 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:44:39,730 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:44:39,775 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:44:40,578 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _km_print_status:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro print_start_set'
2023-10-17 14:55:14,226 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:55:14,227 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:55:14,228 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:55:14,230 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:55:14,303 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:55:17,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:55:17,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:55:17,207 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:55:17,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:55:17,217 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:55:17,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:55:17,244 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:55:17,247 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:55:17,250 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:55:17,251 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:55:17,251 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:55:17,251 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:55:17,251 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:55:17,251 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:55:17,265 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:55:17,267 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:55:17,527 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:55:17,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:55:17,548 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:55:17,557 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:55:17,559 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:55:17,559 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:55:17,559 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:55:17,561 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:55:17,562 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:55:17,562 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:55:18,494 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:55:18,494 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:55:18,497 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:55:18,563 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:55:18,570 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:55:18,575 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:55:18,604 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:55:51,265 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 14:55:51,265 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:55:51,267 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:55:51,270 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:55:51,349 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:55:54,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:55:54,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:55:54,209 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:55:54,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:55:54,219 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:55:54,229 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:55:54,404 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:55:54,405 [screen.py:init_printer()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:55:54,405 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:55:54,406 [printer.py:reinit()] - # Extruders: 0
2023-10-17 14:55:54,406 [printer.py:reinit()] - # Temperature devices: 0
2023-10-17 14:55:54,406 [printer.py:reinit()] - # Fans: 0
2023-10-17 14:55:54,406 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:55:54,406 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:55:54,417 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:55:54,418 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:55:54,658 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2023-10-17 14:55:54,659 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:55:54,659 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:55:54,660 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:55:54,661 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-17 14:55:54,661 [printer.py:change_state()] - Adding callback for state: error
2023-10-17 14:55:54,663 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:55:54,712 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:56:30,927 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-17 14:56:30,928 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 14:56:30,929 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 14:56:30,931 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:56:30,997 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 14:56:34,198 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:56:34,207 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 14:56:34,209 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 14:56:34,217 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 14:56:34,218 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 14:56:34,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 14:56:34,245 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 14:56:34,247 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 14:56:34,250 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 14:56:34,250 [printer.py:reinit()] - # Extruders: 1
2023-10-17 14:56:34,251 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 14:56:34,251 [printer.py:reinit()] - # Fans: 3
2023-10-17 14:56:34,251 [printer.py:reinit()] - # Output pins: 0
2023-10-17 14:56:34,251 [printer.py:reinit()] - # Leds: 0
2023-10-17 14:56:34,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 14:56:34,264 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 14:56:34,527 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 14:56:34,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 14:56:34,548 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 14:56:34,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 14:56:34,561 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 14:56:34,562 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 14:56:34,562 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 14:56:34,563 [screen.py:init_printer()] - Printer initialized
2023-10-17 14:56:34,563 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 14:56:34,563 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 14:56:35,243 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 14:56:35,243 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 14:56:35,248 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:56:35,316 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 14:56:35,322 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 14:56:35,329 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 14:56:35,360 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 14:56:56,563 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 14:56:56,564 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 14:56:56,583 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 14:56:56,729 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 14:56:56,734 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 14:56:56,743 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32098747
2023-10-17 14:56:56,750 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 15:00:51,670 [screen.py:show_popup_message()] - error: Error on 'M140 S': unable to parse
2023-10-17 15:00:51,749 [screen.py:show_popup_message()] - error: Error on 'M140 S': unable to parse
2023-10-17 15:00:51,765 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 15:00:52,939 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 15:00:52,939 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 15:06:16,929 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 15:06:16,929 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 15:06:16,929 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 15:06:16,931 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 15:06:16,973 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 15:06:20,196 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 15:06:20,204 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 15:06:20,205 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 15:06:20,213 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 15:06:20,215 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 15:06:20,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 15:06:20,247 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 15:06:20,250 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nG1 Z5 F3000\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 15:06:20,253 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 15:06:20,253 [printer.py:reinit()] - # Extruders: 1
2023-10-17 15:06:20,253 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 15:06:20,253 [printer.py:reinit()] - # Fans: 3
2023-10-17 15:06:20,254 [printer.py:reinit()] - # Output pins: 0
2023-10-17 15:06:20,254 [printer.py:reinit()] - # Leds: 0
2023-10-17 15:06:20,267 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 15:06:20,268 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 15:06:20,528 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 15:06:20,548 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 15:06:20,552 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 15:06:20,561 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 15:06:20,563 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 15:06:20,563 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 15:06:20,563 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 15:06:20,565 [screen.py:init_printer()] - Printer initialized
2023-10-17 15:06:20,565 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 15:06:20,565 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 15:06:21,247 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 15:06:21,247 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 15:06:21,251 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 15:06:21,324 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 15:06:21,332 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 15:06:21,337 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 15:06:21,365 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 15:06:26,754 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 15:06:26,755 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 15:06:26,764 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 15:06:26,876 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 15:06:26,881 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 15:06:26,889 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32098747
2023-10-17 15:06:26,896 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 15:10:16,335 [screen.py:show_popup_message()] - error: Error on 'M190 S': unable to parse
2023-10-17 15:10:16,377 [screen.py:show_popup_message()] - error: Error on 'M190 S': unable to parse
2023-10-17 15:10:17,672 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 15:10:21,179 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 15:10:21,179 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 15:17:40,193 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 15:20:21,115 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 15:20:21,128 [screen.py:wake_screen()] - Screen wake up
2023-10-17 15:20:21,526 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-17 16:20:22,201 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 16:35:00,940 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-17 16:35:00,941 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 16:35:00,941 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 16:35:00,941 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 16:35:00,974 [screen.py:wake_screen()] - Screen wake up
2023-10-17 16:35:01,379 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:35:01,431 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 16:35:05,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 16:35:05,209 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 16:35:05,211 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 5, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 16:35:05,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 16:35:05,220 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 16:35:05,229 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 16:35:05,453 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 16:35:05,456 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 16:35:05,459 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 16:35:05,459 [printer.py:reinit()] - # Extruders: 1
2023-10-17 16:35:05,459 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 16:35:05,459 [printer.py:reinit()] - # Fans: 3
2023-10-17 16:35:05,459 [printer.py:reinit()] - # Output pins: 0
2023-10-17 16:35:05,460 [printer.py:reinit()] - # Leds: 0
2023-10-17 16:35:05,472 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 16:35:05,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 16:35:05,748 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 16:35:05,775 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 16:35:05,779 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 16:35:05,790 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 16:35:05,792 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 16:35:05,792 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 16:35:05,792 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 16:35:05,794 [screen.py:init_printer()] - Printer initialized
2023-10-17 16:35:05,794 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-17 16:35:05,795 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 16:35:05,798 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:35:05,871 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 16:35:05,877 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 16:35:05,883 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 16:35:05,911 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 16:36:55,484 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HOMING"
2023-10-17 16:36:55,565 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_shhhh.png. Retrying in 6 seconds
2023-10-17 16:36:55,565 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_shhhh-32x32.png. Retrying in 6 seconds
2023-10-17 16:36:55,566 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 16:36:55,566 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 16:36:55,569 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:36:55,688 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 16:36:55,693 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 16:36:55,701 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2023-10-17 16:36:55,701 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 16:36:55,701 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-17 16:36:55,738 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32100364
2023-10-17 16:36:55,745 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 16:37:13,056 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HEATING"
2023-10-17 16:42:11,634 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-17 16:42:11,635 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-17 16:42:11,685 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:42:11,754 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 16:42:16,751 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-17 16:42:16,752 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-17 16:42:16,752 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-17 16:42:16,755 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:42:16,845 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-17 16:42:20,196 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 16:42:20,205 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-17 16:42:20,206 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'authorization', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 4, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-17 16:42:20,214 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-17 16:42:20,215 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-17 16:42:20,224 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-17 16:42:20,244 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-17 16:42:20,246 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nM106 S255\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-17 16:42:20,250 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-17 16:42:20,250 [printer.py:reinit()] - # Extruders: 1
2023-10-17 16:42:20,250 [printer.py:reinit()] - # Temperature devices: 1
2023-10-17 16:42:20,250 [printer.py:reinit()] - # Fans: 3
2023-10-17 16:42:20,250 [printer.py:reinit()] - # Output pins: 0
2023-10-17 16:42:20,250 [printer.py:reinit()] - # Leds: 0
2023-10-17 16:42:20,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-17 16:42:20,264 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-17 16:42:20,527 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-17 16:42:20,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-17 16:42:20,547 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-17 16:42:20,557 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-17 16:42:20,558 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-17 16:42:20,559 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-17 16:42:20,559 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 16:42:20,560 [screen.py:init_printer()] - Printer initialized
2023-10-17 16:42:20,561 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-17 16:42:20,561 [printer.py:change_state()] - Adding callback for state: startup
2023-10-17 16:42:20,996 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-17 16:42:20,996 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 16:42:20,999 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:42:21,065 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 16:42:21,072 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 16:42:21,079 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 16:42:21,109 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 16:42:29,265 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 16:42:29,265 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 16:42:29,286 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 16:42:29,431 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 16:42:29,436 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 16:42:29,444 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_shhhh.gcode Size: 32100364
2023-10-17 16:42:29,451 [job_status.py:show_file_thumbnail()] - CE3E3V2_shhhh.gcode
2023-10-17 17:35:02,194 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 18:16:30,789 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 18:16:30,825 [screen.py:wake_screen()] - Screen wake up
2023-10-17 18:55:03,921 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-17 18:55:04,755 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-17 18:55:04,755 [job_status.py:cancel_confirm()] - Canceling print
2023-10-17 18:55:04,756 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-17 18:55:04,759 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-17 18:55:05,234 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-17 18:55:07,989 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 18:55:07,989 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 18:55:15,028 [job_status.py:close_panel()] - Closing job_status panel
2023-10-17 18:55:15,032 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 18:55:15,122 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-17 18:55:15,128 [main_menu.py:add_device()] - Adding device: extruder
2023-10-17 18:55:15,134 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-17 18:55:15,162 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 18:55:16,190 [screen.py:_load_panel()] - Loading panel: move
2023-10-17 18:55:16,268 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-17 18:55:17,670 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-17 18:55:17,672 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-17 18:55:18,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2023-10-17 18:55:18,164 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-17 18:56:47,718 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 18:56:47,756 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 18:57:07,720 [screen.py:_load_panel()] - Loading panel: temperature
2023-10-17 18:57:07,736 [temperature.py:add_device()] - Adding device: extruder
2023-10-17 18:57:07,747 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-17 18:57:07,758 [temperature.py:select_heater()] - Selecting extruder
2023-10-17 18:57:07,760 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-17 18:57:07,793 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2023-10-17 18:57:09,092 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-17 18:57:09,905 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 18:57:09,905 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 18:57:09,905 [temperature.py:set_temperature()] - name match extruder
2023-10-17 18:57:09,905 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-17 19:07:10,667 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-17 19:57:10,189 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-17 20:13:13,832 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-17 20:13:13,857 [screen.py:wake_screen()] - Screen wake up
2023-10-17 20:13:16,109 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:13:16,128 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 20:13:24,643 [screen.py:_load_panel()] - Loading panel: extrude
2023-10-17 20:13:24,735 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 20:13:24,738 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-17 20:13:24,740 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-17 20:13:27,453 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-17 20:13:48,503 [screen.py:show_popup_message()] - error: Extrude only move too long (-300.000mm vs 150.000mm)
2023-10-17 20:13:48,568 [screen.py:show_popup_message()] - error: Extrude only move too long (-300.000mm vs 150.000mm)
2023-10-17 20:14:04,570 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-17 20:14:06,221 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 20:14:06,221 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-17 20:14:06,221 [temperature.py:set_temperature()] - name match extruder
2023-10-17 20:14:06,221 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-17 20:14:07,041 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:14:07,061 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 20:14:07,063 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-17 20:14:51,722 [extrude.py:change_distance()] - ### Distance 25
2023-10-17 20:14:53,169 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:14:53,171 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F120'}
2023-10-17 20:15:12,506 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:12,507 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F120'}
2023-10-17 20:15:27,658 [extrude.py:change_speed()] - ### Speed 25
2023-10-17 20:15:33,338 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:33,339 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:38,890 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:38,891 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:41,211 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:41,214 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:43,062 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:43,063 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:44,942 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:44,943 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:46,277 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:46,279 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:48,082 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:48,085 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:49,790 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:49,794 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:51,558 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:51,561 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:53,486 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:53,490 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:55,390 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:55,391 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:57,138 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:57,139 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:15:59,030 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:15:59,031 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:16:02,394 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:16:02,395 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-17 20:18:58,062 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:18:58,092 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 20:18:59,310 [screen.py:_load_panel()] - Loading panel: print
2023-10-17 20:18:59,316 [print.py:__init__()] - 24h time is True
2023-10-17 20:18:59,339 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-17 20:18:59,339 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 20:19:02,686 [KlippyGtk.py:Dialog()] - Showing dialog Print CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode (width=800, height=480)
2023-10-17 20:19:06,301 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-17 20:19:07,498 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:19:07,540 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 20:19:08,719 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-17 20:19:08,721 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-17 20:19:10,233 [extrude.py:change_distance()] - ### Distance 10
2023-10-17 20:19:11,709 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-17 20:19:11,711 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F1500'}
2023-10-17 20:19:31,693 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:19:31,728 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-17 20:19:33,100 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-17 20:19:33,100 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-17 20:20:09,880 [KlippyGtk.py:Dialog()] - Showing dialog Print CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode (width=800, height=480)
2023-10-17 20:20:13,628 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-17 20:20:26,852 [KlippyGtk.py:Dialog()] - Showing dialog Print CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode (width=800, height=480)
2023-10-17 20:20:28,096 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-17 20:20:28,096 [print.py:confirm_print_response()] - Starting print: CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode
2023-10-17 20:20:28,096 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-17 20:20:28,269 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-17 20:20:28,269 [printer.py:change_state()] - Adding callback for state: printing
2023-10-17 20:20:28,278 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 20:20:28,391 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 20:20:28,396 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-17 20:20:28,404 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode Size: 9461427
2023-10-17 20:20:28,413 [job_status.py:show_file_thumbnail()] - CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode
2023-10-17 20:25:49,240 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-10-17 20:25:49,329 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-17 20:25:54,273 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:25:54,299 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 20:25:54,321 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode Size: 9461427
2023-10-17 20:25:54,342 [job_status.py:show_file_thumbnail()] - CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode
2023-10-17 20:25:56,925 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-10-17 20:25:56,925 [screen.py:_go_to_submenu()] - #### Menu __print
2023-10-17 20:25:56,930 [screen.py:_load_panel()] - Loading panel: menu
2023-10-17 20:25:57,092 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-10-17 20:25:57,103 [menu.py:arrangeMenuItems()] - X > move
2023-10-17 20:25:57,109 [menu.py:arrangeMenuItems()] - X > power
2023-10-17 20:25:57,112 [menu.py:arrangeMenuItems()] - X > led
2023-10-17 20:25:57,125 [menu.py:arrangeMenuItems()] - X > retraction
2023-10-17 20:25:57,128 [menu.py:arrangeMenuItems()] - X > spoolman
2023-10-17 20:25:58,658 [screen.py:show_panel()] - Reinitializing panel
2023-10-17 20:25:58,672 [temperature.py:add_device()] - Adding device: extruder
2023-10-17 20:25:58,683 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-17 20:25:58,721 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2023-10-17 20:26:01,570 [temperature.py:select_heater()] - Selecting extruder
2023-10-17 20:26:03,647 [temperature.py:select_heater()] - Deselecting extruder
2023-10-17 20:26:07,035 [screen.py:show_popup_message()] - error: Nothing selected
2023-10-17 20:26:07,754 [screen.py:show_popup_message()] - error: Nothing selected
2023-10-17 20:26:08,114 [screen.py:show_popup_message()] - error: Nothing selected
2023-10-17 20:26:08,450 [screen.py:show_popup_message()] - error: Nothing selected
2023-10-17 20:26:08,814 [screen.py:show_popup_message()] - error: Nothing selected
2023-10-17 20:26:10,002 [screen.py:show_popup_message()] - error: Nothing selected
2023-10-17 20:26:11,333 [temperature.py:select_heater()] - Selecting extruder
2023-10-17 20:26:12,033 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S220.0
2023-10-17 20:26:12,034 [temperature.py:change_target_temp_incremental()] - Setting extruder to 220.0
2023-10-17 20:26:12,345 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S210
2023-10-17 20:26:12,347 [temperature.py:change_target_temp_incremental()] - Setting extruder to 210
2023-10-17 20:26:12,662 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2023-10-17 20:26:12,663 [temperature.py:change_target_temp_incremental()] - Setting extruder to 200
2023-10-17 20:26:13,626 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S210
2023-10-17 20:26:13,627 [temperature.py:change_target_temp_incremental()] - Setting extruder to 210
2023-10-17 20:26:13,998 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S220
2023-10-17 20:26:14,000 [temperature.py:change_target_temp_incremental()] - Setting extruder to 220
2023-10-17 20:26:14,260 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S230
2023-10-17 20:26:14,261 [temperature.py:change_target_temp_incremental()] - Setting extruder to 230
2023-10-17 20:26:14,484 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240
2023-10-17 20:26:14,485 [temperature.py:change_target_temp_incremental()] - Setting extruder to 240
2023-10-17 20:26:14,701 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S250
2023-10-17 20:26:14,703 [temperature.py:change_target_temp_incremental()] - Setting extruder to 250
2023-10-17 20:26:15,413 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240
2023-10-17 20:26:15,414 [temperature.py:change_target_temp_incremental()] - Setting extruder to 240
2023-10-17 20:26:15,825 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S230
2023-10-17 20:26:15,825 [temperature.py:change_target_temp_incremental()] - Setting extruder to 230
2023-10-17 20:26:16,401 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S220
2023-10-17 20:26:16,402 [temperature.py:change_target_temp_incremental()] - Setting extruder to 220
2023-10-17 20:26:19,478 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'BED'
2023-10-17 20:26:20,746 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-17 20:26:20,747 [printer.py:change_state()] - Adding callback for state: ready
2023-10-17 20:26:24,477 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:26:24,496 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-10-17 20:26:24,511 [menu.py:arrangeMenuItems()] - X > move
2023-10-17 20:26:24,517 [menu.py:arrangeMenuItems()] - X > power
2023-10-17 20:26:24,520 [menu.py:arrangeMenuItems()] - X > led
2023-10-17 20:26:24,533 [menu.py:arrangeMenuItems()] - X > retraction
2023-10-17 20:26:24,537 [menu.py:arrangeMenuItems()] - X > spoolman
2023-10-17 20:26:25,130 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-17 20:26:25,166 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-17 20:26:25,178 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-17 20:26:25,183 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode Size: 9461427
2023-10-17 20:26:25,194 [job_status.py:show_file_thumbnail()] - CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode
2023-10-17 20:30:48,509 [print.py:_callback()] - newfiles: []
2023-10-17 20:30:48,510 [print.py:_callback()] - deletedfiles: ['CE3E3V2_xyzCalibration_cube.gcode']
2023-10-17 20:30:48,513 [print.py:_callback()] - updatefiles: []
2023-10-17 20:30:59,996 [print.py:_callback()] - newfiles: []
2023-10-17 20:30:59,996 [print.py:_callback()] - deletedfiles: ['Ender_3_V2_NEO_Hotend_Cover_3h1_PETG_5h27m.gcode']
2023-10-17 20:31:00,000 [print.py:_callback()] - updatefiles: []
2023-10-17 20:31:16,581 [print.py:_callback()] - newfiles: []
2023-10-17 20:31:16,581 [print.py:_callback()] - deletedfiles: ['CE3E3V2_XY_ADXL345_Mount_v2.gcode']
2023-10-17 20:31:16,589 [print.py:_callback()] - updatefiles: []
2023-10-17 20:31:16,591 [print.py:_callback()] - newfiles: []
2023-10-17 20:31:16,591 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode']
2023-10-17 20:31:16,600 [print.py:_callback()] - updatefiles: []
2023-10-17 20:31:16,601 [print.py:_callback()] - newfiles: []
2023-10-17 20:31:16,602 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Divider Box 4x1x3 3-Compartment.gcode']
2023-10-17 20:31:16,606 [print.py:_callback()] - updatefiles: []
2023-10-17 20:40:51,557 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-17 21:26:25,190 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 06:59:52,866 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 06:59:52,895 [screen.py:wake_screen()] - Screen wake up
2023-10-18 07:00:01,339 [job_status.py:close_panel()] - Closing job_status panel
2023-10-18 07:00:01,345 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 07:00:01,440 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 07:00:01,446 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 07:00:01,452 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 07:00:01,482 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 07:00:07,810 [screen.py:_go_to_submenu()] - #### Go to submenu more
2023-10-18 07:00:07,810 [screen.py:_go_to_submenu()] - #### Menu __main
2023-10-18 07:00:07,819 [screen.py:_load_panel()] - Loading panel: menu
2023-10-18 07:00:08,073 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-18 07:00:08,085 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-18 07:00:08,091 [menu.py:arrangeMenuItems()] - X > more led
2023-10-18 07:00:08,097 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-18 07:00:08,099 [menu.py:arrangeMenuItems()] - X > more power
2023-10-18 07:00:08,115 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-18 07:00:14,737 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 07:00:14,770 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 07:00:19,029 [screen.py:_go_to_submenu()] - #### Go to submenu more
2023-10-18 07:00:19,029 [screen.py:_go_to_submenu()] - #### Menu __main
2023-10-18 07:00:19,054 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-18 07:00:19,067 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-18 07:00:19,073 [menu.py:arrangeMenuItems()] - X > more led
2023-10-18 07:00:19,078 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-18 07:00:19,081 [menu.py:arrangeMenuItems()] - X > more power
2023-10-18 07:00:19,096 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-18 07:00:24,684 [screen.py:_load_panel()] - Loading panel: system
2023-10-18 07:00:24,756 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/update/status
2023-10-18 07:00:24,762 [system.py:_already_updated()] - crowsnest v4.0.4-6
2023-10-18 07:00:24,768 [system.py:_already_updated()] - klipper v0.11.0-299
2023-10-18 07:00:24,770 [system.py:_already_updated()] - mainsail v2.8.0
2023-10-18 07:00:24,772 [system.py:_already_updated()] - mainsail-config v1.0.0-16
2023-10-18 07:00:24,777 [system.py:_already_updated()] - moonraker v0.8.0-186
2023-10-18 07:00:24,783 [system.py:_already_updated()] - sonar v0.1.2-0
2023-10-18 07:00:24,800 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2023-10-18 07:00:24,810 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/update/status?refresh=false
2023-10-18 07:00:24,811 [system.py:_already_updated()] - crowsnest v4.0.4-6
2023-10-18 07:00:24,814 [system.py:_already_updated()] - klipper v0.11.0-299
2023-10-18 07:00:24,816 [system.py:_already_updated()] - mainsail v2.8.0
2023-10-18 07:00:24,818 [system.py:_already_updated()] - mainsail-config v1.0.0-16
2023-10-18 07:00:24,819 [system.py:_already_updated()] - moonraker v0.8.0-186
2023-10-18 07:00:24,821 [system.py:_already_updated()] - sonar v0.1.2-0
2023-10-18 07:00:29,866 [KlippyGtk.py:Dialog()] - Showing dialog Restart (width=834, height=480)
2023-10-18 07:00:32,073 [KlippyGtk.py:remove_dialog()] - Removing Dialog
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-50-gc14fd4d
2023-10-18 07:00:58,110 [screen.py:main()] - Python version: 3.9
2023-10-18 07:00:58,110 [screen.py:main()] - KlipperScreen version: v0.3.6-50-gc14fd4d
2023-10-18 07:00:58,293 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-10-18 07:00:58,294 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-10-18 07:00:58,313 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-18 07:00:58,414 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-10-18 07:00:58,415 [config.py:install_language()] - Using system lang
2023-10-18 07:00:58,416 [config.py:install_language()] - Using lang en
2023-10-18 07:00:58,437 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-18 07:00:58,438 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-18 07:00:59,105 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-18 07:00:59,114 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-18 07:00:59,122 [screen.py:initial_connection()] - Default printer: None
2023-10-18 07:00:59,122 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-18 07:00:59,122 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-18 07:00:59,167 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 07:00:59,174 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-18 07:00:59,184 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-10-18 07:01:24,164 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-18 07:01:24,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 07:01:24,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-18 07:01:24,207 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-18 07:01:24,220 [_logging.py:info()] - Websocket connected
2023-10-18 07:01:24,220 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-18 07:01:24,234 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 07:01:24,248 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 07:01:24,250 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 07:01:24,263 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 07:01:24,265 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 07:01:24,280 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 07:01:24,380 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 07:01:24,383 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nG4 P300000\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nG4 P300000\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 07:01:24,387 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 07:01:24,387 [printer.py:reinit()] - # Extruders: 1
2023-10-18 07:01:24,387 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 07:01:24,388 [printer.py:reinit()] - # Fans: 3
2023-10-18 07:01:24,388 [printer.py:reinit()] - # Output pins: 0
2023-10-18 07:01:24,388 [printer.py:reinit()] - # Leds: 0
2023-10-18 07:01:24,399 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 07:01:24,400 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 07:01:24,668 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 07:01:24,679 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:24,679 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:01:24,680 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 07:01:24,680 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 07:01:24,680 [screen.py:init_printer()] - Printer initialized
2023-10-18 07:01:24,681 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-18 07:01:24,681 [printer.py:change_state()] - Adding callback for state: error
2023-10-18 07:01:24,682 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 07:01:24,727 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 07:01:30,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:30,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:01:35,182 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:35,184 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:01:40,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:40,180 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:01:45,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:45,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:01:50,179 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:50,180 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:01:55,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:01:55,179 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:02:00,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:02:00,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:02:05,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:02:05,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:02:09,137 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-18 07:02:09,179 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-18 07:02:09,179 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 07:02:09,181 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 07:02:09,182 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 07:02:09,223 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 07:02:10,168 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:02:10,169 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:02:12,170 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 07:02:12,179 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 07:02:12,180 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 07:02:12,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 07:02:12,190 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 07:02:12,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 07:02:12,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 07:02:12,221 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nG4 P300000\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '150', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nG4 P300000\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 150.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 07:02:12,224 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 07:02:12,225 [printer.py:reinit()] - # Extruders: 1
2023-10-18 07:02:12,225 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 07:02:12,225 [printer.py:reinit()] - # Fans: 3
2023-10-18 07:02:12,225 [printer.py:reinit()] - # Output pins: 0
2023-10-18 07:02:12,225 [printer.py:reinit()] - # Leds: 0
2023-10-18 07:02:12,238 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 07:02:12,240 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 07:02:12,504 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 07:02:12,514 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:02:12,515 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-18 07:02:12,515 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 07:02:12,515 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 07:02:12,516 [screen.py:init_printer()] - Printer initialized
2023-10-18 07:02:12,516 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-18 07:02:12,516 [printer.py:change_state()] - Adding callback for state: startup
2023-10-18 07:02:13,474 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-18 07:02:13,474 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 07:02:13,476 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-18 07:02:13,548 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 07:02:13,554 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 07:02:13,561 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 07:02:13,589 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 07:02:13,590 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2023-10-18 07:02:15,168 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:02:15,178 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 07:02:15,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 07:02:15,190 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 07:02:18,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 07:02:18,205 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 07:02:18,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 07:02:18,228 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 07:04:28,054 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.png. Retrying in 6 seconds
2023-10-18 07:04:28,056 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1-32x32.png. Retrying in 6 seconds
2023-10-18 07:04:28,105 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-18 07:04:28,105 [printer.py:change_state()] - Adding callback for state: printing
2023-10-18 07:04:28,116 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-18 07:04:28,259 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-18 07:04:28,264 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-18 07:04:28,275 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode Size: 8302108
2023-10-18 07:04:28,287 [job_status.py:show_file_thumbnail()] - CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode
2023-10-18 08:02:09,178 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 08:45:06,013 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 08:45:06,040 [screen.py:wake_screen()] - Screen wake up
2023-10-18 09:06:46,438 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Skull Glasses Holder.png. Retrying in 6 seconds
2023-10-18 09:06:46,440 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Skull Glasses Holder-32x32.png. Retrying in 6 seconds
2023-10-18 09:31:35,114 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-18 09:31:37,601 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-18 09:31:37,601 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 09:41:37,571 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-18 09:45:06,162 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 09:59:42,048 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_adxl_magnet_6x3mm.png. Retrying in 6 seconds
2023-10-18 09:59:42,050 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_adxl_magnet_6x3mm-32x32.png. Retrying in 6 seconds
2023-10-18 09:59:42,216 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-18 09:59:42,216 [printer.py:change_state()] - Adding callback for state: printing
2023-10-18 09:59:42,219 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-18 09:59:42,222 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_adxl_magnet_6x3mm.gcode Size: 448611
2023-10-18 09:59:42,230 [job_status.py:show_file_thumbnail()] - CE3E3V2_adxl_magnet_6x3mm.gcode
2023-10-18 09:59:42,234 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 09:59:42,245 [screen.py:wake_screen()] - Screen wake up
2023-10-18 09:59:42,644 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 09:59:42,760 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-18 09:59:42,765 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-18 09:59:42,773 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_adxl_magnet_6x3mm.gcode Size: 448611
2023-10-18 09:59:42,780 [job_status.py:show_file_thumbnail()] - CE3E3V2_adxl_magnet_6x3mm.gcode
2023-10-18 10:03:22,985 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_ADXL345_magnetic_heatbed_mount.png. Retrying in 6 seconds
2023-10-18 10:03:22,986 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_ADXL345_magnetic_heatbed_mount-32x32.png. Retrying in 6 seconds
2023-10-18 10:20:08,588 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-18 10:20:11,075 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-18 10:20:11,075 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 10:21:39,927 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-18 10:21:39,927 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 10:21:39,929 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 10:21:39,932 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 10:21:39,999 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 10:21:43,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 10:21:43,183 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 10:21:43,184 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 10:21:43,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 10:21:43,194 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 10:21:43,203 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 10:21:43,221 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 10:21:43,223 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '300', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 300.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 10:21:43,227 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 10:21:43,227 [printer.py:reinit()] - # Extruders: 1
2023-10-18 10:21:43,227 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 10:21:43,227 [printer.py:reinit()] - # Fans: 3
2023-10-18 10:21:43,227 [printer.py:reinit()] - # Output pins: 0
2023-10-18 10:21:43,227 [printer.py:reinit()] - # Leds: 0
2023-10-18 10:21:43,243 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 10:21:43,244 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 10:21:43,510 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 10:21:43,529 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 10:21:43,532 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 10:21:43,543 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 10:21:43,543 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 10:21:43,544 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 10:21:43,544 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 10:21:43,544 [screen.py:init_printer()] - Printer initialized
2023-10-18 10:21:43,545 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-18 10:21:43,545 [printer.py:change_state()] - Adding callback for state: startup
2023-10-18 10:21:44,221 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-18 10:21:44,221 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 10:21:44,225 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 10:21:44,294 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 10:21:44,301 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 10:21:44,307 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 10:21:44,340 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 10:21:58,760 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-18 10:21:58,761 [printer.py:change_state()] - Adding callback for state: printing
2023-10-18 10:21:58,769 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 10:21:58,885 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-18 10:21:58,890 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-18 10:21:58,898 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_ADXL345_magnetic_heatbed_mount.gcode Size: 301071
2023-10-18 10:21:58,905 [job_status.py:show_file_thumbnail()] - CE3E3V2_ADXL345_magnetic_heatbed_mount.gcode
2023-10-18 10:36:22,241 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-18 10:36:24,726 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-18 10:36:24,726 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 10:46:24,553 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-18 10:59:43,163 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 13:28:20,332 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 13:28:20,358 [screen.py:wake_screen()] - Screen wake up
2023-10-18 13:28:24,130 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2023-10-18 13:28:24,327 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-18 13:28:24,327 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-18 13:28:24,353 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 13:28:24,427 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 13:29:45,333 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-18 13:29:45,383 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-18 13:29:45,383 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 13:29:45,384 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 13:29:45,386 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 13:29:45,443 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 13:29:45,543 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-18 13:29:49,171 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 13:29:49,179 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 13:29:49,181 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 13:29:49,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 13:29:49,190 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 13:29:49,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 13:29:49,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 13:29:49,220 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '300', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 300.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 13:29:49,223 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 13:29:49,223 [printer.py:reinit()] - # Extruders: 1
2023-10-18 13:29:49,223 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 13:29:49,223 [printer.py:reinit()] - # Fans: 3
2023-10-18 13:29:49,224 [printer.py:reinit()] - # Output pins: 0
2023-10-18 13:29:49,224 [printer.py:reinit()] - # Leds: 0
2023-10-18 13:29:49,236 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 13:29:49,237 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 13:29:49,512 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 13:29:49,529 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 13:29:49,532 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 13:29:49,543 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 13:29:49,544 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 13:29:49,544 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 13:29:49,544 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 13:29:49,544 [screen.py:init_printer()] - Printer initialized
2023-10-18 13:29:49,545 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-18 13:29:49,545 [printer.py:change_state()] - Adding callback for state: startup
2023-10-18 13:29:54,730 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-18 13:29:54,730 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 13:29:54,735 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-18 13:29:54,735 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 13:29:54,799 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 13:29:54,805 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 13:29:54,811 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 13:29:54,839 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 13:30:44,550 [screen.py:show_popup_message()] - error: // Unknown command:"QUERY_ACCELEROMETER"
2023-10-18 13:31:28,248 [screen.py:show_popup_message()] - error: Invalid adxl345 id (got 0 vs e5).
2023-10-18 13:34:16,990 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-10-18 13:34:17,027 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-50-gc14fd4d
2023-10-18 13:41:30,163 [screen.py:main()] - Python version: 3.9
2023-10-18 13:41:30,163 [screen.py:main()] - KlipperScreen version: v0.3.6-50-gc14fd4d
2023-10-18 13:41:30,350 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-10-18 13:41:30,352 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2023-10-18 13:41:30,369 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-18 13:41:30,455 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-10-18 13:41:30,456 [config.py:install_language()] - Using system lang
2023-10-18 13:41:30,456 [config.py:install_language()] - Using lang en
2023-10-18 13:41:30,473 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-18 13:41:30,475 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-18 13:41:31,167 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-18 13:41:31,176 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-18 13:41:31,184 [screen.py:initial_connection()] - Default printer: None
2023-10-18 13:41:31,184 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-18 13:41:31,184 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-18 13:41:31,230 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 13:41:31,237 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-18 13:41:31,247 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-10-18 13:41:56,016 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-18 13:41:56,039 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 13:41:56,056 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-18 13:41:56,058 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-18 13:41:56,071 [_logging.py:info()] - Websocket connected
2023-10-18 13:41:56,072 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-18 13:41:56,086 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 13:41:56,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 13:41:56,100 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 13:41:56,113 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 13:41:56,114 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 13:41:56,130 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 13:41:56,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 13:41:56,191 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '300', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 300.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 13:41:56,195 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 13:41:56,195 [printer.py:reinit()] - # Extruders: 1
2023-10-18 13:41:56,195 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 13:41:56,195 [printer.py:reinit()] - # Fans: 3
2023-10-18 13:41:56,195 [printer.py:reinit()] - # Output pins: 0
2023-10-18 13:41:56,195 [printer.py:reinit()] - # Leds: 0
2023-10-18 13:41:56,207 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 13:41:56,209 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 13:41:56,477 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 13:41:56,488 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 13:41:56,498 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 13:41:56,508 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 13:41:56,509 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 13:41:56,509 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 13:41:56,510 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 13:41:56,511 [screen.py:init_printer()] - Printer initialized
2023-10-18 13:41:56,512 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2023-10-18 13:41:56,512 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 13:41:56,515 [screen.py:_load_panel()] - Loading panel: main_menu
2023-10-18 13:41:56,591 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 13:41:56,597 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 13:41:56,604 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 13:41:56,633 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 13:42:00,632 [screen.py:show_popup_message()] - error: Invalid adxl345 id (got 0 vs e5).
2023-10-18 13:47:38,786 [heatergraph.py:event_cb()] - Graph area: 83.99746704101562 72.9945068359375
2023-10-18 13:47:38,858 [heatergraph.py:event_cb()] - Graph area: 83.99746704101562 72.9945068359375
2023-10-18 13:47:38,906 [heatergraph.py:event_cb()] - Graph area: 83.99746704101562 72.9945068359375
2023-10-18 13:47:43,965 [heatergraph.py:event_cb()] - Graph area: 120.99690246582031 84.99432373046875
2023-10-18 13:47:44,017 [heatergraph.py:event_cb()] - Graph area: 125.996826171875 85.99432373046875
2023-10-18 13:48:33,010 [screen.py:show_popup_message()] - error: Invalid adxl345 id (got ff vs e5).
2023-10-18 13:49:01,516 [screen.py:_load_panel()] - Loading panel: gcode_macros
2023-10-18 13:49:01,577 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2023-10-18 14:11:10,868 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-18 14:11:10,868 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-18 14:11:10,880 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 14:11:10,922 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 14:49:02,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 15:50:55,142 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 15:50:55,155 [screen.py:wake_screen()] - Screen wake up
2023-10-18 15:51:01,175 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-18 15:51:01,225 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-18 15:51:01,225 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 15:51:01,226 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 15:51:01,229 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 15:51:01,290 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 15:51:05,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 15:51:05,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 15:51:05,032 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 15:51:05,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 15:51:05,041 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 15:51:05,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 15:51:05,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 15:51:05,229 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '300', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 300.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 15:51:05,233 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 15:51:05,233 [printer.py:reinit()] - # Extruders: 1
2023-10-18 15:51:05,233 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 15:51:05,233 [printer.py:reinit()] - # Fans: 3
2023-10-18 15:51:05,233 [printer.py:reinit()] - # Output pins: 0
2023-10-18 15:51:05,233 [printer.py:reinit()] - # Leds: 0
2023-10-18 15:51:05,246 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 15:51:05,248 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 15:51:05,515 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 15:51:05,532 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 15:51:05,536 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 15:51:05,546 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 15:51:05,548 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 15:51:05,549 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 15:51:05,549 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 15:51:05,550 [screen.py:init_printer()] - Printer initialized
2023-10-18 15:51:05,552 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-18 15:51:05,552 [printer.py:change_state()] - Adding callback for state: error
2023-10-18 15:51:05,556 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 15:51:05,601 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 15:53:21,605 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-18 15:53:21,605 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 15:53:21,606 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 15:53:21,608 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 15:53:21,651 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 15:53:25,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 15:53:25,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 15:53:25,031 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 15:53:25,039 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 15:53:25,040 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 15:53:25,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 15:53:25,067 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 15:53:25,070 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '300', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0%}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n\n\n{% if printer[\'gcode_macro PAUSE\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro PAUSE\'].restore_idle_timeout}\n{% endif %}\n{% if printer.idle_timeout.state|upper == "IDLE" %}\n{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}\n{% endif %}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nM109 S175\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-300 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 300.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 15:53:25,073 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 15:53:25,073 [printer.py:reinit()] - # Extruders: 1
2023-10-18 15:53:25,073 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 15:53:25,074 [printer.py:reinit()] - # Fans: 3
2023-10-18 15:53:25,074 [printer.py:reinit()] - # Output pins: 0
2023-10-18 15:53:25,074 [printer.py:reinit()] - # Leds: 0
2023-10-18 15:53:25,086 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 15:53:25,087 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 15:53:25,353 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 15:53:25,370 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 15:53:25,373 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 15:53:25,382 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 15:53:25,383 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 15:53:25,383 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 15:53:25,383 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 15:53:25,384 [screen.py:init_printer()] - Printer initialized
2023-10-18 15:53:25,384 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-18 15:53:25,384 [printer.py:change_state()] - Adding callback for state: startup
2023-10-18 15:53:25,813 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-18 15:53:25,813 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 15:53:25,816 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 15:53:25,879 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 15:53:25,885 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 15:53:25,891 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 15:53:25,919 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 15:53:38,070 [screen.py:_load_panel()] - Loading panel: extrude
2023-10-18 15:53:38,163 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-18 15:53:38,166 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-18 15:53:38,168 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-18 15:53:42,089 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-18 15:53:42,117 [screen.py:show_popup_message()] - echo: Extruder not hot enough
2023-10-18 15:53:42,124 [screen.py:show_popup_message()] - echo: Printer not homed
2023-10-18 15:53:42,131 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-18 15:55:23,189 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [-0.800]
2023-10-18 15:55:23,202 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [-0.800]
2023-10-18 15:55:29,258 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 15:55:29,287 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 15:55:30,234 [screen.py:_load_panel()] - Loading panel: move
2023-10-18 15:55:30,318 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-18 15:55:31,108 [screen.py:_load_panel()] - Loading panel: menu
2023-10-18 15:55:31,199 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-18 15:55:31,212 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-18 15:55:31,215 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-18 15:55:31,761 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-18 15:55:42,074 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 15:55:42,104 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-18 15:55:43,121 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 15:55:43,140 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 15:55:43,964 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-18 15:55:43,966 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-18 15:55:54,522 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-18 15:56:30,078 [extrude.py:change_distance()] - ### Distance 25
2023-10-18 15:56:30,847 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:56:30,848 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F120'}
2023-10-18 15:56:44,139 [extrude.py:change_speed()] - ### Speed 25
2023-10-18 15:56:46,330 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:56:46,332 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-18 15:56:49,683 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:56:49,685 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-18 15:56:51,786 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:56:51,787 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2023-10-18 15:58:32,430 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=1500'}
2023-10-18 15:58:32,448 [screen.py:show_popup_message()] - error: // Unknown command:"LOAD_FILAMENT"
2023-10-18 15:58:42,590 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:42,591 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:43,730 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:43,732 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:45,062 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:45,064 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:46,266 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:46,268 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:47,194 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:47,196 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:47,942 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:47,943 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:48,646 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:48,647 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:51,854 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:51,857 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:52,895 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:52,899 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:53,746 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:53,750 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:58:54,570 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:58:54,574 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:59:00,927 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:59:00,928 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:59:02,095 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:59:02,096 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:59:03,771 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:59:03,773 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2023-10-18 15:59:07,034 [extrude.py:change_distance()] - ### Distance 15
2023-10-18 15:59:07,922 [extrude.py:change_speed()] - ### Speed 5
2023-10-18 15:59:09,522 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:59:09,524 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2023-10-18 15:59:16,588 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2023-10-18 15:59:16,590 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2023-10-18 15:59:51,162 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 15:59:51,200 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 16:09:20,471 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-18 16:15:34,944 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Skull Glasses Holder.png. Retrying in 6 seconds
2023-10-18 16:15:34,946 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Skull Glasses Holder-32x32.png. Retrying in 6 seconds
2023-10-18 16:15:35,002 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-18 16:15:35,003 [printer.py:change_state()] - Adding callback for state: printing
2023-10-18 16:15:35,015 [screen.py:_load_panel()] - Loading panel: job_status
2023-10-18 16:15:35,160 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-18 16:15:35,165 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-18 16:15:35,176 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-18 16:15:35,189 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-18 16:59:52,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 17:15:01,984 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 17:15:02,009 [screen.py:wake_screen()] - Screen wake up
2023-10-18 18:15:02,027 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 19:24:53,489 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 19:24:53,514 [screen.py:wake_screen()] - Screen wake up
2023-10-18 20:54:19,012 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-18 20:57:37,632 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-18 20:57:37,653 [screen.py:wake_screen()] - Screen wake up
2023-10-18 20:59:50,870 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2023-10-18 20:59:50,981 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2023-10-18 20:59:50,982 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-18 20:59:51,019 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 20:59:51,061 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 20:59:57,971 [KlippyWebsocket.py:connect()] - Already connected
2023-10-18 21:00:00,662 [KlippyWebsocket.py:restart()] - Sending printer.restart
2023-10-18 21:00:00,690 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-18 21:00:00,691 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 21:00:00,692 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 21:00:00,694 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 21:00:00,765 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 21:00:04,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 21:00:04,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 21:00:04,031 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 21:00:04,039 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 21:00:04,040 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 21:00:04,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 21:00:04,130 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 21:00:04,133 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 21:00:04,136 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 21:00:04,136 [printer.py:reinit()] - # Extruders: 1
2023-10-18 21:00:04,137 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 21:00:04,137 [printer.py:reinit()] - # Fans: 3
2023-10-18 21:00:04,137 [printer.py:reinit()] - # Output pins: 0
2023-10-18 21:00:04,137 [printer.py:reinit()] - # Leds: 0
2023-10-18 21:00:04,150 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 21:00:04,151 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 21:00:04,417 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 21:00:04,435 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 21:00:04,439 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 21:00:04,449 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 21:00:04,450 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 21:00:04,451 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 21:00:04,451 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 21:00:04,452 [screen.py:init_printer()] - Printer initialized
2023-10-18 21:00:04,453 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-18 21:00:04,453 [printer.py:change_state()] - Adding callback for state: error
2023-10-18 21:00:04,455 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 21:00:04,497 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 21:00:14,558 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-18 21:00:14,623 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-18 21:00:14,623 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-18 21:00:14,624 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-18 21:00:14,626 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 21:00:14,684 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-18 21:00:18,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 21:00:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-18 21:00:18,031 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-18 21:00:18,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-18 21:00:18,040 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-18 21:00:18,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-18 21:00:18,068 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-18 21:00:18,070 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.055000, 0.098750, 0.092500, 0.128750\n0.025000, 0.028750, 0.006250, -0.006250\n0.006250, 0.027500, -0.022500, -0.032500\n0.010000, 0.003750, -0.058750, -0.091250', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.055, 0.09875, 0.0925, 0.12875], [0.025, 0.02875, 0.00625, -0.00625], [0.00625, 0.0275, -0.0225, -0.0325], [0.01, 0.00375, -0.05875, -0.09125]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-18 21:00:18,074 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-18 21:00:18,074 [printer.py:reinit()] - # Extruders: 1
2023-10-18 21:00:18,074 [printer.py:reinit()] - # Temperature devices: 1
2023-10-18 21:00:18,074 [printer.py:reinit()] - # Fans: 3
2023-10-18 21:00:18,074 [printer.py:reinit()] - # Output pins: 0
2023-10-18 21:00:18,074 [printer.py:reinit()] - # Leds: 0
2023-10-18 21:00:18,085 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-18 21:00:18,086 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-18 21:00:18,329 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-18 21:00:18,369 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-18 21:00:18,373 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-18 21:00:18,383 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-18 21:00:18,384 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-18 21:00:18,384 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-18 21:00:18,384 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 21:00:18,385 [screen.py:init_printer()] - Printer initialized
2023-10-18 21:00:18,385 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-18 21:00:18,385 [printer.py:change_state()] - Adding callback for state: startup
2023-10-18 21:00:18,813 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-18 21:00:18,814 [printer.py:change_state()] - Adding callback for state: ready
2023-10-18 21:00:18,816 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 21:00:18,881 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-18 21:00:18,888 [main_menu.py:add_device()] - Adding device: extruder
2023-10-18 21:00:18,894 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-18 21:00:18,923 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 21:00:34,081 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 21:00:34,140 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-18 21:00:34,142 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=filament_motion ENABLE=1
2023-10-18 21:00:34,143 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-18 21:00:35,097 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-18 21:00:35,115 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-18 21:00:35,163 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2023-10-18 21:00:44,252 [screen.py:_load_panel()] - Loading panel: temperature
2023-10-18 21:00:44,271 [temperature.py:add_device()] - Adding device: extruder
2023-10-18 21:00:44,283 [temperature.py:add_device()] - Adding device: heater_bed
2023-10-18 21:00:44,296 [temperature.py:select_heater()] - Selecting extruder
2023-10-18 21:00:44,297 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-18 21:00:44,333 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2023-10-18 21:00:45,918 [temperature.py:select_heater()] - Deselecting heater_bed
2023-10-18 21:00:48,266 [temperature.py:select_heater()] - Selecting heater_bed
2023-10-18 21:00:49,762 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-18 21:00:49,762 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-18 21:00:49,763 [temperature.py:set_temperature()] - name match extruder
2023-10-18 21:00:49,763 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S195.0
2023-10-18 21:00:49,764 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-18 21:00:49,764 [temperature.py:set_temperature()] - {'bed': 40.0, 'extruder': 195.0}
2023-10-18 21:00:49,765 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S40.0
2023-10-18 21:01:54,325 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 21:01:54,345 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2023-10-18 21:01:54,347 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-18 21:01:55,423 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2023-10-18 21:01:57,366 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': False, 'enabled': True}
2023-10-18 21:02:08,642 [extrude.py:process_update()] - filament_motion_sensor filament_motion: {'filament_detected': True, 'enabled': True}
2023-10-18 21:04:36,482 [screen.py:_send_action()] - printer.gcode.script: {'script': 'LOAD_FILAMENT SPEED=120'}
2023-10-18 21:05:09,318 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 21:05:09,350 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-18 21:05:11,566 [screen.py:_load_panel()] - Loading panel: print
2023-10-18 21:05:11,574 [print.py:__init__()] - 24h time is True
2023-10-18 21:05:11,597 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-18 21:05:11,598 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-18 21:05:31,863 [KlippyGtk.py:Dialog()] - Showing dialog Print CE3E3V2_Skull Glasses Holder.gcode (width=800, height=480)
2023-10-18 21:05:33,160 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-18 21:05:33,160 [print.py:confirm_print_response()] - Starting print: CE3E3V2_Skull Glasses Holder.gcode
2023-10-18 21:05:33,160 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-18 21:05:33,284 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-18 21:05:33,285 [printer.py:change_state()] - Adding callback for state: printing
2023-10-18 21:05:33,295 [screen.py:show_panel()] - Reinitializing panel
2023-10-18 21:05:33,408 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-18 21:05:33,413 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-18 21:05:33,421 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-18 21:05:33,430 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-18 21:06:02,542 [screen.py:_go_to_submenu()] - #### Go to submenu 
2023-10-18 21:06:02,542 [screen.py:_go_to_submenu()] - #### Menu __print
2023-10-18 21:06:02,549 [screen.py:_load_panel()] - Loading panel: menu
2023-10-18 21:06:02,755 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-10-18 21:06:02,766 [menu.py:arrangeMenuItems()] - X > move
2023-10-18 21:06:02,772 [menu.py:arrangeMenuItems()] - X > power
2023-10-18 21:06:02,775 [menu.py:arrangeMenuItems()] - X > led
2023-10-18 21:06:02,787 [menu.py:arrangeMenuItems()] - X > retraction
2023-10-18 21:06:02,790 [menu.py:arrangeMenuItems()] - X > spoolman
2023-10-18 21:06:05,402 [screen.py:_load_panel()] - Loading panel: settings
2023-10-18 21:06:05,558 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > settings
2023-10-18 21:06:07,932 [screen_panel.py:switch_config_option()] - [main] confirm_estop toggled True
2023-10-18 21:06:07,934 [config.py:save_user_config_options()] - Creating a new config file in /home/pi/printer_data/config/KlipperScreen.conf
2023-10-18 21:06:09,878 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 21:06:09,900 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2023-10-18 21:06:09,912 [menu.py:arrangeMenuItems()] - X > move
2023-10-18 21:06:09,918 [menu.py:arrangeMenuItems()] - X > power
2023-10-18 21:06:09,921 [menu.py:arrangeMenuItems()] - X > led
2023-10-18 21:06:09,933 [menu.py:arrangeMenuItems()] - X > retraction
2023-10-18 21:06:09,937 [menu.py:arrangeMenuItems()] - X > spoolman
2023-10-18 21:06:10,637 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-18 21:06:10,657 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-18 21:06:10,666 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-18 21:06:10,676 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-18 22:06:11,022 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 03:08:37,070 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 03:08:37,085 [screen.py:wake_screen()] - Screen wake up
2023-10-19 03:08:37,485 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2023-10-19 03:08:41,830 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 03:08:41,831 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 03:18:41,689 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-19 04:08:38,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 06:00:44,387 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 06:00:44,414 [screen.py:wake_screen()] - Screen wake up
2023-10-19 06:00:47,777 [job_status.py:close_panel()] - Closing job_status panel
2023-10-19 06:00:47,780 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 06:00:47,843 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-19 06:00:47,849 [main_menu.py:add_device()] - Adding device: extruder
2023-10-19 06:00:47,855 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-19 06:00:47,883 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 06:00:48,978 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 06:00:49,052 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-19 06:00:50,724 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-19 06:00:52,842 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-19 06:00:52,843 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2023-10-19 06:10:53,806 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-19 07:00:53,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 07:11:33,364 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 07:11:33,387 [screen.py:wake_screen()] - Screen wake up
2023-10-19 07:11:34,949 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 07:11:34,969 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 07:11:36,574 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-19 07:11:37,264 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:11:37,355 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-19 07:11:37,367 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-19 07:11:37,370 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-19 07:11:37,945 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-19 07:11:52,555 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 07:11:52,594 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-19 07:11:53,677 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 07:11:53,696 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 07:11:54,491 [screen.py:_go_to_submenu()] - #### Go to submenu more
2023-10-19 07:11:54,491 [screen.py:_go_to_submenu()] - #### Menu __main
2023-10-19 07:11:54,495 [screen.py:_load_panel()] - Loading panel: menu
2023-10-19 07:11:54,706 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-19 07:11:54,718 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-19 07:11:54,724 [menu.py:arrangeMenuItems()] - X > more led
2023-10-19 07:11:54,730 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-19 07:11:54,733 [menu.py:arrangeMenuItems()] - X > more power
2023-10-19 07:11:54,748 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-19 07:11:55,419 [screen.py:_load_panel()] - Loading panel: bed_level
2023-10-19 07:11:55,432 [bed_level.py:_get_screws()] - screws_tilt_adjust
2023-10-19 07:11:55,432 [bed_level.py:_get_screws()] - screw1: 71,38
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw1_name: front_left
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw2: 235,38
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw2_name: front_right
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw3: 71,210
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw3_name: back_left
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw4: 235,210
2023-10-19 07:11:55,433 [bed_level.py:_get_screws()] - screw4_name: back_right
2023-10-19 07:11:55,434 [bed_level.py:_get_screws()] - speed: 100
2023-10-19 07:11:55,434 [bed_level.py:_get_screws()] - horizontal_move_z: 10
2023-10-19 07:11:55,434 [bed_level.py:_get_screws()] - screw_thread: CW-M4
2023-10-19 07:11:55,434 [bed_level.py:__init__()] - screws_tilt_adjust: [[71.0, 38.0], [235.0, 38.0], [71.0, 210.0], [235.0, 210.0]]
2023-10-19 07:11:55,434 [printer.py:get_probe()] - Probe type: bltouch
2023-10-19 07:11:55,434 [bed_level.py:__init__()] - offset X: -45.0 Y: -10.0
2023-10-19 07:11:55,434 [bed_level.py:__init__()] - screws with offset: [[26.0, 28.0], [190.0, 28.0], [26.0, 200.0], [190.0, 200.0]]
2023-10-19 07:11:55,435 [bed_level.py:__init__()] - X: {26.0, 190.0}
Y: {200.0, 28.0}
2023-10-19 07:11:55,435 [bed_level.py:__init__()] - Using max_distance: 119 to fit: 4 screws.
2023-10-19 07:11:55,435 [bed_level.py:__init__()] - Using 4/4-screw locations
2023-10-19 07:11:55,486 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_level
2023-10-19 07:12:28,226 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2023-10-19 07:13:25,789 [bed_level.py:process_update()] - X: 26.0 Y: 28.0 is the reference
2023-10-19 07:13:25,789 [bed_level.py:process_update()] - X: 26.0 Y: 28.0 Pos: fl
2023-10-19 07:13:25,795 [bed_level.py:process_update()] - X: 190.0 Y: 28.0 Adjust: CCW 00:05 Pos: fr
2023-10-19 07:13:25,799 [bed_level.py:process_update()] - X: 26.0 Y: 200.0 Adjust: CW 00:23 Pos: bl
2023-10-19 07:13:25,835 [bed_level.py:process_update()] - X: 190.0 Y: 200.0 Adjust: CW 00:21 Pos: br
2023-10-19 07:13:47,904 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2023-10-19 07:14:58,739 [bed_level.py:process_update()] - X: 26.0 Y: 28.0 is the reference
2023-10-19 07:14:58,740 [bed_level.py:process_update()] - X: 26.0 Y: 28.0 Pos: fl
2023-10-19 07:14:58,744 [bed_level.py:process_update()] - X: 190.0 Y: 28.0 Adjust: CCW 00:12 Pos: fr
2023-10-19 07:14:58,764 [bed_level.py:process_update()] - X: 26.0 Y: 200.0 Adjust: CW 00:29 Pos: bl
2023-10-19 07:14:58,766 [bed_level.py:process_update()] - X: 190.0 Y: 200.0 Adjust: CW 00:09 Pos: br
2023-10-19 07:15:22,730 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SCREWS_TILT_CALCULATE'}
2023-10-19 07:16:21,701 [bed_level.py:process_update()] - X: 26.0 Y: 28.0 is the reference
2023-10-19 07:16:21,701 [bed_level.py:process_update()] - X: 26.0 Y: 28.0 Pos: fl
2023-10-19 07:16:21,709 [bed_level.py:process_update()] - X: 190.0 Y: 28.0 Adjust: CCW 00:00 Pos: fr
2023-10-19 07:16:21,712 [bed_level.py:process_update()] - X: 26.0 Y: 200.0 Adjust: CW 00:05 Pos: bl
2023-10-19 07:16:21,737 [bed_level.py:process_update()] - X: 190.0 Y: 200.0 Adjust: CW 00:04 Pos: br
2023-10-19 07:16:30,509 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 07:16:30,532 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-19 07:16:30,545 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-19 07:16:30,553 [menu.py:arrangeMenuItems()] - X > more led
2023-10-19 07:16:30,559 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-19 07:16:30,562 [menu.py:arrangeMenuItems()] - X > more power
2023-10-19 07:16:30,578 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-19 07:16:32,540 [screen.py:_load_panel()] - Loading panel: bed_mesh
2023-10-19 07:16:32,579 [bed_mesh.py:add_profile()] - Adding Profile: default
2023-10-19 07:16:32,617 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > bed_mesh
2023-10-19 07:16:32,619 [bed_mesh.py:activate_mesh()] - Clearing active profile
2023-10-19 07:16:32,621 [bed_mesh.py:activate_mesh()] - Clearing active profile
2023-10-19 07:16:35,208 [screen.py:show_popup_message()] - echo: Calibrating
2023-10-19 07:16:35,213 [screen.py:_send_action()] - printer.gcode.script: {'script': 'BED_MESH_CALIBRATE'}
2023-10-19 07:16:35,216 [printer.py:get_probe()] - Probe type: bltouch
2023-10-19 07:19:25,547 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xe94db508 (GtkDialog at 0x1ec9370)>
2023-10-19 07:19:25,575 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-19 07:19:25,651 [bed_mesh.py:activate_mesh()] - Active None changing to default
2023-10-19 07:20:08,933 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-19 07:20:08,934 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2023-10-19 07:20:10,055 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-19 07:20:10,055 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-19 07:20:10,056 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-19 07:20:10,057 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:20:10,099 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-19 07:20:13,024 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-19 07:20:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-19 07:20:13,033 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-19 07:20:13,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-19 07:20:13,044 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-19 07:20:13,054 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-19 07:20:13,072 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-19 07:20:13,074 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.199'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.199, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-19 07:20:13,077 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-19 07:20:13,078 [printer.py:reinit()] - # Extruders: 1
2023-10-19 07:20:13,078 [printer.py:reinit()] - # Temperature devices: 1
2023-10-19 07:20:13,078 [printer.py:reinit()] - # Fans: 3
2023-10-19 07:20:13,078 [printer.py:reinit()] - # Output pins: 0
2023-10-19 07:20:13,078 [printer.py:reinit()] - # Leds: 0
2023-10-19 07:20:13,090 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-19 07:20:13,092 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-19 07:20:13,357 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-19 07:20:13,374 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-19 07:20:13,377 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-19 07:20:13,387 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-19 07:20:13,388 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-19 07:20:13,388 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-19 07:20:13,388 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-19 07:20:13,389 [screen.py:init_printer()] - Printer initialized
2023-10-19 07:20:13,389 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-19 07:20:13,389 [printer.py:change_state()] - Adding callback for state: startup
2023-10-19 07:20:14,325 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-19 07:20:14,326 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 07:20:14,330 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:20:14,420 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-19 07:20:14,427 [main_menu.py:add_device()] - Adding device: extruder
2023-10-19 07:20:14,433 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-19 07:20:14,463 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 07:21:01,205 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:21:01,324 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-19 07:21:02,016 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:21:02,110 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2023-10-19 07:21:02,121 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2023-10-19 07:21:02,124 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2023-10-19 07:21:02,693 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2023-10-19 07:21:03,525 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 07:21:03,545 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2023-10-19 07:21:08,218 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 07:21:08,262 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 07:21:09,325 [screen.py:_go_to_submenu()] - #### Go to submenu more
2023-10-19 07:21:09,325 [screen.py:_go_to_submenu()] - #### Menu __main
2023-10-19 07:21:09,329 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:21:09,541 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2023-10-19 07:21:09,553 [menu.py:arrangeMenuItems()] - X > more retraction
2023-10-19 07:21:09,561 [menu.py:arrangeMenuItems()] - X > more led
2023-10-19 07:21:09,567 [menu.py:arrangeMenuItems()] - X > more pins
2023-10-19 07:21:09,570 [menu.py:arrangeMenuItems()] - X > more power
2023-10-19 07:21:09,585 [menu.py:arrangeMenuItems()] - X > more spoolman
2023-10-19 07:21:11,791 [screen.py:_load_panel()] - Loading panel: zcalibrate
2023-10-19 07:21:11,795 [printer.py:get_probe()] - Probe type: bltouch
2023-10-19 07:21:11,795 [zcalibrate.py:__init__()] - Z offset: 1.199
2023-10-19 07:21:11,822 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2023-10-19 07:21:11,841 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > zcalibrate
2023-10-19 07:23:05,759 [zcalibrate.py:_move_to_position()] - Using safe_z x:110.0
2023-10-19 07:23:05,760 [zcalibrate.py:_move_to_position()] - Using safe_z y:110.0
2023-10-19 07:23:05,760 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G91
G0 Z10 F300.0
2023-10-19 07:23:05,761 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2023-10-19 07:23:05,762 [zcalibrate.py:_move_to_position()] - Configured probing position X: 110.0 Y: 110.0
2023-10-19 07:23:05,762 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G0 X110.0 Y110.0 F3000
2023-10-19 07:23:05,766 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: PROBE_CALIBRATE
2023-10-19 07:23:38,962 [zcalibrate.py:change_distance()] - ### Distance 5
2023-10-19 07:23:42,786 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-5
2023-10-19 07:23:46,723 [zcalibrate.py:change_distance()] - ### Distance 1
2023-10-19 07:23:47,722 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2023-10-19 07:23:50,205 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2023-10-19 07:23:53,794 [zcalibrate.py:change_distance()] - ### Distance .5
2023-10-19 07:23:54,382 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.5
2023-10-19 07:23:56,830 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.5
2023-10-19 07:24:00,114 [zcalibrate.py:change_distance()] - ### Distance .1
2023-10-19 07:24:00,694 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.1
2023-10-19 07:24:02,991 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.1
2023-10-19 07:24:07,386 [zcalibrate.py:change_distance()] - ### Distance .05
2023-10-19 07:24:08,202 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.05
2023-10-19 07:24:18,838 [zcalibrate.py:change_distance()] - ### Distance .01
2023-10-19 07:24:19,382 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2023-10-19 07:24:21,790 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2023-10-19 07:24:37,748 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.01
2023-10-19 07:24:39,422 [zcalibrate.py:accept()] - Accepting Z position
2023-10-19 07:24:39,422 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: ACCEPT
2023-10-19 07:24:39,441 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xe94f2728 (GtkDialog at 0x1ec9530)>
2023-10-19 07:24:39,468 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2023-10-19 07:24:40,987 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-19 07:24:40,987 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2023-10-19 07:24:42,055 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-19 07:24:42,056 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-19 07:24:42,057 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-19 07:24:42,059 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:24:42,101 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-19 07:24:45,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-19 07:24:45,044 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-19 07:24:45,046 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-19 07:24:45,060 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-19 07:24:45,062 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-19 07:24:45,079 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-19 07:24:45,109 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-19 07:24:45,112 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '33.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '41.8', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 33.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 41.8}, 'filament_motion_sensor filament_motion': {'switch_pin': '^PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-19 07:24:45,115 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-19 07:24:45,116 [printer.py:reinit()] - # Extruders: 1
2023-10-19 07:24:45,116 [printer.py:reinit()] - # Temperature devices: 1
2023-10-19 07:24:45,116 [printer.py:reinit()] - # Fans: 3
2023-10-19 07:24:45,116 [printer.py:reinit()] - # Output pins: 0
2023-10-19 07:24:45,116 [printer.py:reinit()] - # Leds: 0
2023-10-19 07:24:45,129 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-19 07:24:45,131 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-19 07:24:45,386 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-19 07:24:45,402 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-19 07:24:45,405 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-19 07:24:45,415 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-19 07:24:45,415 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-19 07:24:45,416 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-19 07:24:45,416 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-19 07:24:45,416 [screen.py:init_printer()] - Printer initialized
2023-10-19 07:24:45,417 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-19 07:24:45,417 [printer.py:change_state()] - Adding callback for state: startup
2023-10-19 07:24:46,357 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-19 07:24:46,357 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 07:24:46,360 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:24:46,425 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-19 07:24:46,431 [main_menu.py:add_device()] - Adding device: extruder
2023-10-19 07:24:46,437 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-19 07:24:46,465 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 07:25:49,228 [print.py:_callback()] - newfiles: []
2023-10-19 07:25:49,229 [print.py:_callback()] - deletedfiles: ['CE3E3V2_ADXL345_magnetic_heatbed_mount.gcode']
2023-10-19 07:25:49,231 [print.py:_callback()] - updatefiles: []
2023-10-19 07:26:00,051 [print.py:_callback()] - newfiles: []
2023-10-19 07:26:00,051 [print.py:_callback()] - deletedfiles: ['CE3E3V2_adxl_magnet_6x3mm.gcode']
2023-10-19 07:26:00,052 [print.py:_callback()] - updatefiles: []
2023-10-19 07:26:10,826 [print.py:_callback()] - newfiles: []
2023-10-19 07:26:10,827 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Ender_3_V2_NEO_Hotend_Cover_3h1.gcode']
2023-10-19 07:26:10,829 [print.py:_callback()] - updatefiles: []
2023-10-19 07:40:39,956 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-19 07:49:56,305 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Filament_Side.png']
2023-10-19 07:49:56,305 [print.py:_callback()] - deletedfiles: []
2023-10-19 07:49:56,305 [print.py:_callback()] - updatefiles: []
2023-10-19 07:49:56,307 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Filament_Side-32x32.png']
2023-10-19 07:49:56,307 [print.py:_callback()] - deletedfiles: []
2023-10-19 07:49:56,307 [print.py:_callback()] - updatefiles: []
2023-10-19 07:49:56,311 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Filament_Side.png. Retrying in 6 seconds
2023-10-19 07:49:56,315 [print.py:_callback()] - newfiles: ['CE3E3V2_Filament_Side.gcode']
2023-10-19 07:49:56,334 [print.py:_callback()] - deletedfiles: []
2023-10-19 07:49:56,335 [print.py:_callback()] - updatefiles: []
2023-10-19 07:49:56,337 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Filament_Side-32x32.png. Retrying in 6 seconds
2023-10-19 07:49:56,338 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-19 07:49:56,338 [printer.py:change_state()] - Adding callback for state: printing
2023-10-19 07:49:56,350 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 07:49:56,468 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 07:49:56,473 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 07:49:56,481 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Filament_Side.gcode Size: 8136473
2023-10-19 07:49:56,490 [job_status.py:show_file_thumbnail()] - CE3E3V2_Filament_Side.gcode
2023-10-19 07:49:56,494 [print.py:_callback()] - newfiles: []
2023-10-19 07:49:56,494 [print.py:_callback()] - deletedfiles: []
2023-10-19 07:49:56,494 [print.py:_callback()] - updatefiles: ['CE3E3V2_Filament_Side.gcode']
2023-10-19 07:49:56,494 [print.py:update_file()] - Updating file CE3E3V2_Filament_Side.gcode
2023-10-19 08:24:41,029 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 08:28:24,941 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 08:28:24,971 [screen.py:wake_screen()] - Screen wake up
2023-10-19 09:28:25,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 09:34:40,088 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 09:34:40,116 [screen.py:wake_screen()] - Screen wake up
2023-10-19 09:38:30,584 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-19 09:38:33,072 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 09:38:33,073 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 09:42:56,058 [job_status.py:close_panel()] - Closing job_status panel
2023-10-19 09:42:56,064 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 09:42:56,155 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-19 09:42:56,162 [main_menu.py:add_device()] - Adding device: extruder
2023-10-19 09:42:56,168 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-19 09:42:56,198 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 09:42:56,906 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 09:42:56,912 [print.py:__init__()] - 24h time is True
2023-10-19 09:42:56,940 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-19 09:42:56,940 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-19 09:42:57,013 [print.py:_callback()] - newfiles: []
2023-10-19 09:42:57,013 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Filament_Side.png', '.thumbs/CE3E3V2_Filament_Side-32x32.png']
2023-10-19 09:42:57,014 [print.py:_callback()] - updatefiles: []
2023-10-19 09:42:57,014 [print.py:_callback()] - newfiles: []
2023-10-19 09:42:57,014 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Filament_Side.png', '.thumbs/CE3E3V2_Filament_Side-32x32.png']
2023-10-19 09:42:57,014 [print.py:_callback()] - updatefiles: []
2023-10-19 09:42:57,014 [print.py:_callback()] - newfiles: []
2023-10-19 09:42:57,014 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Filament_Side.png']
2023-10-19 09:42:57,014 [print.py:_callback()] - updatefiles: []
2023-10-19 09:42:57,015 [print.py:_callback()] - newfiles: []
2023-10-19 09:42:57,015 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Filament_Side.png']
2023-10-19 09:42:57,015 [print.py:_callback()] - updatefiles: []
2023-10-19 09:42:57,015 [print.py:_callback()] - newfiles: []
2023-10-19 09:42:57,015 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Filament_Side-32x32.png']
2023-10-19 09:42:57,015 [print.py:_callback()] - updatefiles: []
2023-10-19 09:42:57,015 [print.py:_callback()] - newfiles: []
2023-10-19 09:42:57,015 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Filament_Side-32x32.png']
2023-10-19 09:42:57,015 [print.py:_callback()] - updatefiles: []
2023-10-19 09:45:06,400 [print.py:_callback()] - newfiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 09:45:06,416 [print.py:_callback()] - deletedfiles: []
2023-10-19 09:45:06,416 [print.py:_callback()] - updatefiles: []
2023-10-19 09:45:06,417 [print.py:_callback()] - newfiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 09:45:06,417 [print.py:_callback()] - deletedfiles: []
2023-10-19 09:45:06,417 [print.py:_callback()] - updatefiles: []
2023-10-19 09:45:06,458 [print.py:_callback()] - newfiles: []
2023-10-19 09:45:06,459 [print.py:_callback()] - deletedfiles: []
2023-10-19 09:45:06,459 [print.py:_callback()] - updatefiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 09:45:06,459 [print.py:update_file()] - Updating file CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 09:45:06,460 [print.py:_callback()] - newfiles: []
2023-10-19 09:45:06,460 [print.py:_callback()] - deletedfiles: []
2023-10-19 09:45:06,460 [print.py:_callback()] - updatefiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 09:45:06,460 [print.py:update_file()] - Updating file CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 09:45:06,608 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-19 09:45:06,608 [printer.py:change_state()] - Adding callback for state: printing
2023-10-19 09:45:06,617 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 09:45:06,740 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 09:45:06,744 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 09:45:06,753 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Roller_96mm_wide.gcode Size: 13918531
2023-10-19 09:45:06,754 [job_status.py:show_file_thumbnail()] - CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 09:45:06,754 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-19 10:00:23,287 [screen.py:_load_panel()] - Loading panel: fine_tune
2023-10-19 10:00:23,363 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 10:00:24,526 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2023-10-19 10:00:25,040 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2023-10-19 10:00:25,893 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 10:00:25,913 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 10:00:25,923 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Roller_96mm_wide.gcode Size: 13918531
2023-10-19 10:00:25,924 [job_status.py:show_file_thumbnail()] - CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 10:00:25,924 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-19 11:00:26,013 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 11:08:00,019 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 11:08:00,049 [screen.py:wake_screen()] - Screen wake up
2023-10-19 11:16:06,530 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-19 11:16:09,026 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 11:16:09,027 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 11:16:39,534 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-19 11:16:39,536 [job_status.py:restart()] - Starting print: CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 11:16:39,635 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-19 11:16:39,635 [printer.py:change_state()] - Adding callback for state: printing
2023-10-19 11:16:39,646 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2023-10-19 11:16:39,692 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 11:16:39,831 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 11:16:39,836 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 11:16:39,845 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Roller_96mm_wide.gcode Size: 13918531
2023-10-19 11:16:39,845 [job_status.py:show_file_thumbnail()] - CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 11:16:39,845 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-19 11:32:58,593 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 11:32:58,702 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 11:32:59,644 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2023-10-19 11:33:00,199 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S200'}
2023-10-19 11:33:00,948 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2023-10-19 11:33:02,316 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2023-10-19 11:33:03,254 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 11:33:03,292 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 11:33:03,309 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Roller_96mm_wide.gcode Size: 13918531
2023-10-19 11:33:03,310 [job_status.py:show_file_thumbnail()] - CE3E3V2_Roller_96mm_wide.gcode
2023-10-19 11:33:03,311 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-19 12:33:04,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 12:44:24,656 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 12:44:24,690 [screen.py:wake_screen()] - Screen wake up
2023-10-19 12:44:25,099 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-19 12:44:27,150 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 12:44:27,150 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 12:54:26,939 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-19 12:58:36,353 [print.py:_callback()] - newfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-300x300.png']
2023-10-19 12:58:36,353 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,353 [print.py:_callback()] - updatefiles: []
2023-10-19 12:58:36,353 [print.py:_callback()] - newfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-300x300.png']
2023-10-19 12:58:36,354 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,354 [print.py:_callback()] - updatefiles: []
2023-10-19 12:58:36,357 [files.py:_callback()] - Error in getting metadata for .thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-300x300.png. Retrying in 6 seconds
2023-10-19 12:58:36,358 [print.py:_callback()] - newfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-32x32.png']
2023-10-19 12:58:36,359 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,359 [print.py:_callback()] - updatefiles: []
2023-10-19 12:58:36,360 [print.py:_callback()] - newfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-32x32.png']
2023-10-19 12:58:36,361 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,361 [print.py:_callback()] - updatefiles: []
2023-10-19 12:58:36,363 [print.py:_callback()] - newfiles: ['Spool_Roller_Lock_96mm_PLA_35m6s.gcode']
2023-10-19 12:58:36,381 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,381 [print.py:_callback()] - updatefiles: []
2023-10-19 12:58:36,382 [print.py:_callback()] - newfiles: ['Spool_Roller_Lock_96mm_PLA_35m6s.gcode']
2023-10-19 12:58:36,383 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,383 [print.py:_callback()] - updatefiles: []
2023-10-19 12:58:36,384 [files.py:_callback()] - Error in getting metadata for .thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-32x32.png. Retrying in 6 seconds
2023-10-19 12:58:36,386 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'EXTRUDER'
2023-10-19 12:58:36,440 [print.py:_callback()] - newfiles: []
2023-10-19 12:58:36,440 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,440 [print.py:_callback()] - updatefiles: ['Spool_Roller_Lock_96mm_PLA_35m6s.gcode']
2023-10-19 12:58:36,440 [print.py:update_file()] - Updating file Spool_Roller_Lock_96mm_PLA_35m6s.gcode
2023-10-19 12:58:36,442 [print.py:_callback()] - newfiles: []
2023-10-19 12:58:36,442 [print.py:_callback()] - deletedfiles: []
2023-10-19 12:58:36,442 [print.py:_callback()] - updatefiles: ['Spool_Roller_Lock_96mm_PLA_35m6s.gcode']
2023-10-19 12:58:36,442 [print.py:update_file()] - Updating file Spool_Roller_Lock_96mm_PLA_35m6s.gcode
2023-10-19 12:58:36,447 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'cancelled'
2023-10-19 12:58:36,451 [job_status.py:update_file_metadata()] - Update Metadata. File: Spool_Roller_Lock_96mm_PLA_35m6s.gcode Size: 761139
2023-10-19 12:58:36,457 [job_status.py:show_file_thumbnail()] - Spool_Roller_Lock_96mm_PLA_35m6s.gcode
2023-10-19 13:02:34,206 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:34,207 [print.py:_callback()] - deletedfiles: ['Spool_Roller_Lock_96mm_PLA_35m6s.gcode']
2023-10-19 13:02:34,209 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:34,211 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:34,211 [print.py:_callback()] - deletedfiles: ['Spool_Roller_Lock_96mm_PLA_35m6s.gcode']
2023-10-19 13:02:34,212 [print.py:delete_file()] - 'Spool_Roller_Lock_96mm_PLA_35m6s.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'Spool_Roller_Lock_96mm_PLA_35m6s.gcode' is not in list
2023-10-19 13:02:34,216 [print.py:delete_file()] - 'Spool_Roller_Lock_96mm_PLA_35m6s.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'Spool_Roller_Lock_96mm_PLA_35m6s.gcode'
2023-10-19 13:02:34,220 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'Spool_Roller_Lock_96mm_PLA_35m6s.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 13:02:34,461 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:34,462 [print.py:_callback()] - deletedfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-300x300.png']
2023-10-19 13:02:34,462 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:34,463 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:34,463 [print.py:_callback()] - deletedfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-300x300.png']
2023-10-19 13:02:34,463 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:34,465 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:34,466 [print.py:_callback()] - deletedfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-32x32.png']
2023-10-19 13:02:34,466 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:34,467 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:34,467 [print.py:_callback()] - deletedfiles: ['.thumbs/Spool_Roller_Lock_96mm_PLA_35m6s-32x32.png']
2023-10-19 13:02:34,467 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,578 [print.py:_callback()] - newfiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 13:02:51,594 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,594 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,595 [print.py:_callback()] - newfiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 13:02:51,596 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,596 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,597 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png']
2023-10-19 13:02:51,597 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,597 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,598 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png']
2023-10-19 13:02:51,599 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,599 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,602 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png. Retrying in 6 seconds
2023-10-19 13:02:51,608 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png']
2023-10-19 13:02:51,608 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,608 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,610 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png']
2023-10-19 13:02:51,610 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,611 [print.py:_callback()] - updatefiles: []
2023-10-19 13:02:51,612 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:51,612 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,613 [print.py:_callback()] - updatefiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 13:02:51,613 [print.py:update_file()] - Updating file CE3E3V2_Spool_Roller_Lock_96mm.gcode
2023-10-19 13:02:51,615 [print.py:_callback()] - newfiles: []
2023-10-19 13:02:51,615 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:02:51,615 [print.py:_callback()] - updatefiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 13:02:51,615 [print.py:update_file()] - Updating file CE3E3V2_Spool_Roller_Lock_96mm.gcode
2023-10-19 13:02:51,617 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png. Retrying in 6 seconds
2023-10-19 13:02:56,503 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-19 13:02:56,504 [printer.py:change_state()] - Adding callback for state: printing
2023-10-19 13:02:56,514 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2023-10-19 13:02:56,521 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Spool_Roller_Lock_96mm.gcode Size: 1458514
2023-10-19 13:02:56,536 [job_status.py:show_file_thumbnail()] - CE3E3V2_Spool_Roller_Lock_96mm.gcode
2023-10-19 13:02:56,585 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 13:02:56,709 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 13:02:56,715 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 13:02:56,724 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Spool_Roller_Lock_96mm.gcode Size: 1458514
2023-10-19 13:02:56,732 [job_status.py:show_file_thumbnail()] - CE3E3V2_Spool_Roller_Lock_96mm.gcode
2023-10-19 13:33:08,264 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-19 13:33:10,758 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 13:33:10,759 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 13:36:30,200 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2023-10-19 13:36:30,203 [job_status.py:update_file_metadata()] - Cannot find file metadata. Listening for updated metadata
2023-10-19 13:36:30,203 [job_status.py:show_file_thumbnail()] - CE3E3V2_ringing_tower.gcode
2023-10-19 13:36:30,203 [job_status.py:show_file_thumbnail()] - no pixbuf
2023-10-19 13:36:30,221 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_ringing_tower.png']
2023-10-19 13:36:30,222 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,222 [print.py:_callback()] - updatefiles: []
2023-10-19 13:36:30,222 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_ringing_tower.png']
2023-10-19 13:36:30,222 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,222 [print.py:_callback()] - updatefiles: []
2023-10-19 13:36:30,222 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_ringing_tower-32x32.png']
2023-10-19 13:36:30,223 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,223 [print.py:_callback()] - updatefiles: []
2023-10-19 13:36:30,223 [print.py:_callback()] - newfiles: ['.thumbs/CE3E3V2_ringing_tower-32x32.png']
2023-10-19 13:36:30,223 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,223 [print.py:_callback()] - updatefiles: []
2023-10-19 13:36:30,223 [print.py:_callback()] - newfiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 13:36:30,243 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,243 [print.py:_callback()] - updatefiles: []
2023-10-19 13:36:30,243 [print.py:_callback()] - newfiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 13:36:30,246 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,246 [print.py:_callback()] - updatefiles: []
2023-10-19 13:36:30,246 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_ringing_tower.png. Retrying in 6 seconds
2023-10-19 13:36:30,246 [files.py:_callback()] - Error in getting metadata for .thumbs/CE3E3V2_ringing_tower-32x32.png. Retrying in 6 seconds
2023-10-19 13:36:30,250 [print.py:_callback()] - newfiles: []
2023-10-19 13:36:30,250 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,250 [print.py:_callback()] - updatefiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 13:36:30,250 [print.py:update_file()] - Updating file CE3E3V2_ringing_tower.gcode
2023-10-19 13:36:30,251 [print.py:_callback()] - newfiles: []
2023-10-19 13:36:30,251 [print.py:_callback()] - deletedfiles: []
2023-10-19 13:36:30,251 [print.py:_callback()] - updatefiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 13:36:30,251 [print.py:update_file()] - Updating file CE3E3V2_ringing_tower.gcode
2023-10-19 13:36:30,253 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_ringing_tower.gcode Size: 2280237
2023-10-19 13:36:30,262 [job_status.py:show_file_thumbnail()] - CE3E3V2_ringing_tower.gcode
2023-10-19 13:36:30,438 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-19 13:36:30,439 [printer.py:change_state()] - Adding callback for state: printing
2023-10-19 13:36:30,447 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 13:36:30,472 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 13:36:30,598 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 13:36:30,604 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 13:36:30,613 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_ringing_tower.gcode Size: 2280237
2023-10-19 13:36:30,622 [job_status.py:show_file_thumbnail()] - CE3E3V2_ringing_tower.gcode
2023-10-19 13:44:26,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 14:59:08,275 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 14:59:08,289 [screen.py:wake_screen()] - Screen wake up
2023-10-19 14:59:09,436 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2023-10-19 14:59:10,379 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-19 14:59:10,380 [job_status.py:cancel_confirm()] - Canceling print
2023-10-19 14:59:10,380 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2023-10-19 14:59:10,383 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2023-10-19 14:59:10,860 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2023-10-19 14:59:15,367 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 14:59:15,368 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 15:08:26,123 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2023-10-19 15:08:26,123 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-19 15:08:26,125 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-19 15:08:26,127 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 15:08:26,171 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-19 15:08:29,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-19 15:08:29,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-19 15:08:29,032 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-19 15:08:29,041 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-19 15:08:29,042 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-19 15:08:29,053 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-19 15:08:29,072 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-19 15:08:29,075 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-19 15:08:29,078 [printer.py:reinit()] - Klipper version: v0.11.0-299-gb1f597c5
2023-10-19 15:08:29,079 [printer.py:reinit()] - # Extruders: 1
2023-10-19 15:08:29,079 [printer.py:reinit()] - # Temperature devices: 1
2023-10-19 15:08:29,079 [printer.py:reinit()] - # Fans: 3
2023-10-19 15:08:29,079 [printer.py:reinit()] - # Output pins: 0
2023-10-19 15:08:29,079 [printer.py:reinit()] - # Leds: 0
2023-10-19 15:08:29,091 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-19 15:08:29,093 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-19 15:08:29,355 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-19 15:08:29,372 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-19 15:08:29,376 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-19 15:08:29,386 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-19 15:08:29,387 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-19 15:08:29,388 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-19 15:08:29,388 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-19 15:08:29,389 [screen.py:init_printer()] - Printer initialized
2023-10-19 15:08:29,390 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-19 15:08:29,390 [printer.py:change_state()] - Adding callback for state: startup
2023-10-19 15:08:29,419 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,419 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png', '.thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png', '.thumbs/CE3E3V2_ringing_tower.png', '.thumbs/CE3E3V2_ringing_tower-32x32.png']
2023-10-19 15:08:29,419 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,420 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,420 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png', '.thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png', '.thumbs/CE3E3V2_ringing_tower.png', '.thumbs/CE3E3V2_ringing_tower-32x32.png']
2023-10-19 15:08:29,420 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,421 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,421 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png']
2023-10-19 15:08:29,422 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,422 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,423 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm.png']
2023-10-19 15:08:29,423 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,424 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,424 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png']
2023-10-19 15:08:29,424 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,425 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,425 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_Spool_Roller_Lock_96mm-32x32.png']
2023-10-19 15:08:29,425 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,426 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,427 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_ringing_tower.png']
2023-10-19 15:08:29,427 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,427 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,427 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_ringing_tower.png']
2023-10-19 15:08:29,427 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,427 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,428 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_ringing_tower-32x32.png']
2023-10-19 15:08:29,428 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:29,428 [print.py:_callback()] - newfiles: []
2023-10-19 15:08:29,428 [print.py:_callback()] - deletedfiles: ['.thumbs/CE3E3V2_ringing_tower-32x32.png']
2023-10-19 15:08:29,428 [print.py:_callback()] - updatefiles: []
2023-10-19 15:08:30,321 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2023-10-19 15:08:30,321 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 15:08:30,326 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 15:08:30,430 [main_menu.py:__init__()] - ### Making MainMenu
2023-10-19 15:08:30,440 [main_menu.py:add_device()] - Adding device: extruder
2023-10-19 15:08:30,448 [main_menu.py:add_device()] - Adding device: heater_bed
2023-10-19 15:08:30,482 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2023-10-19 15:09:40,346 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 15:09:40,356 [print.py:__init__()] - 24h time is True
2023-10-19 15:09:40,403 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2023-10-19 15:09:40,403 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-19 15:09:42,642 [KlippyGtk.py:Dialog()] - Showing dialog Print CE3E3V2_Skull Glasses Holder.gcode (width=800, height=480)
2023-10-19 15:09:44,424 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-19 15:09:44,424 [print.py:confirm_print_response()] - Starting print: CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 15:09:44,424 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2023-10-19 15:09:44,539 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2023-10-19 15:09:44,539 [printer.py:change_state()] - Adding callback for state: printing
2023-10-19 15:09:44,548 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 15:09:44,664 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 15:09:44,669 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2023-10-19 15:09:44,677 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-19 15:09:44,686 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 15:09:52,628 [screen.py:show_panel()] - Reinitializing panel
2023-10-19 15:09:52,718 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 15:09:54,569 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 15:09:54,590 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 15:09:54,599 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-19 15:09:54,609 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 16:09:55,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 19:19:16,517 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 19:19:16,543 [screen.py:wake_screen()] - Screen wake up
2023-10-19 19:54:39,869 [KlippyGtk.py:Dialog()] - Showing dialog CE3E3V2_Skull Glasses Holder.gcode (width=800, height=480)
2023-10-19 19:54:43,021 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2023-10-19 20:30:06,777 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:06,778 [print.py:_callback()] - deletedfiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 20:30:06,779 [print.py:_callback()] - updatefiles: []
2023-10-19 20:30:06,780 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:06,780 [print.py:_callback()] - deletedfiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 20:30:06,780 [print.py:delete_file()] - 'CE3E3V2_ringing_tower.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_ringing_tower.gcode' is not in list
2023-10-19 20:30:06,781 [print.py:delete_file()] - 'CE3E3V2_ringing_tower.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_ringing_tower.gcode'
2023-10-19 20:30:06,781 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_ringing_tower.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:06,782 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:06,782 [print.py:_callback()] - deletedfiles: ['CE3E3V2_ringing_tower.gcode']
2023-10-19 20:30:06,782 [print.py:delete_file()] - 'CE3E3V2_ringing_tower.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_ringing_tower.gcode' is not in list
2023-10-19 20:30:06,783 [print.py:delete_file()] - 'CE3E3V2_ringing_tower.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_ringing_tower.gcode'
2023-10-19 20:30:06,783 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_ringing_tower.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:21,227 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,228 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 20:30:21,233 [print.py:_callback()] - updatefiles: []
2023-10-19 20:30:21,234 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,235 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 20:30:21,235 [print.py:delete_file()] - 'CE3E3V2_Roller_96mm_wide.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_Roller_96mm_wide.gcode' is not in list
2023-10-19 20:30:21,236 [print.py:delete_file()] - 'CE3E3V2_Roller_96mm_wide.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_Roller_96mm_wide.gcode'
2023-10-19 20:30:21,238 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_Roller_96mm_wide.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:21,239 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,239 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Roller_96mm_wide.gcode']
2023-10-19 20:30:21,239 [print.py:delete_file()] - 'CE3E3V2_Roller_96mm_wide.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_Roller_96mm_wide.gcode' is not in list
2023-10-19 20:30:21,240 [print.py:delete_file()] - 'CE3E3V2_Roller_96mm_wide.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_Roller_96mm_wide.gcode'
2023-10-19 20:30:21,241 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_Roller_96mm_wide.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:21,244 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,244 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 20:30:21,257 [print.py:_callback()] - updatefiles: []
2023-10-19 20:30:21,257 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,258 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 20:30:21,258 [print.py:delete_file()] - 'CE3E3V2_Spool_Roller_Lock_96mm.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_Spool_Roller_Lock_96mm.gcode' is not in list
2023-10-19 20:30:21,259 [print.py:delete_file()] - 'CE3E3V2_Spool_Roller_Lock_96mm.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_Spool_Roller_Lock_96mm.gcode'
2023-10-19 20:30:21,260 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_Spool_Roller_Lock_96mm.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:21,261 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,261 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Spool_Roller_Lock_96mm.gcode']
2023-10-19 20:30:21,261 [print.py:delete_file()] - 'CE3E3V2_Spool_Roller_Lock_96mm.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_Spool_Roller_Lock_96mm.gcode' is not in list
2023-10-19 20:30:21,262 [print.py:delete_file()] - 'CE3E3V2_Spool_Roller_Lock_96mm.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_Spool_Roller_Lock_96mm.gcode'
2023-10-19 20:30:21,263 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_Spool_Roller_Lock_96mm.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:21,264 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,265 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Filament_Side.gcode']
2023-10-19 20:30:21,278 [print.py:_callback()] - updatefiles: []
2023-10-19 20:30:21,279 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,279 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Filament_Side.gcode']
2023-10-19 20:30:21,279 [print.py:delete_file()] - 'CE3E3V2_Filament_Side.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_Filament_Side.gcode' is not in list
2023-10-19 20:30:21,280 [print.py:delete_file()] - 'CE3E3V2_Filament_Side.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_Filament_Side.gcode'
2023-10-19 20:30:21,282 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_Filament_Side.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:30:21,282 [print.py:_callback()] - newfiles: []
2023-10-19 20:30:21,283 [print.py:_callback()] - deletedfiles: ['CE3E3V2_Filament_Side.gcode']
2023-10-19 20:30:21,283 [print.py:delete_file()] - 'CE3E3V2_Filament_Side.gcode' is not in list
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 332, in delete_file
    self.filelist[directory]["files"].pop(self.filelist[directory]["files"].index(os.path.basename(filename)))
ValueError: 'CE3E3V2_Filament_Side.gcode' is not in list
2023-10-19 20:30:21,283 [print.py:delete_file()] - 'CE3E3V2_Filament_Side.gcode'
Traceback (most recent call last):
  File "/home/pi/KlipperScreen/panels/print.py", line 355, in delete_file
    self.dir_panels[directory].remove(self.files[filename])
KeyError: 'CE3E3V2_Filament_Side.gcode'
2023-10-19 20:30:21,285 [functions.py:logging_exception_handler()] - Uncaught exception <class 'KeyError'>: 'CE3E3V2_Filament_Side.gcode'
  File "/home/pi/KlipperScreen/panels/print.py", line 406, in _callback
    self.delete_file(file)

  File "/home/pi/KlipperScreen/panels/print.py", line 359, in delete_file
    self.files.pop(filename)
NoneType: None
2023-10-19 20:54:44,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-19 21:03:04,401 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-19 21:03:04,429 [screen.py:wake_screen()] - Screen wake up
2023-10-19 21:03:24,798 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 21:03:26,126 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S125'}
2023-10-19 21:03:27,673 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 21:03:27,696 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 21:03:27,706 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-19 21:03:27,715 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 21:03:48,505 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 21:03:49,918 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S150'}
2023-10-19 21:03:50,869 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 21:03:50,891 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 21:03:50,900 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-19 21:03:50,910 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 21:04:39,106 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 21:04:40,476 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S175'}
2023-10-19 21:04:41,616 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S200'}
2023-10-19 21:04:42,418 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 21:04:42,454 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 21:04:42,471 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-19 21:04:42,489 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 21:11:34,587 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2023-10-19 21:11:37,239 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S225'}
2023-10-19 21:11:38,026 [screen.py:_menu_go_back()] - #### Menu go back
2023-10-19 21:11:38,071 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2023-10-19 21:11:38,091 [job_status.py:update_file_metadata()] - Update Metadata. File: CE3E3V2_Skull Glasses Holder.gcode Size: 23391386
2023-10-19 21:11:38,108 [job_status.py:show_file_thumbnail()] - CE3E3V2_Skull Glasses Holder.gcode
2023-10-19 21:33:45,218 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2023-10-19 21:33:47,711 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2023-10-19 21:33:47,711 [printer.py:change_state()] - Adding callback for state: ready
2023-10-19 21:43:47,682 [screen.py:show_popup_message()] - error: // Unknown command:"_KM_IDLE_TIMEOUT"
2023-10-19 22:11:39,014 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-20 06:56:29,392 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2023-10-20 06:56:29,392 [printer.py:change_state()] - Adding callback for state: shutdown
2023-10-20 06:56:29,397 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-20 06:56:29,422 [screen.py:wake_screen()] - Screen wake up
2023-10-20 06:56:29,825 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 06:56:29,916 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:19:54,956 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2023-10-20 07:19:54,956 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-20 07:19:54,957 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-20 07:19:54,959 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 07:19:55,008 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:19:58,024 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:19:58,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:19:58,037 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 07:19:58,048 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 07:19:58,049 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 07:19:58,050 [screen.py:init_printer()] - Klipper not connected
2023-10-20 07:20:01,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:20:01,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:20:01,033 [screen.py:init_printer()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 07:20:01,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 07:20:01,043 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 07:20:01,044 [screen.py:init_printer()] - Klipper not connected
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.6-52-gead94b7
2023-10-20 07:20:08,620 [screen.py:main()] - Python version: 3.9
2023-10-20 07:20:08,620 [screen.py:main()] - KlipperScreen version: v0.3.6-52-gead94b7
2023-10-20 07:20:08,738 [config.py:get_config_file_location()] - Passed config (-c): /home/pi/KlipperScreen.conf
2023-10-20 07:20:08,739 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2023-10-20 07:20:08,752 [config.py:log_config()] -  ===== Config File =====

=======================
2023-10-20 07:20:08,753 [config.py:__init__()] - ====== Saved Def ======

[main]
confirm_estop = True

=======================
2023-10-20 07:20:08,753 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-10-20 07:20:08,818 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2023-10-20 07:20:08,818 [config.py:install_language()] - Using system lang
2023-10-20 07:20:08,818 [config.py:install_language()] - Using lang en
2023-10-20 07:20:08,832 [screen.py:__init__()] - Screen resolution: 800x480
2023-10-20 07:20:08,833 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2023-10-20 07:20:09,244 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-10-20 07:20:09,254 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-10-20 07:20:09,264 [screen.py:initial_connection()] - Default printer: None
2023-10-20 07:20:09,264 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-20 07:20:09,264 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-10-20 07:20:09,314 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:20:09,322 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-20 07:20:09,337 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:20:09,348 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-20 07:20:09,349 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-20 07:20:09,360 [_logging.py:info()] - Websocket connected
2023-10-20 07:20:09,360 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-20 07:20:09,460 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:20:09,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:20:09,472 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'authorization', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 07:20:09,482 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 07:20:09,483 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 07:20:09,495 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-20 07:20:09,516 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-20 07:20:09,519 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-20 07:20:09,522 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-20 07:20:09,522 [printer.py:reinit()] - # Extruders: 1
2023-10-20 07:20:09,522 [printer.py:reinit()] - # Temperature devices: 1
2023-10-20 07:20:09,522 [printer.py:reinit()] - # Fans: 3
2023-10-20 07:20:09,522 [printer.py:reinit()] - # Output pins: 0
2023-10-20 07:20:09,522 [printer.py:reinit()] - # Leds: 0
2023-10-20 07:20:09,538 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-20 07:20:09,540 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-20 07:20:09,801 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-20 07:20:09,822 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:20:09,826 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2023-10-20 07:20:09,837 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2023-10-20 07:20:09,839 [screen.py:init_tempstore()] - Temperature store size: 1200
2023-10-20 07:20:09,839 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-20 07:20:09,839 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-20 07:20:09,840 [screen.py:init_printer()] - Printer initialized
2023-10-20 07:20:09,840 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2023-10-20 07:20:09,840 [printer.py:change_state()] - Adding callback for state: startup
2023-10-20 07:21:34,266 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2023-10-20 07:21:34,266 [printer.py:change_state()] - Adding callback for state: error
2023-10-20 07:21:34,269 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 07:21:34,362 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:26:52,101 [KlippyWebsocket.py:on_close()] - Server Shutdown
2023-10-20 07:26:52,103 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 07:26:52,103 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2023-10-20 07:26:52,155 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:26:52,165 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-10-20 07:26:52,166 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 07:26:52,217 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:26:52,230 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-20 07:26:52,238 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2023-10-20 07:27:02,013 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-10-20 07:27:02,024 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:27:02,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-10-20 07:27:02,034 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-10-20 07:27:02,041 [_logging.py:info()] - Websocket connected
2023-10-20 07:27:02,042 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-10-20 07:27:02,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:27:02,058 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 07:27:02,059 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 07:27:02,067 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 07:27:02,068 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 07:27:02,077 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-20 07:27:02,164 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2023-10-20 07:27:02,166 [screen.py:init_printer()] - {'configfile': {'config': {'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'variable_park': 'True'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'variable_restore_idle_timeout': '0', 'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'variable_extrude': '1.0'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}"}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '350', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '400', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro M117': {'rename_existing': 'M117.1', 'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}'}, 'sdcard_loop': {}, 'gcode_macro M808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}'}, 'exclude_object': {}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'stepper_x': {'step_pin': 'PB13', 'dir_pin': '!PB12', 'enable_pin': '!PB14', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC0', 'position_endstop': '0', 'position_min': '0', 'position_max': '240', 'homing_speed': '80'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '0', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PB10', 'dir_pin': '!PB2', 'enable_pin': '!PB11', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_endstop': '0', 'position_min': '0', 'position_max': '230', 'homing_speed': '80'}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '2', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PB0', 'dir_pin': 'PC5', 'enable_pin': '!PB1', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '235', 'position_min': '-4'}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '1', 'run_current': '0.580', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PB3', 'dir_pin': '!PB4', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'PC8', 'sensor_type': 'ATC Semitec 104GT-2', 'sensor_pin': 'PA0', 'min_temp': '0', 'max_temp': '260', 'pressure_advance': '0.0364', 'max_extrude_only_distance': '400', 'control': 'pid', 'pid_kp': '23.813', 'pid_ki': '1.291', 'pid_kd': '109.838'}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': '3', 'run_current': '0.650', 'hold_current': '0.500', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PC9', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PC4', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '66.145', 'pid_ki': '1.007', 'pid_kd': '1086.431'}, 'heater_fan controller_fan': {'pin': 'PC7', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'heater_fan nozzle_cooling_fan': {'pin': 'PB15'}, 'fan': {'pin': 'PC6'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00'}, 'printer': {'kinematics': 'cartesian', 'max_velocity': '500', 'max_accel': '3200', 'max_z_velocity': '5', 'max_z_accel': '100'}, 'board_pins': {'aliases': '\n\nEXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,\nEXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>'}, 'safe_z_home': {'home_xy_position': '110, 110', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bltouch': {'sensor_pin': '^PC14', 'control_pin': 'PA1', 'x_offset': '-45', 'y_offset': '-10', 'speed': '3.0', 'samples': '2', 'samples_result': 'median', 'sample_retract_dist': '6.0', 'samples_tolerance': '0.01', 'samples_tolerance_retries': '3', 'z_offset': '1.220'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '50, 30', 'mesh_max': '190, 210', 'probe_count': '4,4', 'fade_start': '1', 'fade_end': '10'}, 'screws_tilt_adjust': {'screw1': '71,38', 'screw1_name': 'front_left', 'screw2': '235,38', 'screw2_name': 'front_right', 'screw3': '71,210', 'screw3_name': 'back_left', 'screw4': '235,210', 'screw4_name': 'back_right', 'speed': '100', 'horizontal_move_z': '10', 'screw_thread': 'CW-M4'}, 'input_shaper': {'shaper_freq_x': '34.0', 'shaper_type_x': 'mzv', 'shaper_freq_y': '39', 'shaper_type_y': 'mzv'}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'detection_length': '2.88', 'extruder': 'extruder', 'pause_on_runout': 'False'}, 'gcode_macro _km_options': {'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'gcode': '', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'adxl345': {'cs_pin': 'rpi:None'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n100, 100, 20'}, 'bed_mesh default': {'version': '1', 'points': '\n0.148750, 0.131250, 0.136250, 0.176250\n0.107500, 0.086250, 0.061250, 0.086250\n0.083750, 0.085000, 0.052500, 0.090000\n0.101250, 0.096250, 0.071250, 0.098750', 'x_count': '4', 'y_count': '4', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '50.0', 'max_x': '189.97', 'min_y': '30.0', 'max_y': '210.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_290008000C50415833323420-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '/home/pi/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': "\n\n\n{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}\n_TOOLHEAD_PARK_PAUSE_CANCEL\n{% endif %}\n\nTURN_OFF_HEATERS\nCANCEL_PRINT_BASE", 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\nPAUSE_BASE\n_TOOLHEAD_PARK_PAUSE_CANCEL', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print', 'variable_restore_idle_timeout': '0'}, 'gcode_macro resume': {'gcode': '\n\n\n{% set extrude = printer[\'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL\'].extrude %}\n\n{% if \'VELOCITY\' in params|upper %}\n{% set get_params = (\'VELOCITY=\' + params.VELOCITY)  %}\n{%else %}\n{% set get_params = "" %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n\nRESUME_BASE {get_params}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}"}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n\n{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_extrude': '1.0'}, 'gcode_macro _client_extrude': {'gcode': "\n\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != '' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG='Extruder not hot enough'\n{% endif %}\n{% endif %}", 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nG28\nG90\n\n\n\n\n\n{% if params.BED|int > 90 %}\nM106 S255\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\n{% endif %}\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 E-3 F300\n\nG1 Z10 F3000\nG90\n\nM84', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '350', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '400', 'variable_purge_distance': '25'}, 'gcode_macro m117': {'gcode': '\n{% if rawparams %}\n{% set escaped_msg = rawparams.split(\';\', 1)[0].split(\'\\x23\', 1)[0]|replace(\'"\', \'\\\\"\') %}\nSET_DISPLAY_TEXT MSG="{escaped_msg}"\nRESPOND TYPE=command MSG="{escaped_msg}"\n{% else %}\nSET_DISPLAY_TEXT\n{% endif %}', 'rename_existing': 'M117.1', 'description': 'G-Code macro'}, 'gcode_macro m808': {'gcode': '\n{% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}\n{% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}\n{% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'tmc2209 stepper_x': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 0, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PB13', 'dir_pin': '!PB12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB14', 'endstop_pin': '^PC0', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 240.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 2, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PB10', 'dir_pin': '!PB2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB11', 'endstop_pin': '^PC1', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 230.0, 'homing_speed': 80.0, 'second_homing_speed': 40.0, 'homing_retract_speed': 80.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 1, 'run_current': 0.58, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': 'PC5', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB1', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.0, 'position_max': 235.0, 'homing_speed': 5.0, 'second_homing_speed': 2.5, 'homing_retract_speed': 5.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC11', 'tx_pin': 'PC10', 'uart_address': 3, 'run_current': 0.65, 'hold_current': 0.5, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 260.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 23.813, 'pid_ki': 1.291, 'pid_kd': 109.838, 'heater_pin': 'PC8', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 851.4594571812618, 'max_extrude_only_distance': 400.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PB3', 'pressure_advance': 0.0364, 'pressure_advance_smooth_time': 0.04, 'dir_pin': '!PB4', 'rotation_distance': 32.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PC4', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.145, 'pid_ki': 1.007, 'pid_kd': 1086.431, 'heater_pin': 'PC9', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'heater_fan controller_fan': {'heater': ['heater_bed'], 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC7', 'fan_speed': 1.0}, 'heater_fan nozzle_cooling_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PB15', 'fan_speed': 1.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC6'}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PB5'], ['EXP1_3', 'PA9'], ['EXP1_5', 'PA10'], ['EXP1_7', 'PB8'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PA15'], ['EXP1_4', '<RST>'], ['EXP1_6', 'PB9'], ['EXP1_8', 'PD6'], ['EXP1_10', '<5V>']]}, 'safe_z_home': {'home_xy_position': [110.0, 110.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bltouch': {'z_offset': 1.22, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PA1', 'sensor_pin': '^PC14', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 3.0, 'lift_speed': 3.0, 'x_offset': -45.0, 'y_offset': -10.0, 'samples': 2, 'sample_retract_dist': 6.0, 'samples_result': 'median', 'samples_tolerance': 0.01, 'samples_tolerance_retries': 3}, 'bed_mesh': {'probe_count': [4, 4], 'mesh_min': [50.0, 30.0], 'mesh_max': [190.0, 210.0], 'mesh_pps': [2, 2], 'algorithm': 'lagrange', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.14875, 0.13125, 0.13625, 0.17625], [0.1075, 0.08625, 0.06125, 0.08625], [0.08375, 0.085, 0.0525, 0.09], [0.10125, 0.09625, 0.07125, 0.09875]], 'min_x': 50.0, 'max_x': 189.97, 'min_y': 30.0, 'max_y': 210.0, 'x_count': 4, 'y_count': 4, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'screws_tilt_adjust': {'screw1': [71.0, 38.0], 'screw1_name': 'front_left', 'screw2': [235.0, 38.0], 'screw2_name': 'front_right', 'screw3': [71.0, 210.0], 'screw3_name': 'back_left', 'screw4': [235.0, 210.0], 'screw4_name': 'back_right', 'screw_thread': 'CW-M4', 'horizontal_move_z': 10.0, 'speed': 100.0}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 34.0, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 39.0}, 'filament_motion_sensor filament_motion': {'switch_pin': 'PC15', 'extruder': 'extruder', 'detection_length': 2.88, 'pause_on_runout': False, 'pause_delay': 0.5, 'event_delay': 3.0}, 'gcode_macro _km_options': {'gcode': '', 'description': 'G-Code macro', 'variable_load_length': '50.0', 'variable_start_purge_length': '30', 'variable_menu_show_octoprint': 'False', 'variable_menu_show_sdcard': 'False'}, 'idle_timeout': {'timeout': 600.0, 'gcode': '\n_KM_IDLE_TIMEOUT'}, 'save_variables': {'filename': '/home/pi/printer_data/config/variables.cfg'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'rpi:None', 'spi_speed': 5000000}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[100.0, 100.0, 20.0]], 'accel_chip': 'adxl345'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3200.0, 'max_accel_to_decel': 1600.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'cartesian', 'max_z_velocity': 5.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2023-10-20 07:27:02,169 [printer.py:reinit()] - Klipper version: v0.11.0-303-g67499853
2023-10-20 07:27:02,169 [printer.py:reinit()] - # Extruders: 1
2023-10-20 07:27:02,169 [printer.py:reinit()] - # Temperature devices: 1
2023-10-20 07:27:02,169 [printer.py:reinit()] - # Fans: 3
2023-10-20 07:27:02,169 [printer.py:reinit()] - # Output pins: 0
2023-10-20 07:27:02,170 [printer.py:reinit()] - # Leds: 0
2023-10-20 07:27:02,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2023-10-20 07:27:02,183 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2023-10-20 07:27:02,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&heater_fan controller_fan&heater_fan nozzle_cooling_fan&filament_motion_sensor filament_motion
2023-10-20 07:27:02,470 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:02,471 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:02,471 [files.py:initialize()] - Gcodes path: /home/pi/printer_data/gcodes
2023-10-20 07:27:02,471 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2023-10-20 07:27:02,472 [screen.py:init_printer()] - Printer initialized
2023-10-20 07:27:02,472 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2023-10-20 07:27:02,472 [printer.py:change_state()] - Adding callback for state: error
2023-10-20 07:27:02,474 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 07:27:02,525 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 07:27:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:18,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:38,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:38,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:43,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:43,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:48,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:48,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:53,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:27:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:27:58,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:08,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:08,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:13,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:23,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:28,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:33,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:43,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:53,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:53,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:28:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:28:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:03,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:08,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:28,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:33,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:29:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:29:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:03,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:03,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:33,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:43,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:30:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:30:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:18,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:23,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:23,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:33,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:43,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:53,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:31:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:31:58,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:18,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:18,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:28,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:28,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:33,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:43,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:43,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:48,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:53,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:32:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:32:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:33,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:38,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:38,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:33:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:33:58,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:33,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:33,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:43,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:34:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:34:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:33,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:35:58,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:35:58,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:18,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:23,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:23,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:33,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:38,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:48,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:48,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:36:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:36:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:13,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:13,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:18,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:33,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:38,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:43,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:37:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:37:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:03,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:08,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:23,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:23,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:28,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:28,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:33,019 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:33,020 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:38,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:43,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:48,025 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:48,026 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:38:58,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:38:58,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:03,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:33,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:53,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:53,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:39:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:39:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:03,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:03,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:08,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:33,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:40:58,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:40:58,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:03,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:23,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:43,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:41:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:41:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:33,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:43,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:42:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:42:58,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:13,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:18,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:23,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:28,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:28,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:33,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:53,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:53,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:43:58,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:43:58,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:08,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:08,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:18,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:33,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:33,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:43,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:53,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:44:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:44:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:13,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:18,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:33,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:33,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:38,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:45:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:45:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:13,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:13,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:23,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:33,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:33,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:38,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:38,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:43,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:53,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:46:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:46:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:03,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:03,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:23,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:23,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:33,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:38,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:38,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:53,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:53,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:47:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:47:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:33,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:33,027 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:38,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:38,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:43,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:43,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:48,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:53,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:48:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:48:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:13,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:18,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:28,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:38,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:43,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:49:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:49:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:28,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:33,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:38,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:38,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:50:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:50:58,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:03,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:08,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:28,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:28,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:33,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:38,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:38,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:43,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:43,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:48,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:48,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:51:58,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:51:58,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:08,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:08,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:18,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:23,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:28,037 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:28,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:38,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:38,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:43,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:43,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:52:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:52:58,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:08,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:28,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:38,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:38,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:48,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:48,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:53:58,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:53:58,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:08,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:08,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:18,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:18,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:28,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:38,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:38,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:43,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:48,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:48,039 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:54:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:54:58,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:08,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:08,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:18,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:18,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:28,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:38,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:38,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:48,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:48,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:53,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:55:58,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:55:58,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:18,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:28,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:28,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:38,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:38,025 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:48,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:48,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:56:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:56:58,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:08,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:08,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:13,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:18,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:18,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:28,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:33,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:38,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:38,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:48,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:48,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:57:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:57:58,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:08,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:08,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:13,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:13,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:18,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:18,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:38,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:38,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:43,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:48,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:48,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:53,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:53,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:58:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:58:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:13,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:13,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:23,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:28,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:28,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:33,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:33,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:48,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:48,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:53,026 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:53,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 07:59:58,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 07:59:58,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:03,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:03,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:08,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:13,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:18,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:18,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:28,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:28,044 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:33,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:33,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:38,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:38,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:48,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:48,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:00:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:00:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:33,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:43,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:48,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:53,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:53,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:01:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:01:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:03,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:03,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:13,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:23,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:28,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:28,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:33,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:33,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:38,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:38,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:43,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:53,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:53,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:02:58,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:02:58,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:13,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:13,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:18,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:23,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:33,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:38,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:43,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:43,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:53,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:03:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:03:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:03,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:23,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:38,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:38,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:43,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:53,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:53,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:04:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:04:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:53,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:53,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:05:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:05:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:08,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:23,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:33,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:33,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:38,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:38,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:43,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:53,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:53,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:06:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:06:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:08,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:23,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:28,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:28,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:43,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:07:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:07:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:18,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:23,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:38,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:38,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:43,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:48,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:08:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:08:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:13,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:18,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:23,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:28,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:28,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:43,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:43,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:48,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:48,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:53,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:09:58,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:09:58,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:03,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:23,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:38,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:38,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:48,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:10:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:10:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:08,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:08,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:13,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:13,039 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:18,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:18,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:23,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:23,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:28,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:33,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:33,038 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:38,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:38,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:43,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:11:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:11:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:13,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:23,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:23,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:28,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:28,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:38,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:43,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:43,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:48,039 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:12:58,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:12:58,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:23,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:38,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:43,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:53,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:13:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:13:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:03,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:13,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:28,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:28,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:33,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:43,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:43,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:14:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:14:58,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:08,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:13,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:18,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:23,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:33,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:33,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:38,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:43,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:43,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:15:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:15:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:28,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:43,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:43,024 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:53,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:53,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:16:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:16:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:08,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:08,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:13,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:18,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:28,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:28,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:33,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:33,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:43,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:43,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:17:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:17:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:38,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:43,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:43,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:18:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:18:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:23,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:43,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:43,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:19:58,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:19:58,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:03,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:10,015 [screen.py:show_screensaver()] - Showing Screensaver
2023-10-20 08:20:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:23,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:28,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:28,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:38,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:38,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:43,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:43,024 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:53,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:20:58,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:20:58,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:08,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:08,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:18,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:18,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:23,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:23,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:28,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:28,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:38,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:43,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:21:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:21:58,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:18,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:18,039 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:33,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:38,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:43,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:43,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:53,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:22:58,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:22:58,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:13,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:13,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:38,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:38,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:43,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:23:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:23:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:03,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:13,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:23,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:23,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:28,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:33,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:33,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:38,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:38,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:43,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:43,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:24:58,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:24:58,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:03,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:03,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:43,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:43,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:48,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:53,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:25:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:25:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:03,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:03,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:08,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:13,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:13,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:33,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:38,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:38,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:43,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:43,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:26:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:26:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:03,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:08,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:18,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:23,034 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:23,036 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:28,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:28,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:38,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:43,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:43,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:48,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:53,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:27:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:27:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:08,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:13,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:13,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:33,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:33,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:43,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:43,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:48,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:28:58,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:28:58,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:03,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:03,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:13,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:18,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:18,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:23,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:23,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:28,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:28,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:38,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:43,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:43,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:48,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:48,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:29:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:29:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:08,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:08,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:18,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:23,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:23,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:28,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:38,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:38,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:43,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:43,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:48,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:48,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:53,034 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:30:58,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:30:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:08,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:08,028 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:18,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:18,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:23,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:23,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:28,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:33,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:33,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:38,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:38,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:43,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:43,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:48,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:48,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:53,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:53,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:31:58,027 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:31:58,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:03,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:03,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:08,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:08,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:13,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:13,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:18,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:18,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:23,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:23,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:28,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:28,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:33,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:33,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:38,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:38,030 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:43,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:43,022 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:48,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:53,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:53,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:32:58,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:32:58,029 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:03,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:03,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:08,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:08,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:13,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:13,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:18,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:18,033 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:23,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:23,037 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:28,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:28,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:33,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:33,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:38,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:38,032 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:40,556 [screen.py:close_screensaver()] - Closing Screensaver
2023-10-20 08:33:40,573 [screen.py:wake_screen()] - Screen wake up
2023-10-20 08:33:42,269 [KlippyWebsocket.py:connect()] - Already connected
2023-10-20 08:33:43,030 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:43,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:48,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:48,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:53,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:53,035 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:33:58,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:33:58,031 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:34:03,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:34:03,023 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:34:06,894 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2023-10-20 08:34:07,228 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2023-10-20 08:34:07,228 [printer.py:change_state()] - Adding callback for state: disconnected
2023-10-20 08:34:07,230 [screen.py:state_disconnected()] - ### Going to disconnected
2023-10-20 08:34:07,232 [screen.py:show_panel()] - Reinitializing panel
2023-10-20 08:34:07,297 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-10-20 08:34:08,020 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2023-10-20 08:34:08,021 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2023-10-20 08:34:11,021 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 08:34:11,029 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-10-20 08:34:11,030 [screen.py:init_printer()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-186-g2641fc5', 'missing_klippy_requirements': [], 'api_version': [1, 3, 0], 'api_version_string': '1.3.0'}
2023-10-20 08:34:11,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2023-10-20 08:34:11,039 [printer.py:configure_cameras()] - Cameras: [{'name': 'Camera', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'cd207d88-5c0f-4407-8b34-b86fdfa3218a'}]
2023-10-20 08:34:11,048 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2023-10-20 08:34:11,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
